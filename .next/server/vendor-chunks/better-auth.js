"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/better-auth";
exports.ids = ["vendor-chunks/better-auth"];
exports.modules = {

/***/ "(rsc)/./node_modules/better-auth/dist/adapters/drizzle-adapter/index.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/better-auth/dist/adapters/drizzle-adapter/index.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drizzleAdapter: () => (/* binding */ drizzleAdapter)\n/* harmony export */ });\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/sql.js\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/expressions/select.js\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/expressions/conditions.js\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/functions/aggregate.js\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_DFIAchwv_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/better-auth.DFIAchwv.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DFIAchwv.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/better-auth.tB5eU6EY.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _shared_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/better-auth.DORkW_Ge.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../shared/better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../shared/better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst drizzleAdapter = (db, config) => (0,_shared_better_auth_DFIAchwv_mjs__WEBPACK_IMPORTED_MODULE_1__.c)({\n  config: {\n    adapterId: \"drizzle\",\n    adapterName: \"Drizzle Adapter\",\n    usePlural: config.usePlural ?? false,\n    debugLogs: config.debugLogs ?? false\n  },\n  adapter: ({ getFieldName, debugLog }) => {\n    function getSchema(model) {\n      const schema = config.schema || db._.fullSchema;\n      if (!schema) {\n        throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n          \"Drizzle adapter failed to initialize. Schema not found. Please provide a schema object in the adapter options object.\"\n        );\n      }\n      const schemaModel = schema[model];\n      if (!schemaModel) {\n        throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n          `[# Drizzle Adapter]: The model \"${model}\" was not found in the schema object. Please pass the schema directly to the adapter options.`\n        );\n      }\n      return schemaModel;\n    }\n    const withReturning = async (model, builder, data, where) => {\n      if (config.provider !== \"mysql\") {\n        const c = await builder.returning();\n        return c[0];\n      }\n      await builder.execute();\n      const schemaModel = getSchema(model);\n      const builderVal = builder.config?.values;\n      if (where?.length) {\n        const clause = convertWhereClause(where, model);\n        const res = await db.select().from(schemaModel).where(...clause);\n        return res[0];\n      } else if (builderVal && builderVal[0]?.id?.value) {\n        let tId = builderVal[0]?.id?.value;\n        if (!tId) {\n          const lastInsertId = await db.select({ id: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_13__.sql)`LAST_INSERT_ID()` }).from(schemaModel).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_14__.desc)(schemaModel.id)).limit(1);\n          tId = lastInsertId[0].id;\n        }\n        const res = await db.select().from(schemaModel).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.eq)(schemaModel.id, tId)).limit(1).execute();\n        return res[0];\n      } else if (data.id) {\n        const res = await db.select().from(schemaModel).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.eq)(schemaModel.id, data.id)).limit(1).execute();\n        return res[0];\n      } else {\n        if (!(\"id\" in schemaModel)) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `The model \"${model}\" does not have an \"id\" field. Please use the \"id\" field as your primary key.`\n          );\n        }\n        const res = await db.select().from(schemaModel).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_14__.desc)(schemaModel.id)).limit(1).execute();\n        return res[0];\n      }\n    };\n    function convertWhereClause(where, model) {\n      const schemaModel = getSchema(model);\n      if (!where) return [];\n      if (where.length === 1) {\n        const w = where[0];\n        if (!w) {\n          return [];\n        }\n        const field = getFieldName({ model, field: w.field });\n        if (!schemaModel[field]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `The field \"${w.field}\" does not exist in the schema for the model \"${model}\". Please update your schema.`\n          );\n        }\n        if (w.operator === \"in\") {\n          if (!Array.isArray(w.value)) {\n            throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n              `The value for the field \"${w.field}\" must be an array when using the \"in\" operator.`\n            );\n          }\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.inArray)(schemaModel[field], w.value)];\n        }\n        if (w.operator === \"contains\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.like)(schemaModel[field], `%${w.value}%`)];\n        }\n        if (w.operator === \"starts_with\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.like)(schemaModel[field], `${w.value}%`)];\n        }\n        if (w.operator === \"ends_with\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.like)(schemaModel[field], `%${w.value}`)];\n        }\n        if (w.operator === \"lt\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.lt)(schemaModel[field], w.value)];\n        }\n        if (w.operator === \"lte\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.lte)(schemaModel[field], w.value)];\n        }\n        if (w.operator === \"ne\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.ne)(schemaModel[field], w.value)];\n        }\n        if (w.operator === \"gt\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.gt)(schemaModel[field], w.value)];\n        }\n        if (w.operator === \"gte\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.gte)(schemaModel[field], w.value)];\n        }\n        return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.eq)(schemaModel[field], w.value)];\n      }\n      const andGroup = where.filter(\n        (w) => w.connector === \"AND\" || !w.connector\n      );\n      const orGroup = where.filter((w) => w.connector === \"OR\");\n      const andClause = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.and)(\n        ...andGroup.map((w) => {\n          const field = getFieldName({ model, field: w.field });\n          if (w.operator === \"in\") {\n            if (!Array.isArray(w.value)) {\n              throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n                `The value for the field \"${w.field}\" must be an array when using the \"in\" operator.`\n              );\n            }\n            return (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.inArray)(schemaModel[field], w.value);\n          }\n          return (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.eq)(schemaModel[field], w.value);\n        })\n      );\n      const orClause = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.or)(\n        ...orGroup.map((w) => {\n          const field = getFieldName({ model, field: w.field });\n          return (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.eq)(schemaModel[field], w.value);\n        })\n      );\n      const clause = [];\n      if (andGroup.length) clause.push(andClause);\n      if (orGroup.length) clause.push(orClause);\n      return clause;\n    }\n    function checkMissingFields(schema, model, values) {\n      if (!schema) {\n        throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n          \"Drizzle adapter failed to initialize. Schema not found. Please provide a schema object in the adapter options object.\"\n        );\n      }\n      for (const key in values) {\n        if (!schema[key]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `The field \"${key}\" does not exist in the \"${model}\" schema. Please update your drizzle schema or re-generate using \"npx @better-auth/cli generate\".`\n          );\n        }\n      }\n    }\n    return {\n      async create({ model, data: values }) {\n        const schemaModel = getSchema(model);\n        checkMissingFields(schemaModel, model, values);\n        const builder = db.insert(schemaModel).values(values);\n        const returned = await withReturning(model, builder, values);\n        return returned;\n      },\n      async findOne({ model, where }) {\n        const schemaModel = getSchema(model);\n        const clause = convertWhereClause(where, model);\n        const res = await db.select().from(schemaModel).where(...clause);\n        if (!res.length) return null;\n        return res[0];\n      },\n      async findMany({ model, where, sortBy, limit, offset }) {\n        const schemaModel = getSchema(model);\n        const clause = where ? convertWhereClause(where, model) : [];\n        const sortFn = sortBy?.direction === \"desc\" ? drizzle_orm__WEBPACK_IMPORTED_MODULE_14__.desc : drizzle_orm__WEBPACK_IMPORTED_MODULE_14__.asc;\n        const builder = db.select().from(schemaModel).limit(limit || 100).offset(offset || 0);\n        if (sortBy?.field) {\n          builder.orderBy(\n            sortFn(\n              schemaModel[getFieldName({ model, field: sortBy?.field })]\n            )\n          );\n        }\n        return await builder.where(...clause);\n      },\n      async count({ model, where }) {\n        const schemaModel = getSchema(model);\n        const clause = where ? convertWhereClause(where, model) : [];\n        const res = await db.select({ count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_16__.count)() }).from(schemaModel).where(...clause);\n        return res[0].count;\n      },\n      async update({ model, where, update: values }) {\n        const schemaModel = getSchema(model);\n        const clause = convertWhereClause(where, model);\n        const builder = db.update(schemaModel).set(values).where(...clause);\n        return await withReturning(model, builder, values, where);\n      },\n      async updateMany({ model, where, update: values }) {\n        const schemaModel = getSchema(model);\n        const clause = convertWhereClause(where, model);\n        const builder = db.update(schemaModel).set(values).where(...clause);\n        return await builder;\n      },\n      async delete({ model, where }) {\n        const schemaModel = getSchema(model);\n        const clause = convertWhereClause(where, model);\n        const builder = db.delete(schemaModel).where(...clause);\n        return await builder;\n      },\n      async deleteMany({ model, where }) {\n        const schemaModel = getSchema(model);\n        const clause = convertWhereClause(where, model);\n        const builder = db.delete(schemaModel).where(...clause);\n        return await builder;\n      },\n      options: config\n    };\n  }\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/adapters/drizzle-adapter/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/api/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/better-auth/dist/api/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIError: () => (/* reexport safe */ better_call__WEBPACK_IMPORTED_MODULE_0__.APIError),\n/* harmony export */   accountInfo: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.m),\n/* harmony export */   callbackOAuth: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.P),\n/* harmony export */   changeEmail: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.I),\n/* harmony export */   changePassword: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.G),\n/* harmony export */   createAuthEndpoint: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a),\n/* harmony export */   createAuthMiddleware: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.c),\n/* harmony export */   createEmailVerificationToken: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.e),\n/* harmony export */   deleteUser: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.E),\n/* harmony export */   deleteUserCallback: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.q),\n/* harmony export */   error: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.j),\n/* harmony export */   forgetPassword: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.M),\n/* harmony export */   forgetPasswordCallback: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.D),\n/* harmony export */   freshSessionMiddleware: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.f),\n/* harmony export */   getAccessToken: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.n),\n/* harmony export */   getEndpoints: () => (/* binding */ getEndpoints),\n/* harmony export */   getSession: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.b),\n/* harmony export */   getSessionFromCtx: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   linkSocialAccount: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.v),\n/* harmony export */   listSessions: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.l),\n/* harmony export */   listUserAccounts: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.t),\n/* harmony export */   ok: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.k),\n/* harmony export */   optionsMiddleware: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.S),\n/* harmony export */   originCheck: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.o),\n/* harmony export */   originCheckMiddleware: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.i),\n/* harmony export */   refreshToken: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.r),\n/* harmony export */   requestOnlySessionMiddleware: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.R),\n/* harmony export */   requestPasswordReset: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.C),\n/* harmony export */   requestPasswordResetCallback: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.A),\n/* harmony export */   resetPassword: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.L),\n/* harmony export */   revokeOtherSessions: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.x),\n/* harmony export */   revokeSession: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.z),\n/* harmony export */   revokeSessions: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.y),\n/* harmony export */   router: () => (/* binding */ router),\n/* harmony export */   sendVerificationEmail: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.J),\n/* harmony export */   sendVerificationEmailFn: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.d),\n/* harmony export */   sessionMiddleware: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.s),\n/* harmony export */   setPassword: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.F),\n/* harmony export */   signInEmail: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.N),\n/* harmony export */   signInSocial: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.Q),\n/* harmony export */   signOut: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.O),\n/* harmony export */   signUpEmail: () => (/* binding */ signUpEmail),\n/* harmony export */   unlinkAccount: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.p),\n/* harmony export */   updateUser: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.u),\n/* harmony export */   verifyEmail: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.K)\n/* harmony export */ });\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/better-auth.cM0Fc3LZ.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.cM0Fc3LZ.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/types.js\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cookies/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var _shared_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/better-auth.Cc72UxUH.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs\");\n/* harmony import */ var _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n/* harmony import */ var _shared_better_auth_iKoUsdFE_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/better-auth.iKoUsdFE.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.iKoUsdFE.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! defu */ \"(rsc)/./node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _shared_better_auth_DPBqdYQ3_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../shared/better-auth.DPBqdYQ3.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DPBqdYQ3.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _social_providers_index_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../social-providers/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/social-providers/index.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../shared/better-auth.DufyW0qf.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DufyW0qf.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../shared/better-auth.tB5eU6EY.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../shared/better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _shared_better_auth_DDEbWX_S_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../shared/better-auth.DDEbWX-S.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DDEbWX-S.mjs\");\n/* harmony import */ var _shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../shared/better-auth.VTXNLFMT.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst signUpEmail = () => (0,_shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/sign-up/email\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_26__.record(zod__WEBPACK_IMPORTED_MODULE_26__.string(), zod__WEBPACK_IMPORTED_MODULE_26__.any()),\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Sign up a user using email and password\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  name: {\n                    type: \"string\",\n                    description: \"The name of the user\"\n                  },\n                  email: {\n                    type: \"string\",\n                    description: \"The email of the user\"\n                  },\n                  password: {\n                    type: \"string\",\n                    description: \"The password of the user\"\n                  },\n                  callbackURL: {\n                    type: \"string\",\n                    description: \"The URL to use for email verification callback\"\n                  }\n                },\n                required: [\"name\", \"email\", \"password\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Successfully created user\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\",\n                      nullable: true,\n                      description: \"Authentication token for the session\"\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"The unique identifier of the user\"\n                        },\n                        email: {\n                          type: \"string\",\n                          format: \"email\",\n                          description: \"The email address of the user\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"The name of the user\"\n                        },\n                        image: {\n                          type: \"string\",\n                          format: \"uri\",\n                          nullable: true,\n                          description: \"The profile image URL of the user\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Whether the email has been verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was created\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was last updated\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"user\"]\n                  // token is optional\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.enabled || ctx.context.options.emailAndPassword?.disableSignUp) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Email and password sign up is not enabled\"\n      });\n    }\n    const body = ctx.body;\n    const { name, email, password, image, callbackURL, ...additionalFields } = body;\n    const isValidEmail = zod__WEBPACK_IMPORTED_MODULE_26__.string().email().safeParse(email);\n    if (!isValidEmail.success) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.INVALID_EMAIL\n      });\n    }\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (password.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (password.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.PASSWORD_TOO_LONG\n      });\n    }\n    const dbUser = await ctx.context.internalAdapter.findUserByEmail(email);\n    if (dbUser?.user) {\n      ctx.context.logger.info(`Sign-up attempt for existing email: ${email}`);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n        message: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.USER_ALREADY_EXISTS\n      });\n    }\n    const additionalData = (0,_shared_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_3__.f)(\n      ctx.context.options,\n      additionalFields\n    );\n    const hash = await ctx.context.password.hash(password);\n    let createdUser;\n    try {\n      createdUser = await ctx.context.internalAdapter.createUser(\n        {\n          email: email.toLowerCase(),\n          name,\n          image,\n          ...additionalData,\n          emailVerified: false\n        },\n        ctx\n      );\n      if (!createdUser) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_USER\n        });\n      }\n    } catch (e) {\n      if (_shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_4__.b) {\n        ctx.context.logger.error(\"Failed to create user\", e);\n      }\n      if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n        throw e;\n      }\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n        message: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_USER,\n        details: e\n      });\n    }\n    if (!createdUser) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n        message: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_USER\n      });\n    }\n    await ctx.context.internalAdapter.linkAccount(\n      {\n        userId: createdUser.id,\n        providerId: \"credential\",\n        accountId: createdUser.id,\n        password: hash\n      },\n      ctx\n    );\n    if (ctx.context.options.emailVerification?.sendOnSignUp || ctx.context.options.emailAndPassword.requireEmailVerification) {\n      const token = await (0,_shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(\n        ctx.context.secret,\n        createdUser.email,\n        void 0,\n        ctx.context.options.emailVerification?.expiresIn\n      );\n      const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${body.callbackURL || \"/\"}`;\n      await ctx.context.options.emailVerification?.sendVerificationEmail?.(\n        {\n          user: createdUser,\n          url,\n          token\n        },\n        ctx.request\n      );\n    }\n    if (ctx.context.options.emailAndPassword.autoSignIn === false || ctx.context.options.emailAndPassword.requireEmailVerification) {\n      return ctx.json({\n        token: null,\n        user: {\n          id: createdUser.id,\n          email: createdUser.email,\n          name: createdUser.name,\n          image: createdUser.image,\n          emailVerified: createdUser.emailVerified,\n          createdAt: createdUser.createdAt,\n          updatedAt: createdUser.updatedAt\n        }\n      });\n    }\n    const session = await ctx.context.internalAdapter.createSession(\n      createdUser.id,\n      ctx\n    );\n    if (!session) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_SESSION\n      });\n    }\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_2__.setSessionCookie)(ctx, {\n      session,\n      user: createdUser\n    });\n    return ctx.json({\n      token: session.token,\n      user: {\n        id: createdUser.id,\n        email: createdUser.email,\n        name: createdUser.name,\n        image: createdUser.image,\n        emailVerified: createdUser.emailVerified,\n        createdAt: createdUser.createdAt,\n        updatedAt: createdUser.updatedAt\n      }\n    });\n  }\n);\n\nfunction shouldRateLimit(max, window, rateLimitData) {\n  const now = Date.now();\n  const windowInMs = window * 1e3;\n  const timeSinceLastRequest = now - rateLimitData.lastRequest;\n  return timeSinceLastRequest < windowInMs && rateLimitData.count >= max;\n}\nfunction rateLimitResponse(retryAfter) {\n  return new Response(\n    JSON.stringify({\n      message: \"Too many requests. Please try again later.\"\n    }),\n    {\n      status: 429,\n      statusText: \"Too Many Requests\",\n      headers: {\n        \"X-Retry-After\": retryAfter.toString()\n      }\n    }\n  );\n}\nfunction getRetryAfter(lastRequest, window) {\n  const now = Date.now();\n  const windowInMs = window * 1e3;\n  return Math.ceil((lastRequest + windowInMs - now) / 1e3);\n}\nfunction createDBStorage(ctx, modelName) {\n  const model = ctx.options.rateLimit?.modelName || \"rateLimit\";\n  const db = ctx.adapter;\n  return {\n    get: async (key) => {\n      const res = await db.findMany({\n        model,\n        where: [{ field: \"key\", value: key }]\n      });\n      const data = res[0];\n      if (typeof data?.lastRequest === \"bigint\") {\n        data.lastRequest = Number(data.lastRequest);\n      }\n      return data;\n    },\n    set: async (key, value, _update) => {\n      try {\n        if (_update) {\n          await db.updateMany({\n            model: \"rateLimit\",\n            where: [{ field: \"key\", value: key }],\n            update: {\n              count: value.count,\n              lastRequest: value.lastRequest\n            }\n          });\n        } else {\n          await db.create({\n            model: \"rateLimit\",\n            data: {\n              key,\n              count: value.count,\n              lastRequest: value.lastRequest\n            }\n          });\n        }\n      } catch (e) {\n        ctx.logger.error(\"Error setting rate limit\", e);\n      }\n    }\n  };\n}\nconst memory = /* @__PURE__ */ new Map();\nfunction getRateLimitStorage(ctx) {\n  if (ctx.options.rateLimit?.customStorage) {\n    return ctx.options.rateLimit.customStorage;\n  }\n  if (ctx.rateLimit.storage === \"secondary-storage\") {\n    return {\n      get: async (key) => {\n        const stringified = await ctx.options.secondaryStorage?.get(key);\n        return stringified ? JSON.parse(stringified) : void 0;\n      },\n      set: async (key, value) => {\n        await ctx.options.secondaryStorage?.set?.(key, JSON.stringify(value));\n      }\n    };\n  }\n  const storage = ctx.rateLimit.storage;\n  if (storage === \"memory\") {\n    return {\n      async get(key) {\n        return memory.get(key);\n      },\n      async set(key, value, _update) {\n        memory.set(key, value);\n      }\n    };\n  }\n  return createDBStorage(ctx, ctx.rateLimit.modelName);\n}\nasync function onRequestRateLimit(req, ctx) {\n  if (!ctx.rateLimit.enabled) {\n    return;\n  }\n  const path = new URL(req.url).pathname.replace(\n    ctx.options.basePath || \"/api/auth\",\n    \"\"\n  );\n  let window = ctx.rateLimit.window;\n  let max = ctx.rateLimit.max;\n  const ip = (0,_shared_better_auth_iKoUsdFE_mjs__WEBPACK_IMPORTED_MODULE_6__.g)(req, ctx.options);\n  if (!ip) {\n    return;\n  }\n  const key = ip + path;\n  const specialRules = getDefaultSpecialRules();\n  const specialRule = specialRules.find((rule) => rule.pathMatcher(path));\n  if (specialRule) {\n    window = specialRule.window;\n    max = specialRule.max;\n  }\n  for (const plugin of ctx.options.plugins || []) {\n    if (plugin.rateLimit) {\n      const matchedRule = plugin.rateLimit.find(\n        (rule) => rule.pathMatcher(path)\n      );\n      if (matchedRule) {\n        window = matchedRule.window;\n        max = matchedRule.max;\n        break;\n      }\n    }\n  }\n  if (ctx.rateLimit.customRules) {\n    const _path = Object.keys(ctx.rateLimit.customRules).find((p) => {\n      if (p.includes(\"*\")) {\n        const isMatch = (0,_shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(p)(path);\n        return isMatch;\n      }\n      return p === path;\n    });\n    if (_path) {\n      const customRule = ctx.rateLimit.customRules[_path];\n      const resolved = typeof customRule === \"function\" ? await customRule(req) : customRule;\n      if (resolved) {\n        window = resolved.window;\n        max = resolved.max;\n      }\n    }\n  }\n  const storage = getRateLimitStorage(ctx);\n  const data = await storage.get(key);\n  const now = Date.now();\n  if (!data) {\n    await storage.set(key, {\n      key,\n      count: 1,\n      lastRequest: now\n    });\n  } else {\n    const timeSinceLastRequest = now - data.lastRequest;\n    if (shouldRateLimit(max, window, data)) {\n      const retryAfter = getRetryAfter(data.lastRequest, window);\n      return rateLimitResponse(retryAfter);\n    } else if (timeSinceLastRequest > window * 1e3) {\n      await storage.set(\n        key,\n        {\n          ...data,\n          count: 1,\n          lastRequest: now\n        },\n        true\n      );\n    } else {\n      await storage.set(\n        key,\n        {\n          ...data,\n          count: data.count + 1,\n          lastRequest: now\n        },\n        true\n      );\n    }\n  }\n}\nfunction getDefaultSpecialRules() {\n  const specialRules = [\n    {\n      pathMatcher(path) {\n        return path.startsWith(\"/sign-in\") || path.startsWith(\"/sign-up\") || path.startsWith(\"/change-password\") || path.startsWith(\"/change-email\");\n      },\n      window: 10,\n      max: 3\n    }\n  ];\n  return specialRules;\n}\n\nfunction toAuthEndpoints(endpoints, ctx) {\n  const api = {};\n  for (const [key, endpoint] of Object.entries(endpoints)) {\n    api[key] = async (context) => {\n      const authContext = await ctx;\n      let internalContext = {\n        ...context,\n        context: {\n          ...authContext,\n          returned: void 0,\n          responseHeaders: void 0,\n          session: null\n        },\n        path: endpoint.path,\n        headers: context?.headers ? new Headers(context?.headers) : void 0\n      };\n      const { beforeHooks, afterHooks } = getHooks(authContext);\n      const before = await runBeforeHooks(internalContext, beforeHooks);\n      if (\"context\" in before && before.context && typeof before.context === \"object\") {\n        const { headers, ...rest } = before.context;\n        if (headers) {\n          headers.forEach((value, key2) => {\n            internalContext.headers.set(key2, value);\n          });\n        }\n        internalContext = (0,defu__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(rest, internalContext);\n      } else if (before) {\n        return before;\n      }\n      internalContext.asResponse = false;\n      internalContext.returnHeaders = true;\n      const result = await endpoint(internalContext).catch((e) => {\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n          return {\n            response: e,\n            headers: e.headers ? new Headers(e.headers) : null\n          };\n        }\n        throw e;\n      });\n      internalContext.context.returned = result.response;\n      internalContext.context.responseHeaders = result.headers;\n      const after = await runAfterHooks(internalContext, afterHooks);\n      if (after.response) {\n        result.response = after.response;\n      }\n      if (result.response instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError && !context?.asResponse) {\n        throw result.response;\n      }\n      const response = context?.asResponse ? (0,better_call__WEBPACK_IMPORTED_MODULE_0__.toResponse)(result.response, {\n        headers: result.headers\n      }) : context?.returnHeaders ? {\n        headers: result.headers,\n        response: result.response\n      } : result.response;\n      return response;\n    };\n    api[key].path = endpoint.path;\n    api[key].options = endpoint.options;\n  }\n  return api;\n}\nasync function runBeforeHooks(context, hooks) {\n  let modifiedContext = {};\n  for (const hook of hooks) {\n    if (hook.matcher(context)) {\n      const result = await hook.handler({\n        ...context,\n        returnHeaders: false\n      });\n      if (result && typeof result === \"object\") {\n        if (\"context\" in result && typeof result.context === \"object\") {\n          const { headers, ...rest } = result.context;\n          if (headers instanceof Headers) {\n            if (modifiedContext.headers) {\n              headers.forEach((value, key) => {\n                modifiedContext.headers?.set(key, value);\n              });\n            } else {\n              modifiedContext.headers = headers;\n            }\n          }\n          modifiedContext = (0,defu__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(rest, modifiedContext);\n          continue;\n        }\n        return result;\n      }\n    }\n  }\n  return { context: modifiedContext };\n}\nasync function runAfterHooks(context, hooks) {\n  for (const hook of hooks) {\n    if (hook.matcher(context)) {\n      const result = await hook.handler(context).catch((e) => {\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n          return {\n            response: e,\n            headers: e.headers ? new Headers(e.headers) : null\n          };\n        }\n        throw e;\n      });\n      if (result.headers) {\n        result.headers.forEach((value, key) => {\n          if (!context.context.responseHeaders) {\n            context.context.responseHeaders = new Headers({\n              [key]: value\n            });\n          } else {\n            if (key.toLowerCase() === \"set-cookie\") {\n              context.context.responseHeaders.append(key, value);\n            } else {\n              context.context.responseHeaders.set(key, value);\n            }\n          }\n        });\n      }\n      if (result.response) {\n        context.context.returned = result.response;\n      }\n    }\n  }\n  return {\n    response: context.context.returned,\n    headers: context.context.responseHeaders\n  };\n}\nfunction getHooks(authContext) {\n  const plugins = authContext.options.plugins || [];\n  const beforeHooks = [];\n  const afterHooks = [];\n  if (authContext.options.hooks?.before) {\n    beforeHooks.push({\n      matcher: () => true,\n      handler: authContext.options.hooks.before\n    });\n  }\n  if (authContext.options.hooks?.after) {\n    afterHooks.push({\n      matcher: () => true,\n      handler: authContext.options.hooks.after\n    });\n  }\n  const pluginBeforeHooks = plugins.map((plugin) => {\n    if (plugin.hooks?.before) {\n      return plugin.hooks.before;\n    }\n  }).filter((plugin) => plugin !== void 0).flat();\n  const pluginAfterHooks = plugins.map((plugin) => {\n    if (plugin.hooks?.after) {\n      return plugin.hooks.after;\n    }\n  }).filter((plugin) => plugin !== void 0).flat();\n  pluginBeforeHooks.length && beforeHooks.push(...pluginBeforeHooks);\n  pluginAfterHooks.length && afterHooks.push(...pluginAfterHooks);\n  return {\n    beforeHooks,\n    afterHooks\n  };\n}\n\nfunction getEndpoints(ctx, options) {\n  const pluginEndpoints = options.plugins?.reduce(\n    (acc, plugin) => {\n      return {\n        ...acc,\n        ...plugin.endpoints\n      };\n    },\n    {}\n  );\n  const middlewares = options.plugins?.map(\n    (plugin) => plugin.middlewares?.map((m) => {\n      const middleware = async (context) => {\n        return m.middleware({\n          ...context,\n          context: {\n            ...ctx,\n            ...context.context\n          }\n        });\n      };\n      middleware.options = m.middleware.options;\n      return {\n        path: m.path,\n        middleware\n      };\n    })\n  ).filter((plugin) => plugin !== void 0).flat() || [];\n  const baseEndpoints = {\n    signInSocial: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.Q,\n    callbackOAuth: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.P,\n    getSession: (0,_shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(),\n    signOut: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.O,\n    signUpEmail: signUpEmail(),\n    signInEmail: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.N,\n    forgetPassword: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.M,\n    resetPassword: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.L,\n    verifyEmail: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.K,\n    sendVerificationEmail: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.J,\n    changeEmail: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.I,\n    changePassword: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.G,\n    setPassword: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.F,\n    updateUser: (0,_shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.u)(),\n    deleteUser: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.E,\n    forgetPasswordCallback: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.D,\n    requestPasswordReset: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.C,\n    requestPasswordResetCallback: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.A,\n    listSessions: (0,_shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.l)(),\n    revokeSession: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.z,\n    revokeSessions: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.y,\n    revokeOtherSessions: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.x,\n    linkSocialAccount: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.v,\n    listUserAccounts: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.t,\n    deleteUserCallback: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.q,\n    unlinkAccount: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.p,\n    refreshToken: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.r,\n    getAccessToken: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.n,\n    accountInfo: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.m\n  };\n  const endpoints = {\n    ...baseEndpoints,\n    ...pluginEndpoints,\n    ok: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.k,\n    error: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.j\n  };\n  const api = toAuthEndpoints(endpoints, ctx);\n  return {\n    api,\n    middlewares\n  };\n}\nconst router = (ctx, options) => {\n  const { api, middlewares } = getEndpoints(ctx, options);\n  const basePath = new URL(ctx.baseURL).pathname;\n  return (0,better_call__WEBPACK_IMPORTED_MODULE_0__.createRouter)(api, {\n    routerContext: ctx,\n    openapi: {\n      disabled: true\n    },\n    basePath,\n    routerMiddleware: [\n      {\n        path: \"/**\",\n        middleware: _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.i\n      },\n      ...middlewares\n    ],\n    async onRequest(req) {\n      const disabledPaths = ctx.options.disabledPaths || [];\n      const path = new URL(req.url).pathname.replace(basePath, \"\");\n      if (disabledPaths.includes(path)) {\n        return new Response(\"Not Found\", { status: 404 });\n      }\n      for (const plugin of ctx.options.plugins || []) {\n        if (plugin.onRequest) {\n          const response = await plugin.onRequest(req, ctx);\n          if (response && \"response\" in response) {\n            return response.response;\n          }\n        }\n      }\n      return onRequestRateLimit(req, ctx);\n    },\n    async onResponse(res) {\n      for (const plugin of ctx.options.plugins || []) {\n        if (plugin.onResponse) {\n          const response = await plugin.onResponse(res, ctx);\n          if (response) {\n            return response.response;\n          }\n        }\n      }\n      return res;\n    },\n    onError(e) {\n      if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError && e.status === \"FOUND\") {\n        return;\n      }\n      if (options.onAPIError?.throw) {\n        throw e;\n      }\n      if (options.onAPIError?.onError) {\n        options.onAPIError.onError(e, ctx);\n        return;\n      }\n      const optLogLevel = options.logger?.level;\n      const log = optLogLevel === \"error\" || optLogLevel === \"warn\" || optLogLevel === \"debug\" ? _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_5__.l : void 0;\n      if (options.logger?.disabled !== true) {\n        if (e && typeof e === \"object\" && \"message\" in e && typeof e.message === \"string\") {\n          if (e.message.includes(\"no column\") || e.message.includes(\"column\") || e.message.includes(\"relation\") || e.message.includes(\"table\") || e.message.includes(\"does not exist\")) {\n            ctx.logger?.error(e.message);\n            return;\n          }\n        }\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n          if (e.status === \"INTERNAL_SERVER_ERROR\") {\n            ctx.logger.error(e.status, e);\n          }\n          log?.error(e.message);\n        } else {\n          ctx.logger?.error(\n            e && typeof e === \"object\" && \"name\" in e ? e.name : \"\",\n            e\n          );\n        }\n      }\n    }\n  });\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/api/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BunSqliteAdapter: () => (/* binding */ BunSqliteAdapter),\n/* harmony export */   BunSqliteDialect: () => (/* binding */ BunSqliteDialect),\n/* harmony export */   BunSqliteDriver: () => (/* binding */ BunSqliteDriver),\n/* harmony export */   BunSqliteIntrospector: () => (/* binding */ BunSqliteIntrospector),\n/* harmony export */   BunSqliteQueryCompiler: () => (/* binding */ BunSqliteQueryCompiler)\n/* harmony export */ });\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/query-compiler/compiled-query.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/migration/migrator.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/raw-builder/sql.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js\");\n\n\nclass BunSqliteAdapter {\n  get supportsCreateIfNotExists() {\n    return true;\n  }\n  get supportsTransactionalDdl() {\n    return false;\n  }\n  get supportsReturning() {\n    return true;\n  }\n  async acquireMigrationLock() {\n  }\n  async releaseMigrationLock() {\n  }\n  get supportsOutput() {\n    return true;\n  }\n}\nclass BunSqliteDriver {\n  #config;\n  #connectionMutex = new ConnectionMutex();\n  #db;\n  #connection;\n  constructor(config) {\n    this.#config = { ...config };\n  }\n  async init() {\n    this.#db = this.#config.database;\n    this.#connection = new BunSqliteConnection(this.#db);\n    if (this.#config.onCreateConnection) {\n      await this.#config.onCreateConnection(this.#connection);\n    }\n  }\n  async acquireConnection() {\n    await this.#connectionMutex.lock();\n    return this.#connection;\n  }\n  async beginTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"begin\"));\n  }\n  async commitTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"commit\"));\n  }\n  async rollbackTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"rollback\"));\n  }\n  async releaseConnection() {\n    this.#connectionMutex.unlock();\n  }\n  async destroy() {\n    this.#db?.close();\n  }\n}\nclass BunSqliteConnection {\n  #db;\n  constructor(db) {\n    this.#db = db;\n  }\n  executeQuery(compiledQuery) {\n    const { sql: sql2, parameters } = compiledQuery;\n    const stmt = this.#db.prepare(sql2);\n    return Promise.resolve({\n      rows: stmt.all(parameters)\n    });\n  }\n  async *streamQuery() {\n    throw new Error(\"Streaming query is not supported by SQLite driver.\");\n  }\n}\nclass ConnectionMutex {\n  #promise;\n  #resolve;\n  async lock() {\n    while (this.#promise) {\n      await this.#promise;\n    }\n    this.#promise = new Promise((resolve) => {\n      this.#resolve = resolve;\n    });\n  }\n  unlock() {\n    const resolve = this.#resolve;\n    this.#promise = void 0;\n    this.#resolve = void 0;\n    resolve?.();\n  }\n}\nclass BunSqliteIntrospector {\n  #db;\n  constructor(db) {\n    this.#db = db;\n  }\n  async getSchemas() {\n    return [];\n  }\n  async getTables(options = { withInternalKyselyTables: false }) {\n    let query = this.#db.selectFrom(\"sqlite_schema\").where(\"type\", \"=\", \"table\").where(\"name\", \"not like\", \"sqlite_%\").select(\"name\").$castTo();\n    if (!options.withInternalKyselyTables) {\n      query = query.where(\"name\", \"!=\", kysely__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MIGRATION_TABLE).where(\"name\", \"!=\", kysely__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MIGRATION_LOCK_TABLE);\n    }\n    const tables = await query.execute();\n    return Promise.all(tables.map(({ name }) => this.#getTableMetadata(name)));\n  }\n  async getMetadata(options) {\n    return {\n      tables: await this.getTables(options)\n    };\n  }\n  async #getTableMetadata(table) {\n    const db = this.#db;\n    const createSql = await db.selectFrom(\"sqlite_master\").where(\"name\", \"=\", table).select(\"sql\").$castTo().execute();\n    const autoIncrementCol = createSql[0]?.sql?.split(/[\\(\\),]/)?.find((it) => it.toLowerCase().includes(\"autoincrement\"))?.split(/\\s+/)?.[0]?.replace(/[\"`]/g, \"\");\n    const columns = await db.selectFrom(\n      (0,kysely__WEBPACK_IMPORTED_MODULE_2__.sql)`pragma_table_info(${table})`.as(\"table_info\")\n    ).select([\"name\", \"type\", \"notnull\", \"dflt_value\"]).execute();\n    return {\n      name: table,\n      columns: columns.map((col) => ({\n        name: col.name,\n        dataType: col.type,\n        isNullable: !col.notnull,\n        isAutoIncrementing: col.name === autoIncrementCol,\n        hasDefaultValue: col.dflt_value != null\n      })),\n      isView: true\n    };\n  }\n}\nclass BunSqliteQueryCompiler extends kysely__WEBPACK_IMPORTED_MODULE_3__.DefaultQueryCompiler {\n  getCurrentParameterPlaceholder() {\n    return \"?\";\n  }\n  getLeftIdentifierWrapper() {\n    return '\"';\n  }\n  getRightIdentifierWrapper() {\n    return '\"';\n  }\n  getAutoIncrement() {\n    return \"autoincrement\";\n  }\n}\nclass BunSqliteDialect {\n  #config;\n  constructor(config) {\n    this.#config = { ...config };\n  }\n  createDriver() {\n    return new BunSqliteDriver(this.#config);\n  }\n  createQueryCompiler() {\n    return new BunSqliteQueryCompiler();\n  }\n  createAdapter() {\n    return new BunSqliteAdapter();\n  }\n  createIntrospector(db) {\n    return new BunSqliteIntrospector(db);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9jaHVua3MvYnVuLXNxbGl0ZS1kaWFsZWN0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBeUg7O0FBRXpIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxpREFBYTtBQUMvQztBQUNBO0FBQ0Esa0NBQWtDLGlEQUFhO0FBQy9DO0FBQ0E7QUFDQSxrQ0FBa0MsaURBQWE7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksd0JBQXdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGlDQUFpQztBQUMvRDtBQUNBO0FBQ0Esd0NBQXdDLDJEQUF1QixzQkFBc0IsZ0VBQTRCO0FBQ2pIO0FBQ0E7QUFDQSxxQ0FBcUMsTUFBTTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSwyQ0FBRyxxQkFBcUIsTUFBTTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsd0RBQW9CO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRThHIiwic291cmNlcyI6WyIvVXNlcnMvZGF2aWxpbWFzL0RvY3VtZW50cy9EYXZpL2VzdHVkb3MvcmVhY3QvYmV3ZWFyL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L2NodW5rcy9idW4tc3FsaXRlLWRpYWxlY3QubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBpbGVkUXVlcnksIERlZmF1bHRRdWVyeUNvbXBpbGVyLCBERUZBVUxUX01JR1JBVElPTl9UQUJMRSwgREVGQVVMVF9NSUdSQVRJT05fTE9DS19UQUJMRSwgc3FsIH0gZnJvbSAna3lzZWx5JztcblxuY2xhc3MgQnVuU3FsaXRlQWRhcHRlciB7XG4gIGdldCBzdXBwb3J0c0NyZWF0ZUlmTm90RXhpc3RzKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGdldCBzdXBwb3J0c1RyYW5zYWN0aW9uYWxEZGwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGdldCBzdXBwb3J0c1JldHVybmluZygpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBhc3luYyBhY3F1aXJlTWlncmF0aW9uTG9jaygpIHtcbiAgfVxuICBhc3luYyByZWxlYXNlTWlncmF0aW9uTG9jaygpIHtcbiAgfVxuICBnZXQgc3VwcG9ydHNPdXRwdXQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbmNsYXNzIEJ1blNxbGl0ZURyaXZlciB7XG4gICNjb25maWc7XG4gICNjb25uZWN0aW9uTXV0ZXggPSBuZXcgQ29ubmVjdGlvbk11dGV4KCk7XG4gICNkYjtcbiAgI2Nvbm5lY3Rpb247XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuI2NvbmZpZyA9IHsgLi4uY29uZmlnIH07XG4gIH1cbiAgYXN5bmMgaW5pdCgpIHtcbiAgICB0aGlzLiNkYiA9IHRoaXMuI2NvbmZpZy5kYXRhYmFzZTtcbiAgICB0aGlzLiNjb25uZWN0aW9uID0gbmV3IEJ1blNxbGl0ZUNvbm5lY3Rpb24odGhpcy4jZGIpO1xuICAgIGlmICh0aGlzLiNjb25maWcub25DcmVhdGVDb25uZWN0aW9uKSB7XG4gICAgICBhd2FpdCB0aGlzLiNjb25maWcub25DcmVhdGVDb25uZWN0aW9uKHRoaXMuI2Nvbm5lY3Rpb24pO1xuICAgIH1cbiAgfVxuICBhc3luYyBhY3F1aXJlQ29ubmVjdGlvbigpIHtcbiAgICBhd2FpdCB0aGlzLiNjb25uZWN0aW9uTXV0ZXgubG9jaygpO1xuICAgIHJldHVybiB0aGlzLiNjb25uZWN0aW9uO1xuICB9XG4gIGFzeW5jIGJlZ2luVHJhbnNhY3Rpb24oY29ubmVjdGlvbikge1xuICAgIGF3YWl0IGNvbm5lY3Rpb24uZXhlY3V0ZVF1ZXJ5KENvbXBpbGVkUXVlcnkucmF3KFwiYmVnaW5cIikpO1xuICB9XG4gIGFzeW5jIGNvbW1pdFRyYW5zYWN0aW9uKGNvbm5lY3Rpb24pIHtcbiAgICBhd2FpdCBjb25uZWN0aW9uLmV4ZWN1dGVRdWVyeShDb21waWxlZFF1ZXJ5LnJhdyhcImNvbW1pdFwiKSk7XG4gIH1cbiAgYXN5bmMgcm9sbGJhY2tUcmFuc2FjdGlvbihjb25uZWN0aW9uKSB7XG4gICAgYXdhaXQgY29ubmVjdGlvbi5leGVjdXRlUXVlcnkoQ29tcGlsZWRRdWVyeS5yYXcoXCJyb2xsYmFja1wiKSk7XG4gIH1cbiAgYXN5bmMgcmVsZWFzZUNvbm5lY3Rpb24oKSB7XG4gICAgdGhpcy4jY29ubmVjdGlvbk11dGV4LnVubG9jaygpO1xuICB9XG4gIGFzeW5jIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4jZGI/LmNsb3NlKCk7XG4gIH1cbn1cbmNsYXNzIEJ1blNxbGl0ZUNvbm5lY3Rpb24ge1xuICAjZGI7XG4gIGNvbnN0cnVjdG9yKGRiKSB7XG4gICAgdGhpcy4jZGIgPSBkYjtcbiAgfVxuICBleGVjdXRlUXVlcnkoY29tcGlsZWRRdWVyeSkge1xuICAgIGNvbnN0IHsgc3FsOiBzcWwyLCBwYXJhbWV0ZXJzIH0gPSBjb21waWxlZFF1ZXJ5O1xuICAgIGNvbnN0IHN0bXQgPSB0aGlzLiNkYi5wcmVwYXJlKHNxbDIpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgcm93czogc3RtdC5hbGwocGFyYW1ldGVycylcbiAgICB9KTtcbiAgfVxuICBhc3luYyAqc3RyZWFtUXVlcnkoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyZWFtaW5nIHF1ZXJ5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgU1FMaXRlIGRyaXZlci5cIik7XG4gIH1cbn1cbmNsYXNzIENvbm5lY3Rpb25NdXRleCB7XG4gICNwcm9taXNlO1xuICAjcmVzb2x2ZTtcbiAgYXN5bmMgbG9jaygpIHtcbiAgICB3aGlsZSAodGhpcy4jcHJvbWlzZSkge1xuICAgICAgYXdhaXQgdGhpcy4jcHJvbWlzZTtcbiAgICB9XG4gICAgdGhpcy4jcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLiNyZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgfVxuICB1bmxvY2soKSB7XG4gICAgY29uc3QgcmVzb2x2ZSA9IHRoaXMuI3Jlc29sdmU7XG4gICAgdGhpcy4jcHJvbWlzZSA9IHZvaWQgMDtcbiAgICB0aGlzLiNyZXNvbHZlID0gdm9pZCAwO1xuICAgIHJlc29sdmU/LigpO1xuICB9XG59XG5jbGFzcyBCdW5TcWxpdGVJbnRyb3NwZWN0b3Ige1xuICAjZGI7XG4gIGNvbnN0cnVjdG9yKGRiKSB7XG4gICAgdGhpcy4jZGIgPSBkYjtcbiAgfVxuICBhc3luYyBnZXRTY2hlbWFzKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBhc3luYyBnZXRUYWJsZXMob3B0aW9ucyA9IHsgd2l0aEludGVybmFsS3lzZWx5VGFibGVzOiBmYWxzZSB9KSB7XG4gICAgbGV0IHF1ZXJ5ID0gdGhpcy4jZGIuc2VsZWN0RnJvbShcInNxbGl0ZV9zY2hlbWFcIikud2hlcmUoXCJ0eXBlXCIsIFwiPVwiLCBcInRhYmxlXCIpLndoZXJlKFwibmFtZVwiLCBcIm5vdCBsaWtlXCIsIFwic3FsaXRlXyVcIikuc2VsZWN0KFwibmFtZVwiKS4kY2FzdFRvKCk7XG4gICAgaWYgKCFvcHRpb25zLndpdGhJbnRlcm5hbEt5c2VseVRhYmxlcykge1xuICAgICAgcXVlcnkgPSBxdWVyeS53aGVyZShcIm5hbWVcIiwgXCIhPVwiLCBERUZBVUxUX01JR1JBVElPTl9UQUJMRSkud2hlcmUoXCJuYW1lXCIsIFwiIT1cIiwgREVGQVVMVF9NSUdSQVRJT05fTE9DS19UQUJMRSk7XG4gICAgfVxuICAgIGNvbnN0IHRhYmxlcyA9IGF3YWl0IHF1ZXJ5LmV4ZWN1dGUoKTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwodGFibGVzLm1hcCgoeyBuYW1lIH0pID0+IHRoaXMuI2dldFRhYmxlTWV0YWRhdGEobmFtZSkpKTtcbiAgfVxuICBhc3luYyBnZXRNZXRhZGF0YShvcHRpb25zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRhYmxlczogYXdhaXQgdGhpcy5nZXRUYWJsZXMob3B0aW9ucylcbiAgICB9O1xuICB9XG4gIGFzeW5jICNnZXRUYWJsZU1ldGFkYXRhKHRhYmxlKSB7XG4gICAgY29uc3QgZGIgPSB0aGlzLiNkYjtcbiAgICBjb25zdCBjcmVhdGVTcWwgPSBhd2FpdCBkYi5zZWxlY3RGcm9tKFwic3FsaXRlX21hc3RlclwiKS53aGVyZShcIm5hbWVcIiwgXCI9XCIsIHRhYmxlKS5zZWxlY3QoXCJzcWxcIikuJGNhc3RUbygpLmV4ZWN1dGUoKTtcbiAgICBjb25zdCBhdXRvSW5jcmVtZW50Q29sID0gY3JlYXRlU3FsWzBdPy5zcWw/LnNwbGl0KC9bXFwoXFwpLF0vKT8uZmluZCgoaXQpID0+IGl0LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJhdXRvaW5jcmVtZW50XCIpKT8uc3BsaXQoL1xccysvKT8uWzBdPy5yZXBsYWNlKC9bXCJgXS9nLCBcIlwiKTtcbiAgICBjb25zdCBjb2x1bW5zID0gYXdhaXQgZGIuc2VsZWN0RnJvbShcbiAgICAgIHNxbGBwcmFnbWFfdGFibGVfaW5mbygke3RhYmxlfSlgLmFzKFwidGFibGVfaW5mb1wiKVxuICAgICkuc2VsZWN0KFtcIm5hbWVcIiwgXCJ0eXBlXCIsIFwibm90bnVsbFwiLCBcImRmbHRfdmFsdWVcIl0pLmV4ZWN1dGUoKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGFibGUsXG4gICAgICBjb2x1bW5zOiBjb2x1bW5zLm1hcCgoY29sKSA9PiAoe1xuICAgICAgICBuYW1lOiBjb2wubmFtZSxcbiAgICAgICAgZGF0YVR5cGU6IGNvbC50eXBlLFxuICAgICAgICBpc051bGxhYmxlOiAhY29sLm5vdG51bGwsXG4gICAgICAgIGlzQXV0b0luY3JlbWVudGluZzogY29sLm5hbWUgPT09IGF1dG9JbmNyZW1lbnRDb2wsXG4gICAgICAgIGhhc0RlZmF1bHRWYWx1ZTogY29sLmRmbHRfdmFsdWUgIT0gbnVsbFxuICAgICAgfSkpLFxuICAgICAgaXNWaWV3OiB0cnVlXG4gICAgfTtcbiAgfVxufVxuY2xhc3MgQnVuU3FsaXRlUXVlcnlDb21waWxlciBleHRlbmRzIERlZmF1bHRRdWVyeUNvbXBpbGVyIHtcbiAgZ2V0Q3VycmVudFBhcmFtZXRlclBsYWNlaG9sZGVyKCkge1xuICAgIHJldHVybiBcIj9cIjtcbiAgfVxuICBnZXRMZWZ0SWRlbnRpZmllcldyYXBwZXIoKSB7XG4gICAgcmV0dXJuICdcIic7XG4gIH1cbiAgZ2V0UmlnaHRJZGVudGlmaWVyV3JhcHBlcigpIHtcbiAgICByZXR1cm4gJ1wiJztcbiAgfVxuICBnZXRBdXRvSW5jcmVtZW50KCkge1xuICAgIHJldHVybiBcImF1dG9pbmNyZW1lbnRcIjtcbiAgfVxufVxuY2xhc3MgQnVuU3FsaXRlRGlhbGVjdCB7XG4gICNjb25maWc7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuI2NvbmZpZyA9IHsgLi4uY29uZmlnIH07XG4gIH1cbiAgY3JlYXRlRHJpdmVyKCkge1xuICAgIHJldHVybiBuZXcgQnVuU3FsaXRlRHJpdmVyKHRoaXMuI2NvbmZpZyk7XG4gIH1cbiAgY3JlYXRlUXVlcnlDb21waWxlcigpIHtcbiAgICByZXR1cm4gbmV3IEJ1blNxbGl0ZVF1ZXJ5Q29tcGlsZXIoKTtcbiAgfVxuICBjcmVhdGVBZGFwdGVyKCkge1xuICAgIHJldHVybiBuZXcgQnVuU3FsaXRlQWRhcHRlcigpO1xuICB9XG4gIGNyZWF0ZUludHJvc3BlY3RvcihkYikge1xuICAgIHJldHVybiBuZXcgQnVuU3FsaXRlSW50cm9zcGVjdG9yKGRiKTtcbiAgfVxufVxuXG5leHBvcnQgeyBCdW5TcWxpdGVBZGFwdGVyLCBCdW5TcWxpdGVEaWFsZWN0LCBCdW5TcWxpdGVEcml2ZXIsIEJ1blNxbGl0ZUludHJvc3BlY3RvciwgQnVuU3FsaXRlUXVlcnlDb21waWxlciB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/cookies/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/better-auth/dist/cookies/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCookieGetter: () => (/* binding */ createCookieGetter),\n/* harmony export */   deleteSessionCookie: () => (/* binding */ deleteSessionCookie),\n/* harmony export */   getCookieCache: () => (/* binding */ getCookieCache),\n/* harmony export */   getCookies: () => (/* binding */ getCookies),\n/* harmony export */   getSessionCookie: () => (/* binding */ getSessionCookie),\n/* harmony export */   parseCookies: () => (/* binding */ parseCookies),\n/* harmony export */   parseSetCookieHeader: () => (/* binding */ parseSetCookieHeader),\n/* harmony export */   setCookieCache: () => (/* binding */ setCookieCache),\n/* harmony export */   setCookieToHeader: () => (/* binding */ setCookieToHeader),\n/* harmony export */   setSessionCookie: () => (/* binding */ setSessionCookie)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/better-auth.tB5eU6EY.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/better-auth.VTXNLFMT.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n\n\n\n\n\n\n\n\n\nconst createTime = (value, format) => {\n  const toMilliseconds = () => {\n    switch (format) {\n      case \"ms\":\n        return value;\n      case \"s\":\n        return value * 1e3;\n      case \"m\":\n        return value * 1e3 * 60;\n      case \"h\":\n        return value * 1e3 * 60 * 60;\n      case \"d\":\n        return value * 1e3 * 60 * 60 * 24;\n      case \"w\":\n        return value * 1e3 * 60 * 60 * 24 * 7;\n      case \"y\":\n        return value * 1e3 * 60 * 60 * 24 * 365;\n    }\n  };\n  const time = {\n    t: `${value}${format}`,\n    value,\n    tFormat: format,\n    toMilliseconds,\n    toSeconds: () => time.toMilliseconds() / 1e3,\n    toMinutes: () => time.toSeconds() / 60,\n    toHours: () => time.toMinutes() / 60,\n    toDays: () => time.toHours() / 24,\n    toWeeks: () => time.toDays() / 7,\n    toYears: () => time.toDays() / 365,\n    getDate: () => new Date(Date.now() + time.toMilliseconds()),\n    add: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return createTime(time.toMilliseconds() + otherMs, \"ms\");\n    },\n    subtract: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return createTime(time.toMilliseconds() - otherMs, \"ms\");\n    },\n    multiply: (factor) => createTime(time.toMilliseconds() * factor, \"ms\"),\n    divide: (divisor) => createTime(time.toMilliseconds() / divisor, \"ms\"),\n    equals: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return time.toMilliseconds() === otherMs;\n    },\n    lessThan: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return time.toMilliseconds() < otherMs;\n    },\n    greaterThan: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return time.toMilliseconds() > otherMs;\n    },\n    format: (pattern) => {\n      const date = time.getDate();\n      return pattern.replace(/YYYY|MM|DD|HH|mm|ss/g, (match) => {\n        switch (match) {\n          case \"YYYY\":\n            return date.getFullYear().toString();\n          case \"MM\":\n            return (date.getMonth() + 1).toString().padStart(2, \"0\");\n          case \"DD\":\n            return date.getDate().toString().padStart(2, \"0\");\n          case \"HH\":\n            return date.getHours().toString().padStart(2, \"0\");\n          case \"mm\":\n            return date.getMinutes().toString().padStart(2, \"0\");\n          case \"ss\":\n            return date.getSeconds().toString().padStart(2, \"0\");\n          default:\n            return match;\n        }\n      });\n    },\n    fromNow: () => {\n      const ms = time.toMilliseconds();\n      if (ms < 0) return time.ago();\n      if (ms < 1e3) return \"in a few seconds\";\n      if (ms < 6e4) return `in ${Math.round(ms / 1e3)} seconds`;\n      if (ms < 36e5) return `in ${Math.round(ms / 6e4)} minutes`;\n      if (ms < 864e5) return `in ${Math.round(ms / 36e5)} hours`;\n      if (ms < 6048e5) return `in ${Math.round(ms / 864e5)} days`;\n      if (ms < 26298e5) return `in ${Math.round(ms / 6048e5)} weeks`;\n      if (ms < 315576e5) return `in ${Math.round(ms / 26298e5)} months`;\n      return `in ${Math.round(ms / 315576e5)} years`;\n    },\n    ago: () => {\n      const ms = -time.toMilliseconds();\n      if (ms < 0) return time.fromNow();\n      if (ms < 1e3) return \"a few seconds ago\";\n      if (ms < 6e4) return `${Math.round(ms / 1e3)} seconds ago`;\n      if (ms < 36e5) return `${Math.round(ms / 6e4)} minutes ago`;\n      if (ms < 864e5) return `${Math.round(ms / 36e5)} hours ago`;\n      if (ms < 6048e5) return `${Math.round(ms / 864e5)} days ago`;\n      if (ms < 26298e5) return `${Math.round(ms / 6048e5)} weeks ago`;\n      if (ms < 315576e5) return `${Math.round(ms / 26298e5)} months ago`;\n      return `${Math.round(ms / 315576e5)} years ago`;\n    }\n  };\n  return time;\n};\nconst parseTime = (time) => {\n  const match = time.match(/^(\\d+)(ms|s|m|h|d|w|y)$/);\n  if (!match) throw new Error(\"Invalid time format\");\n  return createTime(parseInt(match[1]), match[2]);\n};\n\nfunction parseSetCookieHeader(setCookie) {\n  const cookies = /* @__PURE__ */ new Map();\n  const cookieArray = setCookie.split(\", \");\n  cookieArray.forEach((cookieString) => {\n    const parts = cookieString.split(\";\").map((part) => part.trim());\n    const [nameValue, ...attributes] = parts;\n    const [name, ...valueParts] = nameValue.split(\"=\");\n    const value = valueParts.join(\"=\");\n    if (!name || value === void 0) {\n      return;\n    }\n    const attrObj = { value };\n    attributes.forEach((attribute) => {\n      const [attrName, ...attrValueParts] = attribute.split(\"=\");\n      const attrValue = attrValueParts.join(\"=\");\n      const normalizedAttrName = attrName.trim().toLowerCase();\n      switch (normalizedAttrName) {\n        case \"max-age\":\n          attrObj[\"max-age\"] = attrValue ? parseInt(attrValue.trim(), 10) : void 0;\n          break;\n        case \"expires\":\n          attrObj.expires = attrValue ? new Date(attrValue.trim()) : void 0;\n          break;\n        case \"domain\":\n          attrObj.domain = attrValue ? attrValue.trim() : void 0;\n          break;\n        case \"path\":\n          attrObj.path = attrValue ? attrValue.trim() : void 0;\n          break;\n        case \"secure\":\n          attrObj.secure = true;\n          break;\n        case \"httponly\":\n          attrObj.httponly = true;\n          break;\n        case \"samesite\":\n          attrObj.samesite = attrValue ? attrValue.trim().toLowerCase() : void 0;\n          break;\n        default:\n          attrObj[normalizedAttrName] = attrValue ? attrValue.trim() : true;\n          break;\n      }\n    });\n    cookies.set(name, attrObj);\n  });\n  return cookies;\n}\nfunction setCookieToHeader(headers) {\n  return (context) => {\n    const setCookieHeader = context.response.headers.get(\"set-cookie\");\n    if (!setCookieHeader) {\n      return;\n    }\n    const cookieMap = /* @__PURE__ */ new Map();\n    const existingCookiesHeader = headers.get(\"cookie\") || \"\";\n    existingCookiesHeader.split(\";\").forEach((cookie) => {\n      const [name, ...rest] = cookie.trim().split(\"=\");\n      if (name && rest.length > 0) {\n        cookieMap.set(name, rest.join(\"=\"));\n      }\n    });\n    const setCookieHeaders = setCookieHeader.split(\",\");\n    setCookieHeaders.forEach((header) => {\n      const cookies = parseSetCookieHeader(header);\n      cookies.forEach((value, name) => {\n        cookieMap.set(name, value.value);\n      });\n    });\n    const updatedCookies = Array.from(cookieMap.entries()).map(([name, value]) => `${name}=${value}`).join(\"; \");\n    headers.set(\"cookie\", updatedCookies);\n  };\n}\n\nfunction createCookieGetter(options) {\n  const secure = options.advanced?.useSecureCookies !== void 0 ? options.advanced?.useSecureCookies : options.baseURL !== void 0 ? options.baseURL.startsWith(\"https://\") ? true : false : _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__.a;\n  const secureCookiePrefix = secure ? \"__Secure-\" : \"\";\n  const crossSubdomainEnabled = !!options.advanced?.crossSubDomainCookies?.enabled;\n  const domain = crossSubdomainEnabled ? options.advanced?.crossSubDomainCookies?.domain || (options.baseURL ? new URL(options.baseURL).hostname : void 0) : void 0;\n  if (crossSubdomainEnabled && !domain) {\n    throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n      \"baseURL is required when crossSubdomainCookies are enabled\"\n    );\n  }\n  function createCookie(cookieName, overrideAttributes = {}) {\n    const prefix = options.advanced?.cookiePrefix || \"better-auth\";\n    const name = options.advanced?.cookies?.[cookieName]?.name || `${prefix}.${cookieName}`;\n    const attributes = options.advanced?.cookies?.[cookieName]?.attributes;\n    return {\n      name: `${secureCookiePrefix}${name}`,\n      attributes: {\n        secure: !!secureCookiePrefix,\n        sameSite: \"lax\",\n        path: \"/\",\n        httpOnly: true,\n        ...crossSubdomainEnabled ? { domain } : {},\n        ...options.advanced?.defaultCookieAttributes,\n        ...overrideAttributes,\n        ...attributes\n      }\n    };\n  }\n  return createCookie;\n}\nfunction getCookies(options) {\n  const createCookie = createCookieGetter(options);\n  const sessionMaxAge = options.session?.expiresIn || createTime(7, \"d\").toSeconds();\n  const sessionToken = createCookie(\"session_token\", {\n    maxAge: sessionMaxAge\n  });\n  const sessionData = createCookie(\"session_data\", {\n    maxAge: options.session?.cookieCache?.maxAge || 60 * 5\n  });\n  const dontRememberToken = createCookie(\"dont_remember\");\n  return {\n    sessionToken: {\n      name: sessionToken.name,\n      options: sessionToken.attributes\n    },\n    /**\n     * This cookie is used to store the session data in the cookie\n     * This is useful for when you want to cache the session in the cookie\n     */\n    sessionData: {\n      name: sessionData.name,\n      options: sessionData.attributes\n    },\n    dontRememberToken: {\n      name: dontRememberToken.name,\n      options: dontRememberToken.attributes\n    }\n  };\n}\nasync function setCookieCache(ctx, session) {\n  const shouldStoreSessionDataInCookie = ctx.context.options.session?.cookieCache?.enabled;\n  if (shouldStoreSessionDataInCookie) {\n    const filteredSession = Object.entries(session.session).reduce(\n      (acc, [key, value]) => {\n        const fieldConfig = ctx.context.options.session?.additionalFields?.[key];\n        if (!fieldConfig || fieldConfig.returned !== false) {\n          acc[key] = value;\n        }\n        return acc;\n      },\n      {}\n    );\n    const sessionData = { session: filteredSession, user: session.user };\n    const data = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64Url.encode(\n      JSON.stringify({\n        session: sessionData,\n        expiresAt: (0,_shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(\n          ctx.context.authCookies.sessionData.options.maxAge || 60,\n          \"sec\"\n        ).getTime(),\n        signature: await (0,_better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__.createHMAC)(\"SHA-256\", \"base64urlnopad\").sign(\n          ctx.context.secret,\n          JSON.stringify({\n            ...sessionData,\n            expiresAt: (0,_shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(\n              ctx.context.authCookies.sessionData.options.maxAge || 60,\n              \"sec\"\n            ).getTime()\n          })\n        )\n      }),\n      {\n        padding: false\n      }\n    );\n    if (data.length > 4093) {\n      throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n        \"Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data\"\n      );\n    }\n    ctx.setCookie(\n      ctx.context.authCookies.sessionData.name,\n      data,\n      ctx.context.authCookies.sessionData.options\n    );\n  }\n}\nasync function setSessionCookie(ctx, session, dontRememberMe, overrides) {\n  const dontRememberMeCookie = await ctx.getSignedCookie(\n    ctx.context.authCookies.dontRememberToken.name,\n    ctx.context.secret\n  );\n  dontRememberMe = dontRememberMe !== void 0 ? dontRememberMe : !!dontRememberMeCookie;\n  const options = ctx.context.authCookies.sessionToken.options;\n  const maxAge = dontRememberMe ? void 0 : ctx.context.sessionConfig.expiresIn;\n  await ctx.setSignedCookie(\n    ctx.context.authCookies.sessionToken.name,\n    session.session.token,\n    ctx.context.secret,\n    {\n      ...options,\n      maxAge,\n      ...overrides\n    }\n  );\n  if (dontRememberMe) {\n    await ctx.setSignedCookie(\n      ctx.context.authCookies.dontRememberToken.name,\n      \"true\",\n      ctx.context.secret,\n      ctx.context.authCookies.dontRememberToken.options\n    );\n  }\n  await setCookieCache(ctx, session);\n  ctx.context.setNewSession(session);\n  if (ctx.context.options.secondaryStorage) {\n    await ctx.context.secondaryStorage?.set(\n      session.session.token,\n      JSON.stringify({\n        user: session.user,\n        session: session.session\n      }),\n      Math.floor(\n        (new Date(session.session.expiresAt).getTime() - Date.now()) / 1e3\n      )\n    );\n  }\n}\nfunction deleteSessionCookie(ctx, skipDontRememberMe) {\n  ctx.setCookie(ctx.context.authCookies.sessionToken.name, \"\", {\n    ...ctx.context.authCookies.sessionToken.options,\n    maxAge: 0\n  });\n  ctx.setCookie(ctx.context.authCookies.sessionData.name, \"\", {\n    ...ctx.context.authCookies.sessionData.options,\n    maxAge: 0\n  });\n  if (!skipDontRememberMe) {\n    ctx.setCookie(ctx.context.authCookies.dontRememberToken.name, \"\", {\n      ...ctx.context.authCookies.dontRememberToken.options,\n      maxAge: 0\n    });\n  }\n}\nfunction parseCookies(cookieHeader) {\n  const cookies = cookieHeader.split(\"; \");\n  const cookieMap = /* @__PURE__ */ new Map();\n  cookies.forEach((cookie) => {\n    const [name, value] = cookie.split(\"=\");\n    cookieMap.set(name, value);\n  });\n  return cookieMap;\n}\nconst getSessionCookie = (request, config) => {\n  if (config?.cookiePrefix) {\n    if (config.cookieName) {\n      config.cookiePrefix = `${config.cookiePrefix}-`;\n    } else {\n      config.cookiePrefix = `${config.cookiePrefix}.`;\n    }\n  }\n  const headers = \"headers\" in request ? request.headers : request;\n  const req = request instanceof Request ? request : void 0;\n  (0,_shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_6__.a)(req?.url, config?.path, req);\n  const cookies = headers.get(\"cookie\");\n  if (!cookies) {\n    return null;\n  }\n  const { cookieName = \"session_token\", cookiePrefix = \"better-auth.\" } = config || {};\n  const name = `${cookiePrefix}${cookieName}`;\n  const secureCookieName = `__Secure-${name}`;\n  const parsedCookie = parseCookies(cookies);\n  const sessionToken = parsedCookie.get(name) || parsedCookie.get(secureCookieName);\n  if (sessionToken) {\n    return sessionToken;\n  }\n  return null;\n};\nconst getCookieCache = async (request, config) => {\n  const headers = request instanceof Headers ? request : request.headers;\n  const cookies = headers.get(\"cookie\");\n  if (!cookies) {\n    return null;\n  }\n  const { cookieName = \"session_data\", cookiePrefix = \"better-auth\" } = config || {};\n  const name = config?.isSecure !== void 0 ? config.isSecure ? `__Secure-${cookiePrefix}.${cookieName}` : `${cookiePrefix}.${cookieName}` : _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__.a ? `__Secure-${cookiePrefix}.${cookieName}` : `${cookiePrefix}.${cookieName}`;\n  const parsedCookie = parseCookies(cookies);\n  const sessionData = parsedCookie.get(name);\n  if (sessionData) {\n    const sessionDataPayload = (0,_shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_5__.s)(_better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_7__.binary.decode(_better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64Url.decode(sessionData)));\n    if (!sessionDataPayload) {\n      return null;\n    }\n    const secret = config?.secret || _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__.e.BETTER_AUTH_SECRET;\n    if (!secret) {\n      throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n        \"getCookieCache requires a secret to be provided. Either pass it as an option or set the BETTER_AUTH_SECRET environment variable\"\n      );\n    }\n    const isValid = await (0,_better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__.createHMAC)(\"SHA-256\", \"base64urlnopad\").verify(\n      secret,\n      JSON.stringify({\n        ...sessionDataPayload.session,\n        expiresAt: sessionDataPayload.expiresAt\n      }),\n      sessionDataPayload.signature\n    );\n    if (!isValid) {\n      return null;\n    }\n    return sessionDataPayload.session;\n  }\n  return null;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/cookies/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/index.mjs":
/*!*************************************************!*\
  !*** ./node_modules/better-auth/dist/index.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BetterAuthError: () => (/* reexport safe */ _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_17__.B),\n/* harmony export */   HIDE_METADATA: () => (/* reexport safe */ _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_18__.H),\n/* harmony export */   MissingDependencyError: () => (/* reexport safe */ _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_17__.M),\n/* harmony export */   betterAuth: () => (/* binding */ betterAuth),\n/* harmony export */   capitalizeFirstLetter: () => (/* reexport safe */ _shared_better_auth_D_2CmEwz_mjs__WEBPACK_IMPORTED_MODULE_19__.c),\n/* harmony export */   createLogger: () => (/* reexport safe */ _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_7__.c),\n/* harmony export */   generateId: () => (/* reexport safe */ _shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_9__.g),\n/* harmony export */   generateState: () => (/* reexport safe */ _shared_better_auth_DPBqdYQ3_mjs__WEBPACK_IMPORTED_MODULE_20__.g),\n/* harmony export */   levels: () => (/* reexport safe */ _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_7__.a),\n/* harmony export */   logger: () => (/* reexport safe */ _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_7__.l),\n/* harmony export */   parseState: () => (/* reexport safe */ _shared_better_auth_DPBqdYQ3_mjs__WEBPACK_IMPORTED_MODULE_20__.p),\n/* harmony export */   shouldPublishLog: () => (/* reexport safe */ _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_7__.s)\n/* harmony export */ });\n/* harmony import */ var _api_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/api/index.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! defu */ \"(rsc)/./node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _shared_better_auth_OT3XFeFk_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/better-auth.OT3XFeFk.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.OT3XFeFk.mjs\");\n/* harmony import */ var _shared_better_auth_BGG5f0S_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared/better-auth.BGG5f0S_.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BGG5f0S_.mjs\");\n/* harmony import */ var _shared_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared/better-auth.DORkW_Ge.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _shared_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shared/better-auth.Cc72UxUH.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cookies/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./shared/better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n/* harmony import */ var _social_providers_index_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./social-providers/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/social-providers/index.mjs\");\n/* harmony import */ var _shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./shared/better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./shared/better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _shared_better_auth_YwDQhoPc_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./shared/better-auth.YwDQhoPc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs\");\n/* harmony import */ var _shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./shared/better-auth.VTXNLFMT.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./shared/better-auth.cM0Fc3LZ.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.cM0Fc3LZ.mjs\");\n/* harmony import */ var _shared_better_auth_D_2CmEwz_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./shared/better-auth.D-2CmEwz.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs\");\n/* harmony import */ var _shared_better_auth_DPBqdYQ3_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./shared/better-auth.DPBqdYQ3.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DPBqdYQ3.mjs\");\n/* harmony import */ var _shared_better_auth_iKoUsdFE_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./shared/better-auth.iKoUsdFE.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.iKoUsdFE.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./shared/better-auth.tB5eU6EY.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _shared_better_auth_C4F0dkzb_mjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./shared/better-auth.C4F0dkzb.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C4F0dkzb.mjs\");\n/* harmony import */ var _shared_better_auth_DFIAchwv_mjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./shared/better-auth.DFIAchwv.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DFIAchwv.mjs\");\n/* harmony import */ var _shared_better_auth_BCaUEQgP_mjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./shared/better-auth.BCaUEQgP.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BCaUEQgP.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./shared/better-auth.DufyW0qf.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DufyW0qf.mjs\");\n/* harmony import */ var _shared_better_auth_DDEbWX_S_mjs__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./shared/better-auth.DDEbWX-S.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DDEbWX-S.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst DEFAULT_SECRET = \"better-auth-secret-123456789\";\n\nconst init = async (options) => {\n  const adapter = await (0,_shared_better_auth_BGG5f0S_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(options);\n  const plugins = options.plugins || [];\n  const internalPlugins = getInternalPlugins(options);\n  const logger = (0,_shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_7__.c)(options.logger);\n  const baseURL = (0,_shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_16__.a)(options.baseURL, options.basePath);\n  const secret = options.secret || _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_14__.e.BETTER_AUTH_SECRET || _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_14__.e.AUTH_SECRET || DEFAULT_SECRET;\n  if (secret === DEFAULT_SECRET) {\n    if (_shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_14__.a) {\n      logger.error(\n        \"You are using the default secret. Please set `BETTER_AUTH_SECRET` in your environment variables or pass `secret` in your auth config.\"\n      );\n    }\n  }\n  options = {\n    ...options,\n    secret,\n    baseURL: baseURL ? new URL(baseURL).origin : \"\",\n    basePath: options.basePath || \"/api/auth\",\n    plugins: plugins.concat(internalPlugins)\n  };\n  const cookies = (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_6__.getCookies)(options);\n  const tables = (0,_shared_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(options);\n  const providers = Object.keys(options.socialProviders || {}).map((key) => {\n    const value = options.socialProviders?.[key];\n    if (!value || value.enabled === false) {\n      return null;\n    }\n    if (!value.clientId) {\n      logger.warn(\n        `Social provider ${key} is missing clientId or clientSecret`\n      );\n    }\n    const provider = _social_providers_index_mjs__WEBPACK_IMPORTED_MODULE_8__.socialProviders[key](\n      value\n      // TODO: fix this\n    );\n    provider.disableImplicitSignUp = value.disableImplicitSignUp;\n    return provider;\n  }).filter((x) => x !== null);\n  const generateIdFunc = ({ model, size }) => {\n    if (typeof options.advanced?.generateId === \"function\") {\n      return options.advanced.generateId({ model, size });\n    }\n    if (typeof options?.advanced?.database?.generateId === \"function\") {\n      return options.advanced.database.generateId({ model, size });\n    }\n    return (0,_shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_9__.g)(size);\n  };\n  const ctx = {\n    appName: options.appName || \"Better Auth\",\n    socialProviders: providers,\n    options,\n    tables,\n    trustedOrigins: getTrustedOrigins(options),\n    baseURL: baseURL || \"\",\n    sessionConfig: {\n      updateAge: options.session?.updateAge !== void 0 ? options.session.updateAge : 24 * 60 * 60,\n      // 24 hours\n      expiresIn: options.session?.expiresIn || 60 * 60 * 24 * 7,\n      // 7 days\n      freshAge: options.session?.freshAge === void 0 ? 60 * 60 * 24 : options.session.freshAge\n    },\n    secret,\n    rateLimit: {\n      ...options.rateLimit,\n      enabled: options.rateLimit?.enabled ?? _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_14__.a,\n      window: options.rateLimit?.window || 10,\n      max: options.rateLimit?.max || 100,\n      storage: options.rateLimit?.storage || (options.secondaryStorage ? \"secondary-storage\" : \"memory\")\n    },\n    authCookies: cookies,\n    logger,\n    generateId: generateIdFunc,\n    session: null,\n    secondaryStorage: options.secondaryStorage,\n    password: {\n      hash: options.emailAndPassword?.password?.hash || _shared_better_auth_OT3XFeFk_mjs__WEBPACK_IMPORTED_MODULE_2__.h,\n      verify: options.emailAndPassword?.password?.verify || _shared_better_auth_OT3XFeFk_mjs__WEBPACK_IMPORTED_MODULE_2__.v,\n      config: {\n        minPasswordLength: options.emailAndPassword?.minPasswordLength || 8,\n        maxPasswordLength: options.emailAndPassword?.maxPasswordLength || 128\n      },\n      checkPassword: _shared_better_auth_YwDQhoPc_mjs__WEBPACK_IMPORTED_MODULE_15__.c\n    },\n    setNewSession(session) {\n      this.newSession = session;\n    },\n    newSession: null,\n    adapter,\n    internalAdapter: (0,_shared_better_auth_BGG5f0S_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(adapter, {\n      options,\n      hooks: options.databaseHooks ? [options.databaseHooks] : []}),\n    createAuthCookie: (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_6__.createCookieGetter)(options),\n    async runMigrations() {\n      if (!options.database || \"updateMany\" in options.database) {\n        throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_17__.B(\n          \"Database is not provided or it's an adapter. Migrations are only supported with a database instance.\"\n        );\n      }\n      const { runMigrations } = await (0,_shared_better_auth_BGG5f0S_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(options);\n      await runMigrations();\n    }\n  };\n  let { context } = runPluginInit(ctx);\n  return context;\n};\nfunction runPluginInit(ctx) {\n  let options = ctx.options;\n  const plugins = options.plugins || [];\n  let context = ctx;\n  const dbHooks = [];\n  for (const plugin of plugins) {\n    if (plugin.init) {\n      const result = plugin.init(context);\n      if (typeof result === \"object\") {\n        if (result.options) {\n          const { databaseHooks, ...restOpts } = result.options;\n          if (databaseHooks) {\n            dbHooks.push(databaseHooks);\n          }\n          options = (0,defu__WEBPACK_IMPORTED_MODULE_1__.defu)(options, restOpts);\n        }\n        if (result.context) {\n          context = {\n            ...context,\n            ...result.context\n          };\n        }\n      }\n    }\n  }\n  dbHooks.push(options.databaseHooks);\n  context.internalAdapter = (0,_shared_better_auth_BGG5f0S_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(ctx.adapter, {\n    options,\n    hooks: dbHooks.filter((u) => u !== void 0),\n    generateId: ctx.generateId\n  });\n  context.options = options;\n  return { context };\n}\nfunction getInternalPlugins(options) {\n  const plugins = [];\n  if (options.advanced?.crossSubDomainCookies?.enabled) ;\n  return plugins;\n}\nfunction getTrustedOrigins(options) {\n  const baseURL = (0,_shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_16__.a)(options.baseURL, options.basePath);\n  if (!baseURL) {\n    return [];\n  }\n  const trustedOrigins = [new URL(baseURL).origin];\n  if (options.trustedOrigins && Array.isArray(options.trustedOrigins)) {\n    trustedOrigins.push(...options.trustedOrigins);\n  }\n  const envTrustedOrigins = _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_14__.e.BETTER_AUTH_TRUSTED_ORIGINS;\n  if (envTrustedOrigins) {\n    trustedOrigins.push(...envTrustedOrigins.split(\",\"));\n  }\n  if (trustedOrigins.filter((x) => !x).length) {\n    throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_17__.B(\n      \"A provided trusted origin is invalid, make sure your trusted origins list is properly defined.\"\n    );\n  }\n  return trustedOrigins;\n}\n\nconst betterAuth = (options) => {\n  const authContext = init(options);\n  const { api } = (0,_api_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getEndpoints)(authContext, options);\n  const errorCodes = options.plugins?.reduce((acc, plugin) => {\n    if (plugin.$ERROR_CODES) {\n      return {\n        ...acc,\n        ...plugin.$ERROR_CODES\n      };\n    }\n    return acc;\n  }, {});\n  return {\n    handler: async (request) => {\n      const ctx = await authContext;\n      const basePath = ctx.options.basePath || \"/api/auth\";\n      if (!ctx.options.baseURL) {\n        const baseURL = (0,_shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_16__.a)(void 0, basePath, request);\n        if (baseURL) {\n          ctx.baseURL = baseURL;\n          ctx.options.baseURL = (0,_shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_16__.g)(ctx.baseURL) || void 0;\n        } else {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_17__.B(\n            \"Could not get base URL from request. Please provide a valid base URL.\"\n          );\n        }\n      }\n      ctx.trustedOrigins = [\n        ...options.trustedOrigins ? Array.isArray(options.trustedOrigins) ? options.trustedOrigins : await options.trustedOrigins(request) : [],\n        ctx.options.baseURL\n      ];\n      const { handler } = (0,_api_index_mjs__WEBPACK_IMPORTED_MODULE_0__.router)(ctx, options);\n      return handler(request);\n    },\n    api,\n    options,\n    $context: authContext,\n    $Infer: {},\n    $ERROR_CODES: {\n      ...errorCodes,\n      ..._shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_18__.B\n    }\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/integrations/next-js.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/better-auth/dist/integrations/next-js.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   nextCookies: () => (/* binding */ nextCookies),\n/* harmony export */   toNextJsHandler: () => (/* binding */ toNextJsHandler)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../cookies/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/better-auth.cM0Fc3LZ.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.cM0Fc3LZ.mjs\");\n/* harmony import */ var _shared_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shared/better-auth.Cc72UxUH.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs\");\n/* harmony import */ var _shared_better_auth_xcRi_2W1_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../shared/better-auth.xcRi-2W1.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.xcRi-2W1.mjs\");\n/* harmony import */ var _plugins_organization_access_index_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../plugins/organization/access/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/plugins/organization/access/index.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../shared/better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! defu */ \"(rsc)/./node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_utils_otp__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @better-auth/utils/otp */ \"(rsc)/./node_modules/@better-auth/utils/dist/otp.mjs\");\n/* harmony import */ var _plugins_admin_access_index_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../plugins/admin/access/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/plugins/admin/access/index.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _shared_better_auth_fsvwNeUx_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../shared/better-auth.fsvwNeUx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.fsvwNeUx.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../shared/better-auth.tB5eU6EY.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../shared/better-auth.VTXNLFMT.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _shared_better_auth_DPBqdYQ3_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../shared/better-auth.DPBqdYQ3.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DPBqdYQ3.mjs\");\n/* harmony import */ var _social_providers_index_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../social-providers/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/social-providers/index.mjs\");\n/* harmony import */ var _shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../shared/better-auth.DufyW0qf.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DufyW0qf.mjs\");\n/* harmony import */ var _shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../shared/better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var _shared_better_auth_DDEbWX_S_mjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../shared/better-auth.DDEbWX-S.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DDEbWX-S.mjs\");\n/* harmony import */ var _shared_better_auth_ffWeg50w_mjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../shared/better-auth.ffWeg50w.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs\");\n/* harmony import */ var _shared_better_auth_OuYYTHC7_mjs__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../shared/better-auth.OuYYTHC7.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.OuYYTHC7.mjs\");\n/* harmony import */ var _plugins_access_index_mjs__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../plugins/access/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/plugins/access/index.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction toNextJsHandler(auth) {\n  const handler = async (request) => {\n    return \"handler\" in auth ? auth.handler(request) : auth(request);\n  };\n  return {\n    GET: handler,\n    POST: handler\n  };\n}\nconst nextCookies = () => {\n  return {\n    id: \"next-cookies\",\n    hooks: {\n      after: [\n        {\n          matcher(ctx) {\n            return true;\n          },\n          handler: (0,_shared_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_6__.c)(async (ctx) => {\n            const returned = ctx.context.responseHeaders;\n            if (\"_flag\" in ctx && ctx._flag === \"router\") {\n              return;\n            }\n            if (returned instanceof Headers) {\n              const setCookies = returned?.get(\"set-cookie\");\n              if (!setCookies) return;\n              const parsed = (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_4__.parseSetCookieHeader)(setCookies);\n              const { cookies } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/next\").then(__webpack_require__.bind(__webpack_require__, /*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\"));\n              const cookieHelper = await cookies();\n              parsed.forEach((value, key) => {\n                if (!key) return;\n                const opts = {\n                  sameSite: value.samesite,\n                  secure: value.secure,\n                  maxAge: value[\"max-age\"],\n                  httpOnly: value.httponly,\n                  domain: value.domain,\n                  path: value.path\n                };\n                try {\n                  cookieHelper.set(key, decodeURIComponent(value.value), opts);\n                } catch (e) {\n                }\n              });\n              return;\n            }\n          })\n        }\n      ]\n    }\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9pbnRlZ3JhdGlvbnMvbmV4dC1qcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNEM7QUFDVDtBQUNGO0FBQ0U7QUFDeUI7QUFDdkM7QUFDUjtBQUNrRTtBQUNuQztBQUNBO0FBQ007QUFDTjtBQUNBO0FBQzlCO0FBQ21CO0FBQ0Y7QUFDRDtBQUNJO0FBQ3BCO0FBQ2dCO0FBQ0Y7QUFDSTtBQUNIO0FBQ0c7QUFDVztBQUNkO0FBQ007QUFDUztBQUM1QjtBQUM0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0w7QUFDSztBQUNBO0FBQ0E7QUFDdkI7QUFDdUI7QUFDQTtBQUNQOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLG1CQUFtQixtRUFBb0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsd0VBQW9CO0FBQ2pELHNCQUFzQixVQUFVLFFBQVEsb0xBQXNCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFd0MiLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpbGltYXMvRG9jdW1lbnRzL0RhdmkvZXN0dWRvcy9yZWFjdC9iZXdlYXIvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3QvaW50ZWdyYXRpb25zL25leHQtanMubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi4vc2hhcmVkL2JldHRlci1hdXRoLjh6b3h6Zy1GLm1qcyc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9iYXNlNjQnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvaG1hYyc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9iaW5hcnknO1xuaW1wb3J0IHsgcGFyc2VTZXRDb29raWVIZWFkZXIgfSBmcm9tICcuLi9jb29raWVzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJ2JldHRlci1jYWxsJztcbmltcG9ydCAnem9kJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlQXV0aE1pZGRsZXdhcmUgfSBmcm9tICcuLi9zaGFyZWQvYmV0dGVyLWF1dGguY00wRmMzTFoubWpzJztcbmltcG9ydCAnLi4vc2hhcmVkL2JldHRlci1hdXRoLkNjNzJVeFVILm1qcyc7XG5pbXBvcnQgJy4uL3NoYXJlZC9iZXR0ZXItYXV0aC54Y1JpLTJXMS5tanMnO1xuaW1wb3J0ICcuLi9wbHVnaW5zL29yZ2FuaXphdGlvbi9hY2Nlc3MvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vc2hhcmVkL2JldHRlci1hdXRoLkI0UW94ZGdjLm1qcyc7XG5pbXBvcnQgJy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5DcXlrajgySi5tanMnO1xuaW1wb3J0ICdkZWZ1JztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL2hhc2gnO1xuaW1wb3J0ICdAbm9ibGUvY2lwaGVycy9jaGFjaGEnO1xuaW1wb3J0ICdAbm9ibGUvY2lwaGVycy91dGlscyc7XG5pbXBvcnQgJ0Bub2JsZS9jaXBoZXJzL3dlYmNyeXB0byc7XG5pbXBvcnQgJ2pvc2UnO1xuaW1wb3J0ICdAbm9ibGUvaGFzaGVzL3NjcnlwdCc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscyc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9oZXgnO1xuaW1wb3J0ICdAbm9ibGUvaGFzaGVzL3V0aWxzJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL290cCc7XG5pbXBvcnQgJy4uL3BsdWdpbnMvYWRtaW4vYWNjZXNzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJ0BiZXR0ZXItZmV0Y2gvZmV0Y2gnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvcmFuZG9tJztcbmltcG9ydCAnLi4vc2hhcmVkL2JldHRlci1hdXRoLmZzdndOZVV4Lm1qcyc7XG5pbXBvcnQgJ2t5c2VseSc7XG5pbXBvcnQgJy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5EZHpTSmYtbi5tanMnO1xuaW1wb3J0ICcuLi9zaGFyZWQvYmV0dGVyLWF1dGguQ1c2RDllU3gubWpzJztcbmltcG9ydCAnLi4vc2hhcmVkL2JldHRlci1hdXRoLnRCNWVVNkVZLm1qcyc7XG5pbXBvcnQgJy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5WVFhOTEZNVC5tanMnO1xuaW1wb3J0ICcuLi9zaGFyZWQvYmV0dGVyLWF1dGguRFBCcWRZUTMubWpzJztcbmltcG9ydCAnLi4vc29jaWFsLXByb3ZpZGVycy9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi9zaGFyZWQvYmV0dGVyLWF1dGguRHVmeVcwcWYubWpzJztcbmltcG9ydCAnLi4vc2hhcmVkL2JldHRlci1hdXRoLkJVUFBSWGZLLm1qcyc7XG5pbXBvcnQgJy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5EREViV1gtUy5tanMnO1xuaW1wb3J0ICdqb3NlL2Vycm9ycyc7XG5pbXBvcnQgJy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5mZldlZzUwdy5tanMnO1xuaW1wb3J0ICcuLi9zaGFyZWQvYmV0dGVyLWF1dGguT3VZWVRIQzcubWpzJztcbmltcG9ydCAnLi4vcGx1Z2lucy9hY2Nlc3MvaW5kZXgubWpzJztcblxuZnVuY3Rpb24gdG9OZXh0SnNIYW5kbGVyKGF1dGgpIHtcbiAgY29uc3QgaGFuZGxlciA9IGFzeW5jIChyZXF1ZXN0KSA9PiB7XG4gICAgcmV0dXJuIFwiaGFuZGxlclwiIGluIGF1dGggPyBhdXRoLmhhbmRsZXIocmVxdWVzdCkgOiBhdXRoKHJlcXVlc3QpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIEdFVDogaGFuZGxlcixcbiAgICBQT1NUOiBoYW5kbGVyXG4gIH07XG59XG5jb25zdCBuZXh0Q29va2llcyA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBpZDogXCJuZXh0LWNvb2tpZXNcIixcbiAgICBob29rczoge1xuICAgICAgYWZ0ZXI6IFtcbiAgICAgICAge1xuICAgICAgICAgIG1hdGNoZXIoY3R4KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhbmRsZXI6IGNyZWF0ZUF1dGhNaWRkbGV3YXJlKGFzeW5jIChjdHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJldHVybmVkID0gY3R4LmNvbnRleHQucmVzcG9uc2VIZWFkZXJzO1xuICAgICAgICAgICAgaWYgKFwiX2ZsYWdcIiBpbiBjdHggJiYgY3R4Ll9mbGFnID09PSBcInJvdXRlclwiKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXR1cm5lZCBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgY29uc3Qgc2V0Q29va2llcyA9IHJldHVybmVkPy5nZXQoXCJzZXQtY29va2llXCIpO1xuICAgICAgICAgICAgICBpZiAoIXNldENvb2tpZXMpIHJldHVybjtcbiAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2VTZXRDb29raWVIZWFkZXIoc2V0Q29va2llcyk7XG4gICAgICAgICAgICAgIGNvbnN0IHsgY29va2llcyB9ID0gYXdhaXQgaW1wb3J0KCduZXh0L2hlYWRlcnMnKTtcbiAgICAgICAgICAgICAgY29uc3QgY29va2llSGVscGVyID0gYXdhaXQgY29va2llcygpO1xuICAgICAgICAgICAgICBwYXJzZWQuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICgha2V5KSByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgICAgICAgIHNhbWVTaXRlOiB2YWx1ZS5zYW1lc2l0ZSxcbiAgICAgICAgICAgICAgICAgIHNlY3VyZTogdmFsdWUuc2VjdXJlLFxuICAgICAgICAgICAgICAgICAgbWF4QWdlOiB2YWx1ZVtcIm1heC1hZ2VcIl0sXG4gICAgICAgICAgICAgICAgICBodHRwT25seTogdmFsdWUuaHR0cG9ubHksXG4gICAgICAgICAgICAgICAgICBkb21haW46IHZhbHVlLmRvbWFpbixcbiAgICAgICAgICAgICAgICAgIHBhdGg6IHZhbHVlLnBhdGhcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBjb29raWVIZWxwZXIuc2V0KGtleSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlLnZhbHVlKSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0IHsgbmV4dENvb2tpZXMsIHRvTmV4dEpzSGFuZGxlciB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/integrations/next-js.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/plugins/access/index.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/better-auth/dist/plugins/access/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAccessControl: () => (/* binding */ createAccessControl),\n/* harmony export */   role: () => (/* binding */ role)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\nfunction role(statements) {\n  return {\n    authorize(request, connector = \"AND\") {\n      let success = false;\n      for (const [requestedResource, requestedActions] of Object.entries(\n        request\n      )) {\n        const allowedActions = statements[requestedResource];\n        if (!allowedActions) {\n          return {\n            success: false,\n            error: `You are not allowed to access resource: ${requestedResource}`\n          };\n        }\n        if (Array.isArray(requestedActions)) {\n          success = requestedActions.every(\n            (requestedAction) => allowedActions.includes(requestedAction)\n          );\n        } else {\n          if (typeof requestedActions === \"object\") {\n            const actions = requestedActions;\n            if (actions.connector === \"OR\") {\n              success = actions.actions.some(\n                (requestedAction) => allowedActions.includes(requestedAction)\n              );\n            } else {\n              success = actions.actions.every(\n                (requestedAction) => allowedActions.includes(requestedAction)\n              );\n            }\n          } else {\n            throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\"Invalid access control request\");\n          }\n        }\n        if (success && connector === \"OR\") {\n          return { success };\n        }\n        if (!success && connector === \"AND\") {\n          return {\n            success: false,\n            error: `unauthorized to access resource \"${requestedResource}\"`\n          };\n        }\n      }\n      if (success) {\n        return {\n          success\n        };\n      }\n      return {\n        success: false,\n        error: \"Not authorized\"\n      };\n    },\n    statements\n  };\n}\nfunction createAccessControl(s) {\n  return {\n    newRole(statements) {\n      return role(statements);\n    },\n    statements: s\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9wbHVnaW5zL2FjY2Vzcy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTZFOztBQUU3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELGtCQUFrQjtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLHNCQUFzQiwrREFBZTtBQUNyQztBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsa0JBQWtCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRXFDIiwic291cmNlcyI6WyIvVXNlcnMvZGF2aWxpbWFzL0RvY3VtZW50cy9EYXZpL2VzdHVkb3MvcmVhY3QvYmV3ZWFyL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3BsdWdpbnMvYWNjZXNzL2luZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCIGFzIEJldHRlckF1dGhFcnJvciB9IGZyb20gJy4uLy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5EZHpTSmYtbi5tanMnO1xuXG5mdW5jdGlvbiByb2xlKHN0YXRlbWVudHMpIHtcbiAgcmV0dXJuIHtcbiAgICBhdXRob3JpemUocmVxdWVzdCwgY29ubmVjdG9yID0gXCJBTkRcIikge1xuICAgICAgbGV0IHN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgIGZvciAoY29uc3QgW3JlcXVlc3RlZFJlc291cmNlLCByZXF1ZXN0ZWRBY3Rpb25zXSBvZiBPYmplY3QuZW50cmllcyhcbiAgICAgICAgcmVxdWVzdFxuICAgICAgKSkge1xuICAgICAgICBjb25zdCBhbGxvd2VkQWN0aW9ucyA9IHN0YXRlbWVudHNbcmVxdWVzdGVkUmVzb3VyY2VdO1xuICAgICAgICBpZiAoIWFsbG93ZWRBY3Rpb25zKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IGBZb3UgYXJlIG5vdCBhbGxvd2VkIHRvIGFjY2VzcyByZXNvdXJjZTogJHtyZXF1ZXN0ZWRSZXNvdXJjZX1gXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXF1ZXN0ZWRBY3Rpb25zKSkge1xuICAgICAgICAgIHN1Y2Nlc3MgPSByZXF1ZXN0ZWRBY3Rpb25zLmV2ZXJ5KFxuICAgICAgICAgICAgKHJlcXVlc3RlZEFjdGlvbikgPT4gYWxsb3dlZEFjdGlvbnMuaW5jbHVkZXMocmVxdWVzdGVkQWN0aW9uKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0ZWRBY3Rpb25zID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb25zID0gcmVxdWVzdGVkQWN0aW9ucztcbiAgICAgICAgICAgIGlmIChhY3Rpb25zLmNvbm5lY3RvciA9PT0gXCJPUlwiKSB7XG4gICAgICAgICAgICAgIHN1Y2Nlc3MgPSBhY3Rpb25zLmFjdGlvbnMuc29tZShcbiAgICAgICAgICAgICAgICAocmVxdWVzdGVkQWN0aW9uKSA9PiBhbGxvd2VkQWN0aW9ucy5pbmNsdWRlcyhyZXF1ZXN0ZWRBY3Rpb24pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdWNjZXNzID0gYWN0aW9ucy5hY3Rpb25zLmV2ZXJ5KFxuICAgICAgICAgICAgICAgIChyZXF1ZXN0ZWRBY3Rpb24pID0+IGFsbG93ZWRBY3Rpb25zLmluY2x1ZGVzKHJlcXVlc3RlZEFjdGlvbilcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEJldHRlckF1dGhFcnJvcihcIkludmFsaWQgYWNjZXNzIGNvbnRyb2wgcmVxdWVzdFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1Y2Nlc3MgJiYgY29ubmVjdG9yID09PSBcIk9SXCIpIHtcbiAgICAgICAgICByZXR1cm4geyBzdWNjZXNzIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdWNjZXNzICYmIGNvbm5lY3RvciA9PT0gXCJBTkRcIikge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yOiBgdW5hdXRob3JpemVkIHRvIGFjY2VzcyByZXNvdXJjZSBcIiR7cmVxdWVzdGVkUmVzb3VyY2V9XCJgXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdWNjZXNzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IFwiTm90IGF1dGhvcml6ZWRcIlxuICAgICAgfTtcbiAgICB9LFxuICAgIHN0YXRlbWVudHNcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUFjY2Vzc0NvbnRyb2wocykge1xuICByZXR1cm4ge1xuICAgIG5ld1JvbGUoc3RhdGVtZW50cykge1xuICAgICAgcmV0dXJuIHJvbGUoc3RhdGVtZW50cyk7XG4gICAgfSxcbiAgICBzdGF0ZW1lbnRzOiBzXG4gIH07XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUFjY2Vzc0NvbnRyb2wsIHJvbGUgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/plugins/access/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/plugins/admin/access/index.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/better-auth/dist/plugins/admin/access/index.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminAc: () => (/* binding */ adminAc),\n/* harmony export */   defaultAc: () => (/* binding */ defaultAc),\n/* harmony export */   defaultRoles: () => (/* binding */ defaultRoles),\n/* harmony export */   defaultStatements: () => (/* binding */ defaultStatements),\n/* harmony export */   userAc: () => (/* binding */ userAc)\n/* harmony export */ });\n/* harmony import */ var _access_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../access/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/plugins/access/index.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\nconst defaultStatements = {\n  user: [\n    \"create\",\n    \"list\",\n    \"set-role\",\n    \"ban\",\n    \"impersonate\",\n    \"delete\",\n    \"set-password\"\n  ],\n  session: [\"list\", \"revoke\", \"delete\"]\n};\nconst defaultAc = (0,_access_index_mjs__WEBPACK_IMPORTED_MODULE_0__.createAccessControl)(defaultStatements);\nconst adminAc = defaultAc.newRole({\n  user: [\n    \"create\",\n    \"list\",\n    \"set-role\",\n    \"ban\",\n    \"impersonate\",\n    \"delete\",\n    \"set-password\"\n  ],\n  session: [\"list\", \"revoke\", \"delete\"]\n});\nconst userAc = defaultAc.newRole({\n  user: [],\n  session: []\n});\nconst defaultRoles = {\n  admin: adminAc,\n  user: userAc\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9wbHVnaW5zL2FkbWluL2FjY2Vzcy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE2RDtBQUNYOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isc0VBQW1CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUV1RSIsInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlsaW1hcy9Eb2N1bWVudHMvRGF2aS9lc3R1ZG9zL3JlYWN0L2Jld2Vhci9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9wbHVnaW5zL2FkbWluL2FjY2Vzcy9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQWNjZXNzQ29udHJvbCB9IGZyb20gJy4uLy4uL2FjY2Vzcy9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzJztcblxuY29uc3QgZGVmYXVsdFN0YXRlbWVudHMgPSB7XG4gIHVzZXI6IFtcbiAgICBcImNyZWF0ZVwiLFxuICAgIFwibGlzdFwiLFxuICAgIFwic2V0LXJvbGVcIixcbiAgICBcImJhblwiLFxuICAgIFwiaW1wZXJzb25hdGVcIixcbiAgICBcImRlbGV0ZVwiLFxuICAgIFwic2V0LXBhc3N3b3JkXCJcbiAgXSxcbiAgc2Vzc2lvbjogW1wibGlzdFwiLCBcInJldm9rZVwiLCBcImRlbGV0ZVwiXVxufTtcbmNvbnN0IGRlZmF1bHRBYyA9IGNyZWF0ZUFjY2Vzc0NvbnRyb2woZGVmYXVsdFN0YXRlbWVudHMpO1xuY29uc3QgYWRtaW5BYyA9IGRlZmF1bHRBYy5uZXdSb2xlKHtcbiAgdXNlcjogW1xuICAgIFwiY3JlYXRlXCIsXG4gICAgXCJsaXN0XCIsXG4gICAgXCJzZXQtcm9sZVwiLFxuICAgIFwiYmFuXCIsXG4gICAgXCJpbXBlcnNvbmF0ZVwiLFxuICAgIFwiZGVsZXRlXCIsXG4gICAgXCJzZXQtcGFzc3dvcmRcIlxuICBdLFxuICBzZXNzaW9uOiBbXCJsaXN0XCIsIFwicmV2b2tlXCIsIFwiZGVsZXRlXCJdXG59KTtcbmNvbnN0IHVzZXJBYyA9IGRlZmF1bHRBYy5uZXdSb2xlKHtcbiAgdXNlcjogW10sXG4gIHNlc3Npb246IFtdXG59KTtcbmNvbnN0IGRlZmF1bHRSb2xlcyA9IHtcbiAgYWRtaW46IGFkbWluQWMsXG4gIHVzZXI6IHVzZXJBY1xufTtcblxuZXhwb3J0IHsgYWRtaW5BYywgZGVmYXVsdEFjLCBkZWZhdWx0Um9sZXMsIGRlZmF1bHRTdGF0ZW1lbnRzLCB1c2VyQWMgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/plugins/admin/access/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/plugins/organization/access/index.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/better-auth/dist/plugins/organization/access/index.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminAc: () => (/* binding */ adminAc),\n/* harmony export */   defaultAc: () => (/* binding */ defaultAc),\n/* harmony export */   defaultRoles: () => (/* binding */ defaultRoles),\n/* harmony export */   defaultStatements: () => (/* binding */ defaultStatements),\n/* harmony export */   memberAc: () => (/* binding */ memberAc),\n/* harmony export */   ownerAc: () => (/* binding */ ownerAc)\n/* harmony export */ });\n/* harmony import */ var _access_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../access/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/plugins/access/index.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\nconst defaultStatements = {\n  organization: [\"update\", \"delete\"],\n  member: [\"create\", \"update\", \"delete\"],\n  invitation: [\"create\", \"cancel\"],\n  team: [\"create\", \"update\", \"delete\"]\n};\nconst defaultAc = (0,_access_index_mjs__WEBPACK_IMPORTED_MODULE_0__.createAccessControl)(defaultStatements);\nconst adminAc = defaultAc.newRole({\n  organization: [\"update\"],\n  invitation: [\"create\", \"cancel\"],\n  member: [\"create\", \"update\", \"delete\"],\n  team: [\"create\", \"update\", \"delete\"]\n});\nconst ownerAc = defaultAc.newRole({\n  organization: [\"update\", \"delete\"],\n  member: [\"create\", \"update\", \"delete\"],\n  invitation: [\"create\", \"cancel\"],\n  team: [\"create\", \"update\", \"delete\"]\n});\nconst memberAc = defaultAc.newRole({\n  organization: [],\n  member: [],\n  invitation: [],\n  team: []\n});\nconst defaultRoles = {\n  admin: adminAc,\n  owner: ownerAc,\n  member: memberAc\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9wbHVnaW5zL29yZ2FuaXphdGlvbi9hY2Nlc3MvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTZEO0FBQ1g7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixzRUFBbUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFa0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpbGltYXMvRG9jdW1lbnRzL0RhdmkvZXN0dWRvcy9yZWFjdC9iZXdlYXIvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3QvcGx1Z2lucy9vcmdhbml6YXRpb24vYWNjZXNzL2luZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVBY2Nlc3NDb250cm9sIH0gZnJvbSAnLi4vLi4vYWNjZXNzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5EZHpTSmYtbi5tanMnO1xuXG5jb25zdCBkZWZhdWx0U3RhdGVtZW50cyA9IHtcbiAgb3JnYW5pemF0aW9uOiBbXCJ1cGRhdGVcIiwgXCJkZWxldGVcIl0sXG4gIG1lbWJlcjogW1wiY3JlYXRlXCIsIFwidXBkYXRlXCIsIFwiZGVsZXRlXCJdLFxuICBpbnZpdGF0aW9uOiBbXCJjcmVhdGVcIiwgXCJjYW5jZWxcIl0sXG4gIHRlYW06IFtcImNyZWF0ZVwiLCBcInVwZGF0ZVwiLCBcImRlbGV0ZVwiXVxufTtcbmNvbnN0IGRlZmF1bHRBYyA9IGNyZWF0ZUFjY2Vzc0NvbnRyb2woZGVmYXVsdFN0YXRlbWVudHMpO1xuY29uc3QgYWRtaW5BYyA9IGRlZmF1bHRBYy5uZXdSb2xlKHtcbiAgb3JnYW5pemF0aW9uOiBbXCJ1cGRhdGVcIl0sXG4gIGludml0YXRpb246IFtcImNyZWF0ZVwiLCBcImNhbmNlbFwiXSxcbiAgbWVtYmVyOiBbXCJjcmVhdGVcIiwgXCJ1cGRhdGVcIiwgXCJkZWxldGVcIl0sXG4gIHRlYW06IFtcImNyZWF0ZVwiLCBcInVwZGF0ZVwiLCBcImRlbGV0ZVwiXVxufSk7XG5jb25zdCBvd25lckFjID0gZGVmYXVsdEFjLm5ld1JvbGUoe1xuICBvcmdhbml6YXRpb246IFtcInVwZGF0ZVwiLCBcImRlbGV0ZVwiXSxcbiAgbWVtYmVyOiBbXCJjcmVhdGVcIiwgXCJ1cGRhdGVcIiwgXCJkZWxldGVcIl0sXG4gIGludml0YXRpb246IFtcImNyZWF0ZVwiLCBcImNhbmNlbFwiXSxcbiAgdGVhbTogW1wiY3JlYXRlXCIsIFwidXBkYXRlXCIsIFwiZGVsZXRlXCJdXG59KTtcbmNvbnN0IG1lbWJlckFjID0gZGVmYXVsdEFjLm5ld1JvbGUoe1xuICBvcmdhbml6YXRpb246IFtdLFxuICBtZW1iZXI6IFtdLFxuICBpbnZpdGF0aW9uOiBbXSxcbiAgdGVhbTogW11cbn0pO1xuY29uc3QgZGVmYXVsdFJvbGVzID0ge1xuICBhZG1pbjogYWRtaW5BYyxcbiAgb3duZXI6IG93bmVyQWMsXG4gIG1lbWJlcjogbWVtYmVyQWNcbn07XG5cbmV4cG9ydCB7IGFkbWluQWMsIGRlZmF1bHRBYywgZGVmYXVsdFJvbGVzLCBkZWZhdWx0U3RhdGVtZW50cywgbWVtYmVyQWMsIG93bmVyQWMgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/plugins/organization/access/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ isProduction),\n/* harmony export */   b: () => (/* binding */ isDevelopment),\n/* harmony export */   e: () => (/* binding */ env),\n/* harmony export */   i: () => (/* binding */ isTest)\n/* harmony export */ });\nconst _envShim = /* @__PURE__ */ Object.create(null);\nconst _getEnv = (useShim) => globalThis.process?.env || //@ts-expect-error\nglobalThis.Deno?.env.toObject() || //@ts-expect-error\nglobalThis.__env__ || (useShim ? _envShim : globalThis);\nconst env = new Proxy(_envShim, {\n  get(_, prop) {\n    const env2 = _getEnv();\n    return env2[prop] ?? _envShim[prop];\n  },\n  has(_, prop) {\n    const env2 = _getEnv();\n    return prop in env2 || prop in _envShim;\n  },\n  set(_, prop, value) {\n    const env2 = _getEnv(true);\n    env2[prop] = value;\n    return true;\n  },\n  deleteProperty(_, prop) {\n    if (!prop) {\n      return false;\n    }\n    const env2 = _getEnv(true);\n    delete env2[prop];\n    return true;\n  },\n  ownKeys() {\n    const env2 = _getEnv(true);\n    return Object.keys(env2);\n  }\n});\nfunction toBoolean(val) {\n  return val ? val !== \"false\" : false;\n}\nconst nodeENV = typeof process !== \"undefined\" && process.env && \"development\" || \"\";\nconst isProduction = nodeENV === \"production\";\nconst isDevelopment = nodeENV === \"dev\" || nodeENV === \"development\";\nconst isTest = nodeENV === \"test\" || toBoolean(env.TEST);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguOHpveHpnLUYubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsYUFBb0I7QUFDckY7QUFDQTtBQUNBOztBQUV3RSIsInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlsaW1hcy9Eb2N1bWVudHMvRGF2aS9lc3R1ZG9zL3JlYWN0L2Jld2Vhci9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguOHpveHpnLUYubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF9lbnZTaGltID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG5jb25zdCBfZ2V0RW52ID0gKHVzZVNoaW0pID0+IGdsb2JhbFRoaXMucHJvY2Vzcz8uZW52IHx8IC8vQHRzLWV4cGVjdC1lcnJvclxuZ2xvYmFsVGhpcy5EZW5vPy5lbnYudG9PYmplY3QoKSB8fCAvL0B0cy1leHBlY3QtZXJyb3Jcbmdsb2JhbFRoaXMuX19lbnZfXyB8fCAodXNlU2hpbSA/IF9lbnZTaGltIDogZ2xvYmFsVGhpcyk7XG5jb25zdCBlbnYgPSBuZXcgUHJveHkoX2VudlNoaW0sIHtcbiAgZ2V0KF8sIHByb3ApIHtcbiAgICBjb25zdCBlbnYyID0gX2dldEVudigpO1xuICAgIHJldHVybiBlbnYyW3Byb3BdID8/IF9lbnZTaGltW3Byb3BdO1xuICB9LFxuICBoYXMoXywgcHJvcCkge1xuICAgIGNvbnN0IGVudjIgPSBfZ2V0RW52KCk7XG4gICAgcmV0dXJuIHByb3AgaW4gZW52MiB8fCBwcm9wIGluIF9lbnZTaGltO1xuICB9LFxuICBzZXQoXywgcHJvcCwgdmFsdWUpIHtcbiAgICBjb25zdCBlbnYyID0gX2dldEVudih0cnVlKTtcbiAgICBlbnYyW3Byb3BdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGRlbGV0ZVByb3BlcnR5KF8sIHByb3ApIHtcbiAgICBpZiAoIXByb3ApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZW52MiA9IF9nZXRFbnYodHJ1ZSk7XG4gICAgZGVsZXRlIGVudjJbcHJvcF07XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIG93bktleXMoKSB7XG4gICAgY29uc3QgZW52MiA9IF9nZXRFbnYodHJ1ZSk7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGVudjIpO1xuICB9XG59KTtcbmZ1bmN0aW9uIHRvQm9vbGVhbih2YWwpIHtcbiAgcmV0dXJuIHZhbCA/IHZhbCAhPT0gXCJmYWxzZVwiIDogZmFsc2U7XG59XG5jb25zdCBub2RlRU5WID0gdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgXCJcIjtcbmNvbnN0IGlzUHJvZHVjdGlvbiA9IG5vZGVFTlYgPT09IFwicHJvZHVjdGlvblwiO1xuY29uc3QgaXNEZXZlbG9wbWVudCA9IG5vZGVFTlYgPT09IFwiZGV2XCIgfHwgbm9kZUVOViA9PT0gXCJkZXZlbG9wbWVudFwiO1xuY29uc3QgaXNUZXN0ID0gbm9kZUVOViA9PT0gXCJ0ZXN0XCIgfHwgdG9Cb29sZWFuKGVudi5URVNUKTtcblxuZXhwb3J0IHsgaXNQcm9kdWN0aW9uIGFzIGEsIGlzRGV2ZWxvcG1lbnQgYXMgYiwgZW52IGFzIGUsIGlzVGVzdCBhcyBpIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ generateRandomString)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n\n\nconst generateRandomString = (0,_better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__.createRandomStringGenerator)(\n  \"a-z\",\n  \"0-9\",\n  \"A-Z\",\n  \"-_\"\n);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQjRRb3hkZ2MubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdFOztBQUV4RSw2QkFBNkIsc0ZBQTJCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXFDIiwic291cmNlcyI6WyIvVXNlcnMvZGF2aWxpbWFzL0RvY3VtZW50cy9EYXZpL2VzdHVkb3MvcmVhY3QvYmV3ZWFyL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5CNFFveGRnYy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlUmFuZG9tU3RyaW5nR2VuZXJhdG9yIH0gZnJvbSAnQGJldHRlci1hdXRoL3V0aWxzL3JhbmRvbSc7XG5cbmNvbnN0IGdlbmVyYXRlUmFuZG9tU3RyaW5nID0gY3JlYXRlUmFuZG9tU3RyaW5nR2VuZXJhdG9yKFxuICBcImEtelwiLFxuICBcIjAtOVwiLFxuICBcIkEtWlwiLFxuICBcIi1fXCJcbik7XG5cbmV4cG9ydCB7IGdlbmVyYXRlUmFuZG9tU3RyaW5nIGFzIGcgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.BCaUEQgP.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.BCaUEQgP.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   m: () => (/* binding */ memoryAdapter)\n/* harmony export */ });\n/* harmony import */ var _better_auth_DFIAchwv_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.DFIAchwv.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DFIAchwv.mjs\");\n\n\nconst memoryAdapter = (db, config) => (0,_better_auth_DFIAchwv_mjs__WEBPACK_IMPORTED_MODULE_0__.c)({\n  config: {\n    adapterId: \"memory\",\n    adapterName: \"Memory Adapter\",\n    usePlural: false,\n    debugLogs: config?.debugLogs || false,\n    customTransformInput(props) {\n      if (props.options.advanced?.database?.useNumberId && props.field === \"id\" && props.action === \"create\") {\n        return db[props.model].length + 1;\n      }\n      return props.data;\n    }\n  },\n  adapter: ({ getFieldName, options }) => {\n    function convertWhereClause(where, table) {\n      return table.filter((record) => {\n        return where.every((clause) => {\n          let { field, value, operator } = clause;\n          if (operator === \"in\") {\n            if (!Array.isArray(value)) {\n              throw new Error(\"Value must be an array\");\n            }\n            return value.includes(record[field]);\n          } else if (operator === \"contains\") {\n            return record[field].includes(value);\n          } else if (operator === \"starts_with\") {\n            return record[field].startsWith(value);\n          } else if (operator === \"ends_with\") {\n            return record[field].endsWith(value);\n          } else {\n            return record[field] === value;\n          }\n        });\n      });\n    }\n    return {\n      create: async ({ model, data }) => {\n        if (options.advanced?.database?.useNumberId) {\n          data.id = db[model].length + 1;\n        }\n        db[model].push(data);\n        return data;\n      },\n      findOne: async ({ model, where }) => {\n        const table = db[model];\n        const res = convertWhereClause(where, table);\n        const record = res[0] || null;\n        return record;\n      },\n      findMany: async ({ model, where, sortBy, limit, offset }) => {\n        let table = db[model];\n        if (where) {\n          table = convertWhereClause(where, table);\n        }\n        if (sortBy) {\n          table = table.sort((a, b) => {\n            const field = getFieldName({ model, field: sortBy.field });\n            if (sortBy.direction === \"asc\") {\n              return a[field] > b[field] ? 1 : -1;\n            } else {\n              return a[field] < b[field] ? 1 : -1;\n            }\n          });\n        }\n        if (offset !== void 0) {\n          table = table.slice(offset);\n        }\n        if (limit !== void 0) {\n          table = table.slice(0, limit);\n        }\n        return table;\n      },\n      count: async ({ model }) => {\n        return db[model].length;\n      },\n      update: async ({ model, where, update }) => {\n        const table = db[model];\n        const res = convertWhereClause(where, table);\n        res.forEach((record) => {\n          Object.assign(record, update);\n        });\n        return res[0] || null;\n      },\n      delete: async ({ model, where }) => {\n        const table = db[model];\n        const res = convertWhereClause(where, table);\n        db[model] = table.filter((record) => !res.includes(record));\n      },\n      deleteMany: async ({ model, where }) => {\n        const table = db[model];\n        const res = convertWhereClause(where, table);\n        let count = 0;\n        db[model] = table.filter((record) => {\n          if (res.includes(record)) {\n            count++;\n            return false;\n          }\n          return !res.includes(record);\n        });\n        return count;\n      },\n      updateMany({ model, where, update }) {\n        const table = db[model];\n        const res = convertWhereClause(where, table);\n        res.forEach((record) => {\n          Object.assign(record, update);\n        });\n        return res[0] || null;\n      }\n    };\n  }\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQkNhVUVRZ1AubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWdFOztBQUVoRSxzQ0FBc0MsNERBQWE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxjQUFjLHVCQUF1QjtBQUNyQztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUJBQXlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBLHVCQUF1QixhQUFhO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1Asd0JBQXdCLGNBQWM7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AseUJBQXlCLHFDQUFxQztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsNEJBQTRCO0FBQ3JFO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLHNCQUFzQixPQUFPO0FBQzdCO0FBQ0EsT0FBTztBQUNQLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsdUJBQXVCLGNBQWM7QUFDckM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLDJCQUEyQixjQUFjO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUCxtQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFNkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpbGltYXMvRG9jdW1lbnRzL0RhdmkvZXN0dWRvcy9yZWFjdC9iZXdlYXIvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkJDYVVFUWdQLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjIGFzIGNyZWF0ZUFkYXB0ZXIgfSBmcm9tICcuL2JldHRlci1hdXRoLkRGSUFjaHd2Lm1qcyc7XG5cbmNvbnN0IG1lbW9yeUFkYXB0ZXIgPSAoZGIsIGNvbmZpZykgPT4gY3JlYXRlQWRhcHRlcih7XG4gIGNvbmZpZzoge1xuICAgIGFkYXB0ZXJJZDogXCJtZW1vcnlcIixcbiAgICBhZGFwdGVyTmFtZTogXCJNZW1vcnkgQWRhcHRlclwiLFxuICAgIHVzZVBsdXJhbDogZmFsc2UsXG4gICAgZGVidWdMb2dzOiBjb25maWc/LmRlYnVnTG9ncyB8fCBmYWxzZSxcbiAgICBjdXN0b21UcmFuc2Zvcm1JbnB1dChwcm9wcykge1xuICAgICAgaWYgKHByb3BzLm9wdGlvbnMuYWR2YW5jZWQ/LmRhdGFiYXNlPy51c2VOdW1iZXJJZCAmJiBwcm9wcy5maWVsZCA9PT0gXCJpZFwiICYmIHByb3BzLmFjdGlvbiA9PT0gXCJjcmVhdGVcIikge1xuICAgICAgICByZXR1cm4gZGJbcHJvcHMubW9kZWxdLmxlbmd0aCArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcHMuZGF0YTtcbiAgICB9XG4gIH0sXG4gIGFkYXB0ZXI6ICh7IGdldEZpZWxkTmFtZSwgb3B0aW9ucyB9KSA9PiB7XG4gICAgZnVuY3Rpb24gY29udmVydFdoZXJlQ2xhdXNlKHdoZXJlLCB0YWJsZSkge1xuICAgICAgcmV0dXJuIHRhYmxlLmZpbHRlcigocmVjb3JkKSA9PiB7XG4gICAgICAgIHJldHVybiB3aGVyZS5ldmVyeSgoY2xhdXNlKSA9PiB7XG4gICAgICAgICAgbGV0IHsgZmllbGQsIHZhbHVlLCBvcGVyYXRvciB9ID0gY2xhdXNlO1xuICAgICAgICAgIGlmIChvcGVyYXRvciA9PT0gXCJpblwiKSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbHVlIG11c3QgYmUgYW4gYXJyYXlcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuaW5jbHVkZXMocmVjb3JkW2ZpZWxkXSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJjb250YWluc1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkW2ZpZWxkXS5pbmNsdWRlcyh2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJzdGFydHNfd2l0aFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkW2ZpZWxkXS5zdGFydHNXaXRoKHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcImVuZHNfd2l0aFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkW2ZpZWxkXS5lbmRzV2l0aCh2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZWNvcmRbZmllbGRdID09PSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGU6IGFzeW5jICh7IG1vZGVsLCBkYXRhIH0pID0+IHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYWR2YW5jZWQ/LmRhdGFiYXNlPy51c2VOdW1iZXJJZCkge1xuICAgICAgICAgIGRhdGEuaWQgPSBkYlttb2RlbF0ubGVuZ3RoICsgMTtcbiAgICAgICAgfVxuICAgICAgICBkYlttb2RlbF0ucHVzaChkYXRhKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9LFxuICAgICAgZmluZE9uZTogYXN5bmMgKHsgbW9kZWwsIHdoZXJlIH0pID0+IHtcbiAgICAgICAgY29uc3QgdGFibGUgPSBkYlttb2RlbF07XG4gICAgICAgIGNvbnN0IHJlcyA9IGNvbnZlcnRXaGVyZUNsYXVzZSh3aGVyZSwgdGFibGUpO1xuICAgICAgICBjb25zdCByZWNvcmQgPSByZXNbMF0gfHwgbnVsbDtcbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICAgIH0sXG4gICAgICBmaW5kTWFueTogYXN5bmMgKHsgbW9kZWwsIHdoZXJlLCBzb3J0QnksIGxpbWl0LCBvZmZzZXQgfSkgPT4ge1xuICAgICAgICBsZXQgdGFibGUgPSBkYlttb2RlbF07XG4gICAgICAgIGlmICh3aGVyZSkge1xuICAgICAgICAgIHRhYmxlID0gY29udmVydFdoZXJlQ2xhdXNlKHdoZXJlLCB0YWJsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvcnRCeSkge1xuICAgICAgICAgIHRhYmxlID0gdGFibGUuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSBnZXRGaWVsZE5hbWUoeyBtb2RlbCwgZmllbGQ6IHNvcnRCeS5maWVsZCB9KTtcbiAgICAgICAgICAgIGlmIChzb3J0QnkuZGlyZWN0aW9uID09PSBcImFzY1wiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhW2ZpZWxkXSA+IGJbZmllbGRdID8gMSA6IC0xO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFbZmllbGRdIDwgYltmaWVsZF0gPyAxIDogLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgdGFibGUgPSB0YWJsZS5zbGljZShvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW1pdCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgdGFibGUgPSB0YWJsZS5zbGljZSgwLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhYmxlO1xuICAgICAgfSxcbiAgICAgIGNvdW50OiBhc3luYyAoeyBtb2RlbCB9KSA9PiB7XG4gICAgICAgIHJldHVybiBkYlttb2RlbF0ubGVuZ3RoO1xuICAgICAgfSxcbiAgICAgIHVwZGF0ZTogYXN5bmMgKHsgbW9kZWwsIHdoZXJlLCB1cGRhdGUgfSkgPT4ge1xuICAgICAgICBjb25zdCB0YWJsZSA9IGRiW21vZGVsXTtcbiAgICAgICAgY29uc3QgcmVzID0gY29udmVydFdoZXJlQ2xhdXNlKHdoZXJlLCB0YWJsZSk7XG4gICAgICAgIHJlcy5mb3JFYWNoKChyZWNvcmQpID0+IHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHJlY29yZCwgdXBkYXRlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXNbMF0gfHwgbnVsbDtcbiAgICAgIH0sXG4gICAgICBkZWxldGU6IGFzeW5jICh7IG1vZGVsLCB3aGVyZSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYmxlID0gZGJbbW9kZWxdO1xuICAgICAgICBjb25zdCByZXMgPSBjb252ZXJ0V2hlcmVDbGF1c2Uod2hlcmUsIHRhYmxlKTtcbiAgICAgICAgZGJbbW9kZWxdID0gdGFibGUuZmlsdGVyKChyZWNvcmQpID0+ICFyZXMuaW5jbHVkZXMocmVjb3JkKSk7XG4gICAgICB9LFxuICAgICAgZGVsZXRlTWFueTogYXN5bmMgKHsgbW9kZWwsIHdoZXJlIH0pID0+IHtcbiAgICAgICAgY29uc3QgdGFibGUgPSBkYlttb2RlbF07XG4gICAgICAgIGNvbnN0IHJlcyA9IGNvbnZlcnRXaGVyZUNsYXVzZSh3aGVyZSwgdGFibGUpO1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBkYlttb2RlbF0gPSB0YWJsZS5maWx0ZXIoKHJlY29yZCkgPT4ge1xuICAgICAgICAgIGlmIChyZXMuaW5jbHVkZXMocmVjb3JkKSkge1xuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICFyZXMuaW5jbHVkZXMocmVjb3JkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICAgIH0sXG4gICAgICB1cGRhdGVNYW55KHsgbW9kZWwsIHdoZXJlLCB1cGRhdGUgfSkge1xuICAgICAgICBjb25zdCB0YWJsZSA9IGRiW21vZGVsXTtcbiAgICAgICAgY29uc3QgcmVzID0gY29udmVydFdoZXJlQ2xhdXNlKHdoZXJlLCB0YWJsZSk7XG4gICAgICAgIHJlcy5mb3JFYWNoKChyZWNvcmQpID0+IHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHJlY29yZCwgdXBkYXRlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXNbMF0gfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59KTtcblxuZXhwb3J0IHsgbWVtb3J5QWRhcHRlciBhcyBtIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.BCaUEQgP.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.BGG5f0S_.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.BGG5f0S_.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getAdapter),\n/* harmony export */   b: () => (/* binding */ convertToDB),\n/* harmony export */   c: () => (/* binding */ createInternalAdapter),\n/* harmony export */   d: () => (/* binding */ convertFromDB),\n/* harmony export */   e: () => (/* binding */ getMigrations),\n/* harmony export */   f: () => (/* binding */ getSchema),\n/* harmony export */   g: () => (/* binding */ getWithHooks),\n/* harmony export */   m: () => (/* binding */ matchType)\n/* harmony export */ });\n/* harmony import */ var _better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.Cc72UxUH.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs\");\n/* harmony import */ var _better_auth_iKoUsdFE_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.iKoUsdFE.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.iKoUsdFE.mjs\");\n/* harmony import */ var _better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./better-auth.tB5eU6EY.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./better-auth.DORkW_Ge.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _better_auth_C4F0dkzb_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./better-auth.C4F0dkzb.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C4F0dkzb.mjs\");\n/* harmony import */ var _better_auth_BCaUEQgP_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./better-auth.BCaUEQgP.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BCaUEQgP.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getWithHooks(adapter, ctx) {\n  const hooks = ctx.hooks;\n  async function createWithHooks(data, model, customCreateFn, context) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.create?.before;\n      if (toRun) {\n        const result = await toRun(actualData, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\" && \"data\" in result;\n        if (isObject) {\n          actualData = {\n            ...actualData,\n            ...result.data\n          };\n        }\n      }\n    }\n    const customCreated = customCreateFn ? await customCreateFn.fn(actualData) : null;\n    const created = !customCreateFn || customCreateFn.executeMainFn ? await adapter.create({\n      model,\n      data: actualData,\n      forceAllowId: true\n    }) : customCreated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.create?.after;\n      if (toRun) {\n        await toRun(created, context);\n      }\n    }\n    return created;\n  }\n  async function updateWithHooks(data, where, model, customUpdateFn, context) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.before;\n      if (toRun) {\n        const result = await toRun(data, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\";\n        actualData = isObject ? result.data : result;\n      }\n    }\n    const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;\n    const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await adapter.update({\n      model,\n      update: actualData,\n      where\n    }) : customUpdated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.after;\n      if (toRun) {\n        await toRun(updated, context);\n      }\n    }\n    return updated;\n  }\n  async function updateManyWithHooks(data, where, model, customUpdateFn, context) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.before;\n      if (toRun) {\n        const result = await toRun(data, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\";\n        actualData = isObject ? result.data : result;\n      }\n    }\n    const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;\n    const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await adapter.updateMany({\n      model,\n      update: actualData,\n      where\n    }) : customUpdated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.after;\n      if (toRun) {\n        await toRun(updated, context);\n      }\n    }\n    return updated;\n  }\n  return {\n    createWithHooks,\n    updateWithHooks,\n    updateManyWithHooks\n  };\n}\n\nconst createInternalAdapter = (adapter, ctx) => {\n  const options = ctx.options;\n  const secondaryStorage = options.secondaryStorage;\n  const sessionExpiration = options.session?.expiresIn || 60 * 60 * 24 * 7;\n  const { createWithHooks, updateWithHooks, updateManyWithHooks } = getWithHooks(adapter, ctx);\n  return {\n    createOAuthUser: async (user, account, context) => {\n      const createdUser = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...user\n        },\n        \"user\",\n        void 0,\n        context\n      );\n      const createdAccount = await createWithHooks(\n        {\n          ...account,\n          userId: createdUser.id || user.id,\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date()\n        },\n        \"account\",\n        void 0,\n        context\n      );\n      return {\n        user: createdUser,\n        account: createdAccount\n      };\n    },\n    createUser: async (user, context) => {\n      const createdUser = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          emailVerified: false,\n          ...user,\n          email: user.email?.toLowerCase()\n        },\n        \"user\",\n        void 0,\n        context\n      );\n      return createdUser;\n    },\n    createAccount: async (account, context) => {\n      const createdAccount = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...account\n        },\n        \"account\",\n        void 0,\n        context\n      );\n      return createdAccount;\n    },\n    listSessions: async (userId) => {\n      if (secondaryStorage) {\n        const currentList = await secondaryStorage.get(\n          `active-sessions-${userId}`\n        );\n        if (!currentList) return [];\n        const list = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(currentList) || [];\n        const now = Date.now();\n        const validSessions = list.filter((s) => s.expiresAt > now);\n        const sessions2 = [];\n        for (const session of validSessions) {\n          const sessionStringified = await secondaryStorage.get(session.token);\n          if (sessionStringified) {\n            const s = JSON.parse(sessionStringified);\n            const parsedSession = (0,_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(ctx.options, {\n              ...s.session,\n              expiresAt: new Date(s.session.expiresAt)\n            });\n            sessions2.push(parsedSession);\n          }\n        }\n        return sessions2;\n      }\n      const sessions = await adapter.findMany({\n        model: \"session\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return sessions;\n    },\n    listUsers: async (limit, offset, sortBy, where) => {\n      const users = await adapter.findMany({\n        model: \"user\",\n        limit,\n        offset,\n        sortBy,\n        where\n      });\n      return users;\n    },\n    countTotalUsers: async (where) => {\n      const total = await adapter.count({\n        model: \"user\",\n        where\n      });\n      if (typeof total === \"string\") {\n        return parseInt(total);\n      }\n      return total;\n    },\n    deleteUser: async (userId) => {\n      if (secondaryStorage) {\n        await secondaryStorage.delete(`active-sessions-${userId}`);\n      }\n      if (!secondaryStorage || options.session?.storeSessionInDatabase) {\n        await adapter.deleteMany({\n          model: \"session\",\n          where: [\n            {\n              field: \"userId\",\n              value: userId\n            }\n          ]\n        });\n      }\n      await adapter.deleteMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      await adapter.delete({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ]\n      });\n    },\n    createSession: async (userId, ctx2, dontRememberMe, override, overrideAll) => {\n      const headers = ctx2.headers || ctx2.request?.headers;\n      const { id: _, ...rest } = override || {};\n      const data = {\n        ipAddress: ctx2.request || ctx2.headers ? (0,_better_auth_iKoUsdFE_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(ctx2.request || ctx2.headers, ctx2.context.options) || \"\" : \"\",\n        userAgent: headers?.get(\"user-agent\") || \"\",\n        ...rest,\n        /**\n         * If the user doesn't want to be remembered\n         * set the session to expire in 1 day.\n         * The cookie will be set to expire at the end of the session\n         */\n        expiresAt: dontRememberMe ? (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(60 * 60 * 24, \"sec\") : (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(sessionExpiration, \"sec\"),\n        userId,\n        token: (0,_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(32),\n        createdAt: /* @__PURE__ */ new Date(),\n        updatedAt: /* @__PURE__ */ new Date(),\n        ...overrideAll ? rest : {}\n      };\n      const res = await createWithHooks(\n        data,\n        \"session\",\n        secondaryStorage ? {\n          fn: async (sessionData) => {\n            const currentList = await secondaryStorage.get(\n              `active-sessions-${userId}`\n            );\n            let list = [];\n            const now = Date.now();\n            if (currentList) {\n              list = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(currentList) || [];\n              list = list.filter((session) => session.expiresAt > now);\n            }\n            list.push({\n              token: data.token,\n              expiresAt: now + sessionExpiration * 1e3\n            });\n            await secondaryStorage.set(\n              `active-sessions-${userId}`,\n              JSON.stringify(list),\n              sessionExpiration\n            );\n            return sessionData;\n          },\n          executeMainFn: options.session?.storeSessionInDatabase\n        } : void 0,\n        ctx2\n      );\n      return res;\n    },\n    findSession: async (token) => {\n      if (secondaryStorage) {\n        const sessionStringified = await secondaryStorage.get(token);\n        if (!sessionStringified && !options.session?.storeSessionInDatabase) {\n          return null;\n        }\n        if (sessionStringified) {\n          const s = JSON.parse(sessionStringified);\n          const parsedSession2 = (0,_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(ctx.options, {\n            ...s.session,\n            expiresAt: new Date(s.session.expiresAt),\n            createdAt: new Date(s.session.createdAt),\n            updatedAt: new Date(s.session.updatedAt)\n          });\n          const parsedUser2 = (0,_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(ctx.options, {\n            ...s.user,\n            createdAt: new Date(s.user.createdAt),\n            updatedAt: new Date(s.user.updatedAt)\n          });\n          return {\n            session: parsedSession2,\n            user: parsedUser2\n          };\n        }\n      }\n      const session = await adapter.findOne({\n        model: \"session\",\n        where: [\n          {\n            value: token,\n            field: \"token\"\n          }\n        ]\n      });\n      if (!session) {\n        return null;\n      }\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            value: session.userId,\n            field: \"id\"\n          }\n        ]\n      });\n      if (!user) {\n        return null;\n      }\n      const parsedSession = (0,_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(ctx.options, session);\n      const parsedUser = (0,_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(ctx.options, user);\n      return {\n        session: parsedSession,\n        user: parsedUser\n      };\n    },\n    findSessions: async (sessionTokens) => {\n      if (secondaryStorage) {\n        const sessions2 = [];\n        for (const sessionToken of sessionTokens) {\n          const sessionStringified = await secondaryStorage.get(sessionToken);\n          if (sessionStringified) {\n            const s = JSON.parse(sessionStringified);\n            const session = {\n              session: {\n                ...s.session,\n                expiresAt: new Date(s.session.expiresAt)\n              },\n              user: {\n                ...s.user,\n                createdAt: new Date(s.user.createdAt),\n                updatedAt: new Date(s.user.updatedAt)\n              }\n            };\n            sessions2.push(session);\n          }\n        }\n        return sessions2;\n      }\n      const sessions = await adapter.findMany({\n        model: \"session\",\n        where: [\n          {\n            field: \"token\",\n            value: sessionTokens,\n            operator: \"in\"\n          }\n        ]\n      });\n      const userIds = sessions.map((session) => {\n        return session.userId;\n      });\n      if (!userIds.length) return [];\n      const users = await adapter.findMany({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userIds,\n            operator: \"in\"\n          }\n        ]\n      });\n      return sessions.map((session) => {\n        const user = users.find((u) => u.id === session.userId);\n        if (!user) return null;\n        return {\n          session,\n          user\n        };\n      });\n    },\n    updateSession: async (sessionToken, session, context) => {\n      const updatedSession = await updateWithHooks(\n        session,\n        [{ field: \"token\", value: sessionToken }],\n        \"session\",\n        secondaryStorage ? {\n          async fn(data) {\n            const currentSession = await secondaryStorage.get(sessionToken);\n            let updatedSession2 = null;\n            if (currentSession) {\n              const parsedSession = JSON.parse(currentSession);\n              updatedSession2 = {\n                ...parsedSession.session,\n                ...data\n              };\n              return updatedSession2;\n            } else {\n              return null;\n            }\n          },\n          executeMainFn: options.session?.storeSessionInDatabase\n        } : void 0,\n        context\n      );\n      return updatedSession;\n    },\n    deleteSession: async (token) => {\n      if (secondaryStorage) {\n        await secondaryStorage.delete(token);\n        if (!options.session?.storeSessionInDatabase || ctx.options.session?.preserveSessionInDatabase) {\n          return;\n        }\n      }\n      await adapter.delete({\n        model: \"session\",\n        where: [\n          {\n            field: \"token\",\n            value: token\n          }\n        ]\n      });\n    },\n    deleteAccounts: async (userId) => {\n      await adapter.deleteMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n    },\n    deleteAccount: async (accountId) => {\n      await adapter.delete({\n        model: \"account\",\n        where: [\n          {\n            field: \"id\",\n            value: accountId\n          }\n        ]\n      });\n    },\n    deleteSessions: async (userIdOrSessionTokens) => {\n      if (secondaryStorage) {\n        if (typeof userIdOrSessionTokens === \"string\") {\n          const activeSession = await secondaryStorage.get(\n            `active-sessions-${userIdOrSessionTokens}`\n          );\n          const sessions = activeSession ? (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(activeSession) : [];\n          if (!sessions) return;\n          for (const session of sessions) {\n            await secondaryStorage.delete(session.token);\n          }\n        } else {\n          for (const sessionToken of userIdOrSessionTokens) {\n            const session = await secondaryStorage.get(sessionToken);\n            if (session) {\n              await secondaryStorage.delete(sessionToken);\n            }\n          }\n        }\n        if (!options.session?.storeSessionInDatabase || ctx.options.session?.preserveSessionInDatabase) {\n          return;\n        }\n      }\n      await adapter.deleteMany({\n        model: \"session\",\n        where: [\n          {\n            field: Array.isArray(userIdOrSessionTokens) ? \"token\" : \"userId\",\n            value: userIdOrSessionTokens,\n            operator: Array.isArray(userIdOrSessionTokens) ? \"in\" : void 0\n          }\n        ]\n      });\n    },\n    findOAuthUser: async (email, accountId, providerId) => {\n      const account = await adapter.findMany({\n        model: \"account\",\n        where: [\n          {\n            value: accountId,\n            field: \"accountId\"\n          }\n        ]\n      }).then((accounts) => {\n        return accounts.find((a) => a.providerId === providerId);\n      });\n      if (account) {\n        const user = await adapter.findOne({\n          model: \"user\",\n          where: [\n            {\n              value: account.userId,\n              field: \"id\"\n            }\n          ]\n        });\n        if (user) {\n          return {\n            user,\n            accounts: [account]\n          };\n        } else {\n          const user2 = await adapter.findOne({\n            model: \"user\",\n            where: [\n              {\n                value: email.toLowerCase(),\n                field: \"email\"\n              }\n            ]\n          });\n          if (user2) {\n            return {\n              user: user2,\n              accounts: [account]\n            };\n          }\n          return null;\n        }\n      } else {\n        const user = await adapter.findOne({\n          model: \"user\",\n          where: [\n            {\n              value: email.toLowerCase(),\n              field: \"email\"\n            }\n          ]\n        });\n        if (user) {\n          const accounts = await adapter.findMany({\n            model: \"account\",\n            where: [\n              {\n                value: user.id,\n                field: \"userId\"\n              }\n            ]\n          });\n          return {\n            user,\n            accounts: accounts || []\n          };\n        } else {\n          return null;\n        }\n      }\n    },\n    findUserByEmail: async (email, options2) => {\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            value: email.toLowerCase(),\n            field: \"email\"\n          }\n        ]\n      });\n      if (!user) return null;\n      if (options2?.includeAccounts) {\n        const accounts = await adapter.findMany({\n          model: \"account\",\n          where: [\n            {\n              value: user.id,\n              field: \"userId\"\n            }\n          ]\n        });\n        return {\n          user,\n          accounts\n        };\n      }\n      return {\n        user,\n        accounts: []\n      };\n    },\n    findUserById: async (userId) => {\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ]\n      });\n      return user;\n    },\n    linkAccount: async (account, context) => {\n      const _account = await createWithHooks(\n        {\n          ...account,\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date()\n        },\n        \"account\",\n        void 0,\n        context\n      );\n      return _account;\n    },\n    updateUser: async (userId, data, context) => {\n      const user = await updateWithHooks(\n        data,\n        [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ],\n        \"user\",\n        void 0,\n        context\n      );\n      if (secondaryStorage && user) {\n        const listRaw = await secondaryStorage.get(`active-sessions-${userId}`);\n        if (listRaw) {\n          const now = Date.now();\n          const list = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(listRaw) || [];\n          const validSessions = list.filter((s) => s.expiresAt > now);\n          await Promise.all(\n            validSessions.map(async ({ token }) => {\n              const cached = await secondaryStorage.get(token);\n              if (!cached) return;\n              const parsed = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(cached);\n              if (!parsed) return;\n              const sessionTTL = Math.max(\n                Math.floor(\n                  (new Date(parsed.session.expiresAt).getTime() - now) / 1e3\n                ),\n                0\n              );\n              await secondaryStorage.set(\n                token,\n                JSON.stringify({\n                  session: parsed.session,\n                  user\n                }),\n                sessionTTL\n              );\n            })\n          );\n        }\n      }\n      return user;\n    },\n    updateUserByEmail: async (email, data, context) => {\n      const user = await updateWithHooks(\n        data,\n        [\n          {\n            field: \"email\",\n            value: email.toLowerCase()\n          }\n        ],\n        \"user\",\n        void 0,\n        context\n      );\n      return user;\n    },\n    updatePassword: async (userId, password, context) => {\n      await updateManyWithHooks(\n        {\n          password\n        },\n        [\n          {\n            field: \"userId\",\n            value: userId\n          },\n          {\n            field: \"providerId\",\n            value: \"credential\"\n          }\n        ],\n        \"account\",\n        void 0,\n        context\n      );\n    },\n    findAccounts: async (userId) => {\n      const accounts = await adapter.findMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return accounts;\n    },\n    findAccount: async (accountId) => {\n      const account = await adapter.findOne({\n        model: \"account\",\n        where: [\n          {\n            field: \"accountId\",\n            value: accountId\n          }\n        ]\n      });\n      return account;\n    },\n    findAccountByProviderId: async (accountId, providerId) => {\n      const account = await adapter.findOne({\n        model: \"account\",\n        where: [\n          {\n            field: \"accountId\",\n            value: accountId\n          },\n          {\n            field: \"providerId\",\n            value: providerId\n          }\n        ]\n      });\n      return account;\n    },\n    findAccountByUserId: async (userId) => {\n      const account = await adapter.findMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return account;\n    },\n    updateAccount: async (id, data, context) => {\n      const account = await updateWithHooks(\n        data,\n        [{ field: \"id\", value: id }],\n        \"account\",\n        void 0,\n        context\n      );\n      return account;\n    },\n    createVerificationValue: async (data, context) => {\n      const verification = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...data\n        },\n        \"verification\",\n        void 0,\n        context\n      );\n      return verification;\n    },\n    findVerificationValue: async (identifier) => {\n      const verification = await adapter.findMany({\n        model: \"verification\",\n        where: [\n          {\n            field: \"identifier\",\n            value: identifier\n          }\n        ],\n        sortBy: {\n          field: \"createdAt\",\n          direction: \"desc\"\n        },\n        limit: 1\n      });\n      if (!options.verification?.disableCleanup) {\n        await adapter.deleteMany({\n          model: \"verification\",\n          where: [\n            {\n              field: \"expiresAt\",\n              value: /* @__PURE__ */ new Date(),\n              operator: \"lt\"\n            }\n          ]\n        });\n      }\n      const lastVerification = verification[0];\n      return lastVerification;\n    },\n    deleteVerificationValue: async (id) => {\n      await adapter.delete({\n        model: \"verification\",\n        where: [\n          {\n            field: \"id\",\n            value: id\n          }\n        ]\n      });\n    },\n    deleteVerificationByIdentifier: async (identifier) => {\n      await adapter.delete({\n        model: \"verification\",\n        where: [\n          {\n            field: \"identifier\",\n            value: identifier\n          }\n        ]\n      });\n    },\n    updateVerificationValue: async (id, data, context) => {\n      const verification = await updateWithHooks(\n        data,\n        [{ field: \"id\", value: id }],\n        \"verification\",\n        void 0,\n        context\n      );\n      return verification;\n    }\n  };\n};\n\nasync function getAdapter(options) {\n  if (!options.database) {\n    const tables = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_14__.g)(options);\n    const memoryDB = Object.keys(tables).reduce((acc, key) => {\n      acc[key] = [];\n      return acc;\n    }, {});\n    _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_11__.l.warn(\n      \"No database configuration provided. Using memory adapter in development\"\n    );\n    return (0,_better_auth_BCaUEQgP_mjs__WEBPACK_IMPORTED_MODULE_17__.m)(memoryDB)(options);\n  }\n  if (typeof options.database === \"function\") {\n    return options.database(options);\n  }\n  const { kysely, databaseType } = await (0,_better_auth_C4F0dkzb_mjs__WEBPACK_IMPORTED_MODULE_16__.c)(options);\n  if (!kysely) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_15__.B(\"Failed to initialize database adapter\");\n  }\n  return (0,_better_auth_C4F0dkzb_mjs__WEBPACK_IMPORTED_MODULE_16__.k)(kysely, {\n    type: databaseType || \"sqlite\",\n    debugLogs: \"debugLogs\" in options.database ? options.database.debugLogs : false\n  })(options);\n}\nfunction convertToDB(fields, values) {\n  let result = values.id ? {\n    id: values.id\n  } : {};\n  for (const key in fields) {\n    const field = fields[key];\n    const value = values[key];\n    if (value === void 0) {\n      continue;\n    }\n    result[field.fieldName || key] = value;\n  }\n  return result;\n}\nfunction convertFromDB(fields, values) {\n  if (!values) {\n    return null;\n  }\n  let result = {\n    id: values.id\n  };\n  for (const [key, value] of Object.entries(fields)) {\n    result[key] = values[value.fieldName || key];\n  }\n  return result;\n}\n\nfunction getSchema(config) {\n  const tables = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_14__.g)(config);\n  let schema = {};\n  for (const key in tables) {\n    const table = tables[key];\n    const fields = table.fields;\n    let actualFields = {};\n    Object.entries(fields).forEach(([key2, field]) => {\n      actualFields[field.fieldName || key2] = field;\n      if (field.references) {\n        const refTable = tables[field.references.model];\n        if (refTable) {\n          actualFields[field.fieldName || key2].references = {\n            model: refTable.modelName,\n            field: field.references.field\n          };\n        }\n      }\n    });\n    if (schema[table.modelName]) {\n      schema[table.modelName].fields = {\n        ...schema[table.modelName].fields,\n        ...actualFields\n      };\n      continue;\n    }\n    schema[table.modelName] = {\n      fields: actualFields,\n      order: table.order || Infinity\n    };\n  }\n  return schema;\n}\n\nconst postgresMap = {\n  string: [\"character varying\", \"text\"],\n  number: [\n    \"int4\",\n    \"integer\",\n    \"bigint\",\n    \"smallint\",\n    \"numeric\",\n    \"real\",\n    \"double precision\"\n  ],\n  boolean: [\"bool\", \"boolean\"],\n  date: [\"timestamp\", \"date\"]\n};\nconst mysqlMap = {\n  string: [\"varchar\", \"text\"],\n  number: [\n    \"integer\",\n    \"int\",\n    \"bigint\",\n    \"smallint\",\n    \"decimal\",\n    \"float\",\n    \"double\"\n  ],\n  boolean: [\"boolean\", \"tinyint\"],\n  date: [\"timestamp\", \"datetime\", \"date\"]\n};\nconst sqliteMap = {\n  string: [\"TEXT\"],\n  number: [\"INTEGER\", \"REAL\"],\n  boolean: [\"INTEGER\", \"BOOLEAN\"],\n  // 0 or 1\n  date: [\"DATE\", \"INTEGER\"]\n};\nconst mssqlMap = {\n  string: [\"text\", \"varchar\"],\n  number: [\"int\", \"bigint\", \"smallint\", \"decimal\", \"float\", \"double\"],\n  boolean: [\"bit\", \"smallint\"],\n  date: [\"datetime\", \"date\"]\n};\nconst map = {\n  postgres: postgresMap,\n  mysql: mysqlMap,\n  sqlite: sqliteMap,\n  mssql: mssqlMap\n};\nfunction matchType(columnDataType, fieldType, dbType) {\n  if (fieldType === \"string[]\" || fieldType === \"number[]\") {\n    return columnDataType.toLowerCase().includes(\"json\");\n  }\n  const types = map[dbType];\n  const type = Array.isArray(fieldType) ? types[\"string\"].map((t) => t.toLowerCase()) : types[fieldType].map((t) => t.toLowerCase());\n  const matches = type.includes(columnDataType.toLowerCase());\n  return matches;\n}\nasync function getMigrations(config) {\n  const betterAuthSchema = getSchema(config);\n  const logger = (0,_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_11__.c)(config.logger);\n  let { kysely: db, databaseType: dbType } = await (0,_better_auth_C4F0dkzb_mjs__WEBPACK_IMPORTED_MODULE_16__.c)(config);\n  if (!dbType) {\n    logger.warn(\n      \"Could not determine database type, defaulting to sqlite. Please provide a type in the database options to avoid this.\"\n    );\n    dbType = \"sqlite\";\n  }\n  if (!db) {\n    logger.error(\n      \"Only kysely adapter is supported for migrations. You can use `generate` command to generate the schema, if you're using a different adapter.\"\n    );\n    process.exit(1);\n  }\n  const tableMetadata = await db.introspection.getTables();\n  const toBeCreated = [];\n  const toBeAdded = [];\n  for (const [key, value] of Object.entries(betterAuthSchema)) {\n    const table = tableMetadata.find((t) => t.name === key);\n    if (!table) {\n      const tIndex = toBeCreated.findIndex((t) => t.table === key);\n      const tableData = {\n        table: key,\n        fields: value.fields,\n        order: value.order || Infinity\n      };\n      const insertIndex = toBeCreated.findIndex(\n        (t) => (t.order || Infinity) > tableData.order\n      );\n      if (insertIndex === -1) {\n        if (tIndex === -1) {\n          toBeCreated.push(tableData);\n        } else {\n          toBeCreated[tIndex].fields = {\n            ...toBeCreated[tIndex].fields,\n            ...value.fields\n          };\n        }\n      } else {\n        toBeCreated.splice(insertIndex, 0, tableData);\n      }\n      continue;\n    }\n    let toBeAddedFields = {};\n    for (const [fieldName, field] of Object.entries(value.fields)) {\n      const column = table.columns.find((c) => c.name === fieldName);\n      if (!column) {\n        toBeAddedFields[fieldName] = field;\n        continue;\n      }\n      if (matchType(column.dataType, field.type, dbType)) {\n        continue;\n      } else {\n        logger.warn(\n          `Field ${fieldName} in table ${key} has a different type in the database. Expected ${field.type} but got ${column.dataType}.`\n        );\n      }\n    }\n    if (Object.keys(toBeAddedFields).length > 0) {\n      toBeAdded.push({\n        table: key,\n        fields: toBeAddedFields,\n        order: value.order || Infinity\n      });\n    }\n  }\n  const migrations = [];\n  function getType(field, fieldName) {\n    const type = field.type;\n    const typeMap = {\n      string: {\n        sqlite: \"text\",\n        postgres: \"text\",\n        mysql: field.unique ? \"varchar(255)\" : field.references ? \"varchar(36)\" : \"text\",\n        mssql: field.unique || field.sortable ? \"varchar(255)\" : field.references ? \"varchar(36)\" : \"text\"\n      },\n      boolean: {\n        sqlite: \"integer\",\n        postgres: \"boolean\",\n        mysql: \"boolean\",\n        mssql: \"smallint\"\n      },\n      number: {\n        sqlite: field.bigint ? \"bigint\" : \"integer\",\n        postgres: field.bigint ? \"bigint\" : \"integer\",\n        mysql: field.bigint ? \"bigint\" : \"integer\",\n        mssql: field.bigint ? \"bigint\" : \"integer\"\n      },\n      date: {\n        sqlite: \"date\",\n        postgres: \"timestamp\",\n        mysql: \"datetime\",\n        mssql: \"datetime\"\n      },\n      id: {\n        postgres: config.advanced?.database?.useNumberId ? \"serial\" : \"text\",\n        mysql: config.advanced?.database?.useNumberId ? \"integer\" : \"varchar(36)\",\n        mssql: config.advanced?.database?.useNumberId ? \"integer\" : \"varchar(36)\",\n        sqlite: config.advanced?.database?.useNumberId ? \"integer\" : \"text\"\n      }\n    };\n    if (fieldName === \"id\" || field.references?.field === \"id\") {\n      return typeMap.id[dbType];\n    }\n    if (dbType === \"sqlite\" && (type === \"string[]\" || type === \"number[]\")) {\n      return \"text\";\n    }\n    if (type === \"string[]\" || type === \"number[]\") {\n      return \"jsonb\";\n    }\n    if (Array.isArray(type)) {\n      return \"text\";\n    }\n    return typeMap[type][dbType || \"sqlite\"];\n  }\n  if (toBeAdded.length) {\n    for (const table of toBeAdded) {\n      for (const [fieldName, field] of Object.entries(table.fields)) {\n        const type = getType(field, fieldName);\n        const exec = db.schema.alterTable(table.table).addColumn(fieldName, type, (col) => {\n          col = field.required !== false ? col.notNull() : col;\n          if (field.references) {\n            col = col.references(\n              `${field.references.model}.${field.references.field}`\n            );\n          }\n          if (field.unique) {\n            col = col.unique();\n          }\n          return col;\n        });\n        migrations.push(exec);\n      }\n    }\n  }\n  if (toBeCreated.length) {\n    for (const table of toBeCreated) {\n      let dbT = db.schema.createTable(table.table).addColumn(\n        \"id\",\n        config.advanced?.database?.useNumberId ? dbType === \"postgres\" ? \"serial\" : \"integer\" : dbType === \"mysql\" || dbType === \"mssql\" ? \"varchar(36)\" : \"text\",\n        (col) => {\n          if (config.advanced?.database?.useNumberId) {\n            if (dbType === \"postgres\") {\n              return col.primaryKey().notNull();\n            }\n            return col.autoIncrement().primaryKey().notNull();\n          }\n          return col.primaryKey().notNull();\n        }\n      );\n      for (const [fieldName, field] of Object.entries(table.fields)) {\n        const type = getType(field, fieldName);\n        dbT = dbT.addColumn(fieldName, type, (col) => {\n          col = field.required !== false ? col.notNull() : col;\n          if (field.references) {\n            col = col.references(\n              `${field.references.model}.${field.references.field}`\n            );\n          }\n          if (field.unique) {\n            col = col.unique();\n          }\n          return col;\n        });\n      }\n      migrations.push(dbT);\n    }\n  }\n  async function runMigrations() {\n    for (const migration of migrations) {\n      await migration.execute();\n    }\n  }\n  async function compileMigrations() {\n    const compiled = migrations.map((m) => m.compile().sql);\n    return compiled.join(\";\\n\\n\") + \";\";\n  }\n  return { toBeCreated, toBeAdded, runMigrations, compileMigrations };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.BGG5f0S_.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ generateId)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n\n\nconst generateId = (size) => {\n  return (0,_better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__.createRandomStringGenerator)(\"a-z\", \"A-Z\", \"0-9\")(size || 32);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQlVQUFJYZksubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdFOztBQUV4RTtBQUNBLFNBQVMsc0ZBQTJCO0FBQ3BDOztBQUUyQiIsInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlsaW1hcy9Eb2N1bWVudHMvRGF2aS9lc3R1ZG9zL3JlYWN0L2Jld2Vhci9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQlVQUFJYZksubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVJhbmRvbVN0cmluZ0dlbmVyYXRvciB9IGZyb20gJ0BiZXR0ZXItYXV0aC91dGlscy9yYW5kb20nO1xuXG5jb25zdCBnZW5lcmF0ZUlkID0gKHNpemUpID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVJhbmRvbVN0cmluZ0dlbmVyYXRvcihcImEtelwiLCBcIkEtWlwiLCBcIjAtOVwiKShzaXplIHx8IDMyKTtcbn07XG5cbmV4cG9ydCB7IGdlbmVyYXRlSWQgYXMgZyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.C4F0dkzb.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.C4F0dkzb.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createKyselyAdapter),\n/* harmony export */   k: () => (/* binding */ kyselyAdapter)\n/* harmony export */ });\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/dialect/sqlite/sqlite-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/dialect/mysql/mysql-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/dialect/postgres/postgres-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/dialect/mssql/mssql-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/kysely.js\");\n/* harmony import */ var _better_auth_DFIAchwv_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.DFIAchwv.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DFIAchwv.mjs\");\n\n\n\nfunction getDatabaseType(db) {\n  if (!db) {\n    return null;\n  }\n  if (\"dialect\" in db) {\n    return getDatabaseType(db.dialect);\n  }\n  if (\"createDriver\" in db) {\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_1__.SqliteDialect) {\n      return \"sqlite\";\n    }\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_2__.MysqlDialect) {\n      return \"mysql\";\n    }\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_3__.PostgresDialect) {\n      return \"postgres\";\n    }\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_4__.MssqlDialect) {\n      return \"mssql\";\n    }\n  }\n  if (\"aggregate\" in db) {\n    return \"sqlite\";\n  }\n  if (\"getConnection\" in db) {\n    return \"mysql\";\n  }\n  if (\"connect\" in db) {\n    return \"postgres\";\n  }\n  if (\"fileControl\" in db) {\n    return \"sqlite\";\n  }\n  return null;\n}\nconst createKyselyAdapter = async (config) => {\n  const db = config.database;\n  if (!db) {\n    return {\n      kysely: null,\n      databaseType: null\n    };\n  }\n  if (\"db\" in db) {\n    return {\n      kysely: db.db,\n      databaseType: db.type\n    };\n  }\n  if (\"dialect\" in db) {\n    return {\n      kysely: new kysely__WEBPACK_IMPORTED_MODULE_5__.Kysely({ dialect: db.dialect }),\n      databaseType: db.type\n    };\n  }\n  let dialect = void 0;\n  const databaseType = getDatabaseType(db);\n  if (\"createDriver\" in db) {\n    dialect = db;\n  }\n  if (\"aggregate\" in db) {\n    dialect = new kysely__WEBPACK_IMPORTED_MODULE_1__.SqliteDialect({\n      database: db\n    });\n  }\n  if (\"getConnection\" in db) {\n    dialect = new kysely__WEBPACK_IMPORTED_MODULE_2__.MysqlDialect(db);\n  }\n  if (\"connect\" in db) {\n    dialect = new kysely__WEBPACK_IMPORTED_MODULE_3__.PostgresDialect({\n      pool: db\n    });\n  }\n  if (\"fileControl\" in db) {\n    const { BunSqliteDialect } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/better-auth\").then(__webpack_require__.bind(__webpack_require__, /*! ../chunks/bun-sqlite-dialect.mjs */ \"(rsc)/./node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs\"));\n    dialect = new BunSqliteDialect({\n      database: db\n    });\n  }\n  return {\n    kysely: dialect ? new kysely__WEBPACK_IMPORTED_MODULE_5__.Kysely({ dialect }) : null,\n    databaseType\n  };\n};\n\nconst kyselyAdapter = (db, config) => (0,_better_auth_DFIAchwv_mjs__WEBPACK_IMPORTED_MODULE_0__.c)({\n  config: {\n    adapterId: \"kysely\",\n    adapterName: \"Kysely Adapter\",\n    usePlural: config?.usePlural,\n    debugLogs: config?.debugLogs,\n    supportsBooleans: config?.type === \"sqlite\" || config?.type === \"mssql\" || !config?.type ? false : true,\n    supportsDates: config?.type === \"sqlite\" || config?.type === \"mssql\" || !config?.type ? false : true,\n    supportsJSON: false\n  },\n  adapter: ({ getFieldName, schema }) => {\n    const withReturning = async (values, builder, model, where) => {\n      let res;\n      if (config?.type === \"mysql\") {\n        await builder.execute();\n        const field = values.id ? \"id\" : where.length > 0 && where[0].field ? where[0].field : \"id\";\n        if (!values.id && where.length === 0) {\n          res = await db.selectFrom(model).selectAll().orderBy(getFieldName({ model, field }), \"desc\").limit(1).executeTakeFirst();\n          return res;\n        }\n        const value = values[field] || where[0].value;\n        res = await db.selectFrom(model).selectAll().orderBy(getFieldName({ model, field }), \"desc\").where(getFieldName({ model, field }), \"=\", value).limit(1).executeTakeFirst();\n        return res;\n      }\n      if (config?.type === \"mssql\") {\n        res = await builder.outputAll(\"inserted\").executeTakeFirst();\n        return res;\n      }\n      res = await builder.returningAll().executeTakeFirst();\n      return res;\n    };\n    function transformValueToDB(value, model, field) {\n      if (field === \"id\") {\n        return value;\n      }\n      const { type = \"sqlite\" } = config || {};\n      let f = schema[model]?.fields[field];\n      if (!f) {\n        f = Object.values(schema).find((f2) => f2.modelName === model);\n      }\n      if (f.type === \"boolean\" && (type === \"sqlite\" || type === \"mssql\") && value !== null && value !== void 0) {\n        return value ? 1 : 0;\n      }\n      if (f.type === \"date\" && value && value instanceof Date) {\n        return type === \"sqlite\" ? value.toISOString() : value;\n      }\n      return value;\n    }\n    function convertWhereClause(model, w) {\n      if (!w)\n        return {\n          and: null,\n          or: null\n        };\n      const conditions = {\n        and: [],\n        or: []\n      };\n      w.forEach((condition) => {\n        let {\n          field: _field,\n          value,\n          operator = \"=\",\n          connector = \"AND\"\n        } = condition;\n        const field = getFieldName({ model, field: _field });\n        value = transformValueToDB(value, model, _field);\n        const expr = (eb) => {\n          if (operator.toLowerCase() === \"in\") {\n            return eb(field, \"in\", Array.isArray(value) ? value : [value]);\n          }\n          if (operator === \"contains\") {\n            return eb(field, \"like\", `%${value}%`);\n          }\n          if (operator === \"starts_with\") {\n            return eb(field, \"like\", `${value}%`);\n          }\n          if (operator === \"ends_with\") {\n            return eb(field, \"like\", `%${value}`);\n          }\n          if (operator === \"eq\") {\n            return eb(field, \"=\", value);\n          }\n          if (operator === \"ne\") {\n            return eb(field, \"<>\", value);\n          }\n          if (operator === \"gt\") {\n            return eb(field, \">\", value);\n          }\n          if (operator === \"gte\") {\n            return eb(field, \">=\", value);\n          }\n          if (operator === \"lt\") {\n            return eb(field, \"<\", value);\n          }\n          if (operator === \"lte\") {\n            return eb(field, \"<=\", value);\n          }\n          return eb(field, operator, value);\n        };\n        if (connector === \"OR\") {\n          conditions.or.push(expr);\n        } else {\n          conditions.and.push(expr);\n        }\n      });\n      return {\n        and: conditions.and.length ? conditions.and : null,\n        or: conditions.or.length ? conditions.or : null\n      };\n    }\n    return {\n      async create({ data, model }) {\n        const builder = db.insertInto(model).values(data);\n        return await withReturning(data, builder, model, []);\n      },\n      async findOne({ model, where, select }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.selectFrom(model).selectAll();\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        const res = await query.executeTakeFirst();\n        if (!res) return null;\n        return res;\n      },\n      async findMany({ model, where, limit, offset, sortBy }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.selectFrom(model);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        if (config?.type === \"mssql\") {\n          if (!offset) {\n            query = query.top(limit || 100);\n          }\n        } else {\n          query = query.limit(limit || 100);\n        }\n        if (sortBy) {\n          query = query.orderBy(\n            getFieldName({ model, field: sortBy.field }),\n            sortBy.direction\n          );\n        }\n        if (offset) {\n          if (config?.type === \"mssql\") {\n            if (!sortBy) {\n              query = query.orderBy(getFieldName({ model, field: \"id\" }));\n            }\n            query = query.offset(offset).fetch(limit || 100);\n          } else {\n            query = query.offset(offset);\n          }\n        }\n        const res = await query.selectAll().execute();\n        if (!res) return [];\n        return res;\n      },\n      async update({ model, where, update: values }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.updateTable(model).set(values);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        return await withReturning(values, query, model, where);\n      },\n      async updateMany({ model, where, update: values }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.updateTable(model).set(values);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        const res = await query.execute();\n        return res.length;\n      },\n      async count({ model, where }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.selectFrom(model).select(db.fn.count(\"id\").as(\"count\"));\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        const res = await query.execute();\n        return res[0].count;\n      },\n      async delete({ model, where }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.deleteFrom(model);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        await query.execute();\n      },\n      async deleteMany({ model, where }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.deleteFrom(model);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        return (await query.execute()).length;\n      },\n      options: config\n    };\n  }\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQzRGMGRremIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTRGO0FBQzVCOztBQUVoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGlEQUFhO0FBQ25DO0FBQ0E7QUFDQSxzQkFBc0IsZ0RBQVk7QUFDbEM7QUFDQTtBQUNBLHNCQUFzQixtREFBZTtBQUNyQztBQUNBO0FBQ0Esc0JBQXNCLGdEQUFZO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwwQ0FBTSxHQUFHLHFCQUFxQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaURBQWE7QUFDL0I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGtCQUFrQixnREFBWTtBQUM5QjtBQUNBO0FBQ0Esa0JBQWtCLG1EQUFlO0FBQ2pDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZLG1CQUFtQixRQUFRLHFPQUEwQztBQUNqRjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwwQkFBMEIsMENBQU0sR0FBRyxTQUFTO0FBQzVDO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0MsNERBQWE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsY0FBYztBQUM1RjtBQUNBO0FBQ0E7QUFDQSw0RUFBNEUsY0FBYyxnQ0FBZ0MsY0FBYztBQUN4STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsa0JBQWtCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLHFDQUFxQyxzQkFBc0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLE1BQU07QUFDL0M7QUFDQTtBQUNBLHdDQUF3QyxNQUFNO0FBQzlDO0FBQ0E7QUFDQSx5Q0FBeUMsTUFBTTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGFBQWE7QUFDbEM7QUFDQTtBQUNBLE9BQU87QUFDUCxzQkFBc0Isc0JBQXNCO0FBQzVDLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLHVCQUF1QixxQ0FBcUM7QUFDNUQsZ0JBQWdCLFVBQVU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw0QkFBNEI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELG9CQUFvQjtBQUN2RTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxxQkFBcUIsOEJBQThCO0FBQ25ELGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AseUJBQXlCLDhCQUE4QjtBQUN2RCxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1Asb0JBQW9CLGNBQWM7QUFDbEMsZ0JBQWdCLFVBQVU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLHFCQUFxQixjQUFjO0FBQ25DLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AseUJBQXlCLGNBQWM7QUFDdkMsZ0JBQWdCLFVBQVU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUV1RCIsInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlsaW1hcy9Eb2N1bWVudHMvRGF2aS9lc3R1ZG9zL3JlYWN0L2Jld2Vhci9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQzRGMGRremIubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEt5c2VseSwgU3FsaXRlRGlhbGVjdCwgTXlzcWxEaWFsZWN0LCBQb3N0Z3Jlc0RpYWxlY3QsIE1zc3FsRGlhbGVjdCB9IGZyb20gJ2t5c2VseSc7XG5pbXBvcnQgeyBjIGFzIGNyZWF0ZUFkYXB0ZXIgfSBmcm9tICcuL2JldHRlci1hdXRoLkRGSUFjaHd2Lm1qcyc7XG5cbmZ1bmN0aW9uIGdldERhdGFiYXNlVHlwZShkYikge1xuICBpZiAoIWRiKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKFwiZGlhbGVjdFwiIGluIGRiKSB7XG4gICAgcmV0dXJuIGdldERhdGFiYXNlVHlwZShkYi5kaWFsZWN0KTtcbiAgfVxuICBpZiAoXCJjcmVhdGVEcml2ZXJcIiBpbiBkYikge1xuICAgIGlmIChkYiBpbnN0YW5jZW9mIFNxbGl0ZURpYWxlY3QpIHtcbiAgICAgIHJldHVybiBcInNxbGl0ZVwiO1xuICAgIH1cbiAgICBpZiAoZGIgaW5zdGFuY2VvZiBNeXNxbERpYWxlY3QpIHtcbiAgICAgIHJldHVybiBcIm15c3FsXCI7XG4gICAgfVxuICAgIGlmIChkYiBpbnN0YW5jZW9mIFBvc3RncmVzRGlhbGVjdCkge1xuICAgICAgcmV0dXJuIFwicG9zdGdyZXNcIjtcbiAgICB9XG4gICAgaWYgKGRiIGluc3RhbmNlb2YgTXNzcWxEaWFsZWN0KSB7XG4gICAgICByZXR1cm4gXCJtc3NxbFwiO1xuICAgIH1cbiAgfVxuICBpZiAoXCJhZ2dyZWdhdGVcIiBpbiBkYikge1xuICAgIHJldHVybiBcInNxbGl0ZVwiO1xuICB9XG4gIGlmIChcImdldENvbm5lY3Rpb25cIiBpbiBkYikge1xuICAgIHJldHVybiBcIm15c3FsXCI7XG4gIH1cbiAgaWYgKFwiY29ubmVjdFwiIGluIGRiKSB7XG4gICAgcmV0dXJuIFwicG9zdGdyZXNcIjtcbiAgfVxuICBpZiAoXCJmaWxlQ29udHJvbFwiIGluIGRiKSB7XG4gICAgcmV0dXJuIFwic3FsaXRlXCI7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5jb25zdCBjcmVhdGVLeXNlbHlBZGFwdGVyID0gYXN5bmMgKGNvbmZpZykgPT4ge1xuICBjb25zdCBkYiA9IGNvbmZpZy5kYXRhYmFzZTtcbiAgaWYgKCFkYikge1xuICAgIHJldHVybiB7XG4gICAgICBreXNlbHk6IG51bGwsXG4gICAgICBkYXRhYmFzZVR5cGU6IG51bGxcbiAgICB9O1xuICB9XG4gIGlmIChcImRiXCIgaW4gZGIpIHtcbiAgICByZXR1cm4ge1xuICAgICAga3lzZWx5OiBkYi5kYixcbiAgICAgIGRhdGFiYXNlVHlwZTogZGIudHlwZVxuICAgIH07XG4gIH1cbiAgaWYgKFwiZGlhbGVjdFwiIGluIGRiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGt5c2VseTogbmV3IEt5c2VseSh7IGRpYWxlY3Q6IGRiLmRpYWxlY3QgfSksXG4gICAgICBkYXRhYmFzZVR5cGU6IGRiLnR5cGVcbiAgICB9O1xuICB9XG4gIGxldCBkaWFsZWN0ID0gdm9pZCAwO1xuICBjb25zdCBkYXRhYmFzZVR5cGUgPSBnZXREYXRhYmFzZVR5cGUoZGIpO1xuICBpZiAoXCJjcmVhdGVEcml2ZXJcIiBpbiBkYikge1xuICAgIGRpYWxlY3QgPSBkYjtcbiAgfVxuICBpZiAoXCJhZ2dyZWdhdGVcIiBpbiBkYikge1xuICAgIGRpYWxlY3QgPSBuZXcgU3FsaXRlRGlhbGVjdCh7XG4gICAgICBkYXRhYmFzZTogZGJcbiAgICB9KTtcbiAgfVxuICBpZiAoXCJnZXRDb25uZWN0aW9uXCIgaW4gZGIpIHtcbiAgICBkaWFsZWN0ID0gbmV3IE15c3FsRGlhbGVjdChkYik7XG4gIH1cbiAgaWYgKFwiY29ubmVjdFwiIGluIGRiKSB7XG4gICAgZGlhbGVjdCA9IG5ldyBQb3N0Z3Jlc0RpYWxlY3Qoe1xuICAgICAgcG9vbDogZGJcbiAgICB9KTtcbiAgfVxuICBpZiAoXCJmaWxlQ29udHJvbFwiIGluIGRiKSB7XG4gICAgY29uc3QgeyBCdW5TcWxpdGVEaWFsZWN0IH0gPSBhd2FpdCBpbXBvcnQoJy4uL2NodW5rcy9idW4tc3FsaXRlLWRpYWxlY3QubWpzJyk7XG4gICAgZGlhbGVjdCA9IG5ldyBCdW5TcWxpdGVEaWFsZWN0KHtcbiAgICAgIGRhdGFiYXNlOiBkYlxuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAga3lzZWx5OiBkaWFsZWN0ID8gbmV3IEt5c2VseSh7IGRpYWxlY3QgfSkgOiBudWxsLFxuICAgIGRhdGFiYXNlVHlwZVxuICB9O1xufTtcblxuY29uc3Qga3lzZWx5QWRhcHRlciA9IChkYiwgY29uZmlnKSA9PiBjcmVhdGVBZGFwdGVyKHtcbiAgY29uZmlnOiB7XG4gICAgYWRhcHRlcklkOiBcImt5c2VseVwiLFxuICAgIGFkYXB0ZXJOYW1lOiBcIkt5c2VseSBBZGFwdGVyXCIsXG4gICAgdXNlUGx1cmFsOiBjb25maWc/LnVzZVBsdXJhbCxcbiAgICBkZWJ1Z0xvZ3M6IGNvbmZpZz8uZGVidWdMb2dzLFxuICAgIHN1cHBvcnRzQm9vbGVhbnM6IGNvbmZpZz8udHlwZSA9PT0gXCJzcWxpdGVcIiB8fCBjb25maWc/LnR5cGUgPT09IFwibXNzcWxcIiB8fCAhY29uZmlnPy50eXBlID8gZmFsc2UgOiB0cnVlLFxuICAgIHN1cHBvcnRzRGF0ZXM6IGNvbmZpZz8udHlwZSA9PT0gXCJzcWxpdGVcIiB8fCBjb25maWc/LnR5cGUgPT09IFwibXNzcWxcIiB8fCAhY29uZmlnPy50eXBlID8gZmFsc2UgOiB0cnVlLFxuICAgIHN1cHBvcnRzSlNPTjogZmFsc2VcbiAgfSxcbiAgYWRhcHRlcjogKHsgZ2V0RmllbGROYW1lLCBzY2hlbWEgfSkgPT4ge1xuICAgIGNvbnN0IHdpdGhSZXR1cm5pbmcgPSBhc3luYyAodmFsdWVzLCBidWlsZGVyLCBtb2RlbCwgd2hlcmUpID0+IHtcbiAgICAgIGxldCByZXM7XG4gICAgICBpZiAoY29uZmlnPy50eXBlID09PSBcIm15c3FsXCIpIHtcbiAgICAgICAgYXdhaXQgYnVpbGRlci5leGVjdXRlKCk7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gdmFsdWVzLmlkID8gXCJpZFwiIDogd2hlcmUubGVuZ3RoID4gMCAmJiB3aGVyZVswXS5maWVsZCA/IHdoZXJlWzBdLmZpZWxkIDogXCJpZFwiO1xuICAgICAgICBpZiAoIXZhbHVlcy5pZCAmJiB3aGVyZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXMgPSBhd2FpdCBkYi5zZWxlY3RGcm9tKG1vZGVsKS5zZWxlY3RBbGwoKS5vcmRlckJ5KGdldEZpZWxkTmFtZSh7IG1vZGVsLCBmaWVsZCB9KSwgXCJkZXNjXCIpLmxpbWl0KDEpLmV4ZWN1dGVUYWtlRmlyc3QoKTtcbiAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2ZpZWxkXSB8fCB3aGVyZVswXS52YWx1ZTtcbiAgICAgICAgcmVzID0gYXdhaXQgZGIuc2VsZWN0RnJvbShtb2RlbCkuc2VsZWN0QWxsKCkub3JkZXJCeShnZXRGaWVsZE5hbWUoeyBtb2RlbCwgZmllbGQgfSksIFwiZGVzY1wiKS53aGVyZShnZXRGaWVsZE5hbWUoeyBtb2RlbCwgZmllbGQgfSksIFwiPVwiLCB2YWx1ZSkubGltaXQoMSkuZXhlY3V0ZVRha2VGaXJzdCgpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgICAgaWYgKGNvbmZpZz8udHlwZSA9PT0gXCJtc3NxbFwiKSB7XG4gICAgICAgIHJlcyA9IGF3YWl0IGJ1aWxkZXIub3V0cHV0QWxsKFwiaW5zZXJ0ZWRcIikuZXhlY3V0ZVRha2VGaXJzdCgpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgICAgcmVzID0gYXdhaXQgYnVpbGRlci5yZXR1cm5pbmdBbGwoKS5leGVjdXRlVGFrZUZpcnN0KCk7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtVmFsdWVUb0RCKHZhbHVlLCBtb2RlbCwgZmllbGQpIHtcbiAgICAgIGlmIChmaWVsZCA9PT0gXCJpZFwiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgdHlwZSA9IFwic3FsaXRlXCIgfSA9IGNvbmZpZyB8fCB7fTtcbiAgICAgIGxldCBmID0gc2NoZW1hW21vZGVsXT8uZmllbGRzW2ZpZWxkXTtcbiAgICAgIGlmICghZikge1xuICAgICAgICBmID0gT2JqZWN0LnZhbHVlcyhzY2hlbWEpLmZpbmQoKGYyKSA9PiBmMi5tb2RlbE5hbWUgPT09IG1vZGVsKTtcbiAgICAgIH1cbiAgICAgIGlmIChmLnR5cGUgPT09IFwiYm9vbGVhblwiICYmICh0eXBlID09PSBcInNxbGl0ZVwiIHx8IHR5cGUgPT09IFwibXNzcWxcIikgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPyAxIDogMDtcbiAgICAgIH1cbiAgICAgIGlmIChmLnR5cGUgPT09IFwiZGF0ZVwiICYmIHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gdHlwZSA9PT0gXCJzcWxpdGVcIiA/IHZhbHVlLnRvSVNPU3RyaW5nKCkgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29udmVydFdoZXJlQ2xhdXNlKG1vZGVsLCB3KSB7XG4gICAgICBpZiAoIXcpXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYW5kOiBudWxsLFxuICAgICAgICAgIG9yOiBudWxsXG4gICAgICAgIH07XG4gICAgICBjb25zdCBjb25kaXRpb25zID0ge1xuICAgICAgICBhbmQ6IFtdLFxuICAgICAgICBvcjogW11cbiAgICAgIH07XG4gICAgICB3LmZvckVhY2goKGNvbmRpdGlvbikgPT4ge1xuICAgICAgICBsZXQge1xuICAgICAgICAgIGZpZWxkOiBfZmllbGQsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgb3BlcmF0b3IgPSBcIj1cIixcbiAgICAgICAgICBjb25uZWN0b3IgPSBcIkFORFwiXG4gICAgICAgIH0gPSBjb25kaXRpb247XG4gICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0RmllbGROYW1lKHsgbW9kZWwsIGZpZWxkOiBfZmllbGQgfSk7XG4gICAgICAgIHZhbHVlID0gdHJhbnNmb3JtVmFsdWVUb0RCKHZhbHVlLCBtb2RlbCwgX2ZpZWxkKTtcbiAgICAgICAgY29uc3QgZXhwciA9IChlYikgPT4ge1xuICAgICAgICAgIGlmIChvcGVyYXRvci50b0xvd2VyQ2FzZSgpID09PSBcImluXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBlYihmaWVsZCwgXCJpblwiLCBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcGVyYXRvciA9PT0gXCJjb250YWluc1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gZWIoZmllbGQsIFwibGlrZVwiLCBgJSR7dmFsdWV9JWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3BlcmF0b3IgPT09IFwic3RhcnRzX3dpdGhcIikge1xuICAgICAgICAgICAgcmV0dXJuIGViKGZpZWxkLCBcImxpa2VcIiwgYCR7dmFsdWV9JWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3BlcmF0b3IgPT09IFwiZW5kc193aXRoXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBlYihmaWVsZCwgXCJsaWtlXCIsIGAlJHt2YWx1ZX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wZXJhdG9yID09PSBcImVxXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBlYihmaWVsZCwgXCI9XCIsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wZXJhdG9yID09PSBcIm5lXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBlYihmaWVsZCwgXCI8PlwiLCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcGVyYXRvciA9PT0gXCJndFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gZWIoZmllbGQsIFwiPlwiLCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcGVyYXRvciA9PT0gXCJndGVcIikge1xuICAgICAgICAgICAgcmV0dXJuIGViKGZpZWxkLCBcIj49XCIsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wZXJhdG9yID09PSBcImx0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBlYihmaWVsZCwgXCI8XCIsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wZXJhdG9yID09PSBcImx0ZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gZWIoZmllbGQsIFwiPD1cIiwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZWIoZmllbGQsIG9wZXJhdG9yLCB2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChjb25uZWN0b3IgPT09IFwiT1JcIikge1xuICAgICAgICAgIGNvbmRpdGlvbnMub3IucHVzaChleHByKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25kaXRpb25zLmFuZC5wdXNoKGV4cHIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFuZDogY29uZGl0aW9ucy5hbmQubGVuZ3RoID8gY29uZGl0aW9ucy5hbmQgOiBudWxsLFxuICAgICAgICBvcjogY29uZGl0aW9ucy5vci5sZW5ndGggPyBjb25kaXRpb25zLm9yIDogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGFzeW5jIGNyZWF0ZSh7IGRhdGEsIG1vZGVsIH0pIHtcbiAgICAgICAgY29uc3QgYnVpbGRlciA9IGRiLmluc2VydEludG8obW9kZWwpLnZhbHVlcyhkYXRhKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHdpdGhSZXR1cm5pbmcoZGF0YSwgYnVpbGRlciwgbW9kZWwsIFtdKTtcbiAgICAgIH0sXG4gICAgICBhc3luYyBmaW5kT25lKHsgbW9kZWwsIHdoZXJlLCBzZWxlY3QgfSkge1xuICAgICAgICBjb25zdCB7IGFuZCwgb3IgfSA9IGNvbnZlcnRXaGVyZUNsYXVzZShtb2RlbCwgd2hlcmUpO1xuICAgICAgICBsZXQgcXVlcnkgPSBkYi5zZWxlY3RGcm9tKG1vZGVsKS5zZWxlY3RBbGwoKTtcbiAgICAgICAgaWYgKGFuZCkge1xuICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkud2hlcmUoKGViKSA9PiBlYi5hbmQoYW5kLm1hcCgoZXhwcikgPT4gZXhwcihlYikpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yKSB7XG4gICAgICAgICAgcXVlcnkgPSBxdWVyeS53aGVyZSgoZWIpID0+IGViLm9yKG9yLm1hcCgoZXhwcikgPT4gZXhwcihlYikpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcXVlcnkuZXhlY3V0ZVRha2VGaXJzdCgpO1xuICAgICAgICBpZiAoIXJlcykgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9LFxuICAgICAgYXN5bmMgZmluZE1hbnkoeyBtb2RlbCwgd2hlcmUsIGxpbWl0LCBvZmZzZXQsIHNvcnRCeSB9KSB7XG4gICAgICAgIGNvbnN0IHsgYW5kLCBvciB9ID0gY29udmVydFdoZXJlQ2xhdXNlKG1vZGVsLCB3aGVyZSk7XG4gICAgICAgIGxldCBxdWVyeSA9IGRiLnNlbGVjdEZyb20obW9kZWwpO1xuICAgICAgICBpZiAoYW5kKSB7XG4gICAgICAgICAgcXVlcnkgPSBxdWVyeS53aGVyZSgoZWIpID0+IGViLmFuZChhbmQubWFwKChleHByKSA9PiBleHByKGViKSkpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3IpIHtcbiAgICAgICAgICBxdWVyeSA9IHF1ZXJ5LndoZXJlKChlYikgPT4gZWIub3Iob3IubWFwKChleHByKSA9PiBleHByKGViKSkpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnPy50eXBlID09PSBcIm1zc3FsXCIpIHtcbiAgICAgICAgICBpZiAoIW9mZnNldCkge1xuICAgICAgICAgICAgcXVlcnkgPSBxdWVyeS50b3AobGltaXQgfHwgMTAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcXVlcnkgPSBxdWVyeS5saW1pdChsaW1pdCB8fCAxMDApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3J0QnkpIHtcbiAgICAgICAgICBxdWVyeSA9IHF1ZXJ5Lm9yZGVyQnkoXG4gICAgICAgICAgICBnZXRGaWVsZE5hbWUoeyBtb2RlbCwgZmllbGQ6IHNvcnRCeS5maWVsZCB9KSxcbiAgICAgICAgICAgIHNvcnRCeS5kaXJlY3Rpb25cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQpIHtcbiAgICAgICAgICBpZiAoY29uZmlnPy50eXBlID09PSBcIm1zc3FsXCIpIHtcbiAgICAgICAgICAgIGlmICghc29ydEJ5KSB7XG4gICAgICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkub3JkZXJCeShnZXRGaWVsZE5hbWUoeyBtb2RlbCwgZmllbGQ6IFwiaWRcIiB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWVyeSA9IHF1ZXJ5Lm9mZnNldChvZmZzZXQpLmZldGNoKGxpbWl0IHx8IDEwMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkub2Zmc2V0KG9mZnNldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHF1ZXJ5LnNlbGVjdEFsbCgpLmV4ZWN1dGUoKTtcbiAgICAgICAgaWYgKCFyZXMpIHJldHVybiBbXTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0sXG4gICAgICBhc3luYyB1cGRhdGUoeyBtb2RlbCwgd2hlcmUsIHVwZGF0ZTogdmFsdWVzIH0pIHtcbiAgICAgICAgY29uc3QgeyBhbmQsIG9yIH0gPSBjb252ZXJ0V2hlcmVDbGF1c2UobW9kZWwsIHdoZXJlKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gZGIudXBkYXRlVGFibGUobW9kZWwpLnNldCh2YWx1ZXMpO1xuICAgICAgICBpZiAoYW5kKSB7XG4gICAgICAgICAgcXVlcnkgPSBxdWVyeS53aGVyZSgoZWIpID0+IGViLmFuZChhbmQubWFwKChleHByKSA9PiBleHByKGViKSkpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3IpIHtcbiAgICAgICAgICBxdWVyeSA9IHF1ZXJ5LndoZXJlKChlYikgPT4gZWIub3Iob3IubWFwKChleHByKSA9PiBleHByKGViKSkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgd2l0aFJldHVybmluZyh2YWx1ZXMsIHF1ZXJ5LCBtb2RlbCwgd2hlcmUpO1xuICAgICAgfSxcbiAgICAgIGFzeW5jIHVwZGF0ZU1hbnkoeyBtb2RlbCwgd2hlcmUsIHVwZGF0ZTogdmFsdWVzIH0pIHtcbiAgICAgICAgY29uc3QgeyBhbmQsIG9yIH0gPSBjb252ZXJ0V2hlcmVDbGF1c2UobW9kZWwsIHdoZXJlKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gZGIudXBkYXRlVGFibGUobW9kZWwpLnNldCh2YWx1ZXMpO1xuICAgICAgICBpZiAoYW5kKSB7XG4gICAgICAgICAgcXVlcnkgPSBxdWVyeS53aGVyZSgoZWIpID0+IGViLmFuZChhbmQubWFwKChleHByKSA9PiBleHByKGViKSkpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3IpIHtcbiAgICAgICAgICBxdWVyeSA9IHF1ZXJ5LndoZXJlKChlYikgPT4gZWIub3Iob3IubWFwKChleHByKSA9PiBleHByKGViKSkpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBxdWVyeS5leGVjdXRlKCk7XG4gICAgICAgIHJldHVybiByZXMubGVuZ3RoO1xuICAgICAgfSxcbiAgICAgIGFzeW5jIGNvdW50KHsgbW9kZWwsIHdoZXJlIH0pIHtcbiAgICAgICAgY29uc3QgeyBhbmQsIG9yIH0gPSBjb252ZXJ0V2hlcmVDbGF1c2UobW9kZWwsIHdoZXJlKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gZGIuc2VsZWN0RnJvbShtb2RlbCkuc2VsZWN0KGRiLmZuLmNvdW50KFwiaWRcIikuYXMoXCJjb3VudFwiKSk7XG4gICAgICAgIGlmIChhbmQpIHtcbiAgICAgICAgICBxdWVyeSA9IHF1ZXJ5LndoZXJlKChlYikgPT4gZWIuYW5kKGFuZC5tYXAoKGV4cHIpID0+IGV4cHIoZWIpKSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcikge1xuICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkud2hlcmUoKGViKSA9PiBlYi5vcihvci5tYXAoKGV4cHIpID0+IGV4cHIoZWIpKSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHF1ZXJ5LmV4ZWN1dGUoKTtcbiAgICAgICAgcmV0dXJuIHJlc1swXS5jb3VudDtcbiAgICAgIH0sXG4gICAgICBhc3luYyBkZWxldGUoeyBtb2RlbCwgd2hlcmUgfSkge1xuICAgICAgICBjb25zdCB7IGFuZCwgb3IgfSA9IGNvbnZlcnRXaGVyZUNsYXVzZShtb2RlbCwgd2hlcmUpO1xuICAgICAgICBsZXQgcXVlcnkgPSBkYi5kZWxldGVGcm9tKG1vZGVsKTtcbiAgICAgICAgaWYgKGFuZCkge1xuICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkud2hlcmUoKGViKSA9PiBlYi5hbmQoYW5kLm1hcCgoZXhwcikgPT4gZXhwcihlYikpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yKSB7XG4gICAgICAgICAgcXVlcnkgPSBxdWVyeS53aGVyZSgoZWIpID0+IGViLm9yKG9yLm1hcCgoZXhwcikgPT4gZXhwcihlYikpKSk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgcXVlcnkuZXhlY3V0ZSgpO1xuICAgICAgfSxcbiAgICAgIGFzeW5jIGRlbGV0ZU1hbnkoeyBtb2RlbCwgd2hlcmUgfSkge1xuICAgICAgICBjb25zdCB7IGFuZCwgb3IgfSA9IGNvbnZlcnRXaGVyZUNsYXVzZShtb2RlbCwgd2hlcmUpO1xuICAgICAgICBsZXQgcXVlcnkgPSBkYi5kZWxldGVGcm9tKG1vZGVsKTtcbiAgICAgICAgaWYgKGFuZCkge1xuICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkud2hlcmUoKGViKSA9PiBlYi5hbmQoYW5kLm1hcCgoZXhwcikgPT4gZXhwcihlYikpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yKSB7XG4gICAgICAgICAgcXVlcnkgPSBxdWVyeS53aGVyZSgoZWIpID0+IGViLm9yKG9yLm1hcCgoZXhwcikgPT4gZXhwcihlYikpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChhd2FpdCBxdWVyeS5leGVjdXRlKCkpLmxlbmd0aDtcbiAgICAgIH0sXG4gICAgICBvcHRpb25zOiBjb25maWdcbiAgICB9O1xuICB9XG59KTtcblxuZXhwb3J0IHsgY3JlYXRlS3lzZWx5QWRhcHRlciBhcyBjLCBreXNlbHlBZGFwdGVyIGFzIGsgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.C4F0dkzb.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getDate)\n/* harmony export */ });\nconst getDate = (span, unit = \"ms\") => {\n  return new Date(Date.now() + (unit === \"sec\" ? span * 1e3 : span));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQ1c2RDllU3gubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRXdCIiwic291cmNlcyI6WyIvVXNlcnMvZGF2aWxpbWFzL0RvY3VtZW50cy9EYXZpL2VzdHVkb3MvcmVhY3QvYmV3ZWFyL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5DVzZEOWVTeC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZ2V0RGF0ZSA9IChzcGFuLCB1bml0ID0gXCJtc1wiKSA9PiB7XG4gIHJldHVybiBuZXcgRGF0ZShEYXRlLm5vdygpICsgKHVuaXQgPT09IFwic2VjXCIgPyBzcGFuICogMWUzIDogc3BhbikpO1xufTtcblxuZXhwb3J0IHsgZ2V0RGF0ZSBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ accountSchema),\n/* harmony export */   b: () => (/* binding */ parseUserOutput),\n/* harmony export */   c: () => (/* binding */ parseAccountOutput),\n/* harmony export */   d: () => (/* binding */ parseSessionOutput),\n/* harmony export */   e: () => (/* binding */ parseInputData),\n/* harmony export */   f: () => (/* binding */ parseUserInput),\n/* harmony export */   g: () => (/* binding */ getAllFields),\n/* harmony export */   h: () => (/* binding */ parseAdditionalUserInput),\n/* harmony export */   i: () => (/* binding */ parseAccountInput),\n/* harmony export */   j: () => (/* binding */ parseSessionInput),\n/* harmony export */   m: () => (/* binding */ mergeSchema),\n/* harmony export */   p: () => (/* binding */ parseOutputData),\n/* harmony export */   s: () => (/* binding */ sessionSchema),\n/* harmony export */   u: () => (/* binding */ userSchema),\n/* harmony export */   v: () => (/* binding */ verificationSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/types.js\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n\n\n\nconst accountSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_1__.string(),\n  providerId: zod__WEBPACK_IMPORTED_MODULE_1__.string(),\n  accountId: zod__WEBPACK_IMPORTED_MODULE_1__.string(),\n  userId: zod__WEBPACK_IMPORTED_MODULE_1__.coerce.string(),\n  accessToken: zod__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  refreshToken: zod__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  idToken: zod__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  /**\n   * Access token expires at\n   */\n  accessTokenExpiresAt: zod__WEBPACK_IMPORTED_MODULE_1__.date().nullish(),\n  /**\n   * Refresh token expires at\n   */\n  refreshTokenExpiresAt: zod__WEBPACK_IMPORTED_MODULE_1__.date().nullish(),\n  /**\n   * The scopes that the user has authorized\n   */\n  scope: zod__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  /**\n   * Password is only stored in the credential provider\n   */\n  password: zod__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date())\n});\nconst userSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_1__.string(),\n  email: zod__WEBPACK_IMPORTED_MODULE_1__.string().transform((val) => val.toLowerCase()),\n  emailVerified: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().default(false),\n  name: zod__WEBPACK_IMPORTED_MODULE_1__.string(),\n  image: zod__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date())\n});\nconst sessionSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_1__.string(),\n  userId: zod__WEBPACK_IMPORTED_MODULE_1__.coerce.string(),\n  expiresAt: zod__WEBPACK_IMPORTED_MODULE_1__.date(),\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  token: zod__WEBPACK_IMPORTED_MODULE_1__.string(),\n  ipAddress: zod__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  userAgent: zod__WEBPACK_IMPORTED_MODULE_1__.string().nullish()\n});\nconst verificationSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_1__.string(),\n  value: zod__WEBPACK_IMPORTED_MODULE_1__.string(),\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  expiresAt: zod__WEBPACK_IMPORTED_MODULE_1__.date(),\n  identifier: zod__WEBPACK_IMPORTED_MODULE_1__.string()\n});\nfunction parseOutputData(data, schema) {\n  const fields = schema.fields;\n  const parsedData = {};\n  for (const key in data) {\n    const field = fields[key];\n    if (!field) {\n      parsedData[key] = data[key];\n      continue;\n    }\n    if (field.returned === false) {\n      continue;\n    }\n    parsedData[key] = data[key];\n  }\n  return parsedData;\n}\nfunction getAllFields(options, table) {\n  let schema = {\n    ...table === \"user\" ? options.user?.additionalFields : {},\n    ...table === \"session\" ? options.session?.additionalFields : {}\n  };\n  for (const plugin of options.plugins || []) {\n    if (plugin.schema && plugin.schema[table]) {\n      schema = {\n        ...schema,\n        ...plugin.schema[table].fields\n      };\n    }\n  }\n  return schema;\n}\nfunction parseUserOutput(options, user) {\n  const schema = getAllFields(options, \"user\");\n  return parseOutputData(user, { fields: schema });\n}\nfunction parseAccountOutput(options, account) {\n  const schema = getAllFields(options, \"account\");\n  return parseOutputData(account, { fields: schema });\n}\nfunction parseSessionOutput(options, session) {\n  const schema = getAllFields(options, \"session\");\n  return parseOutputData(session, { fields: schema });\n}\nfunction parseInputData(data, schema) {\n  const action = schema.action || \"create\";\n  const fields = schema.fields;\n  const parsedData = {};\n  for (const key in fields) {\n    if (key in data) {\n      if (fields[key].input === false) {\n        if (fields[key].defaultValue) {\n          parsedData[key] = fields[key].defaultValue;\n          continue;\n        }\n        continue;\n      }\n      if (fields[key].validator?.input && data[key] !== void 0) {\n        parsedData[key] = fields[key].validator.input.parse(data[key]);\n        continue;\n      }\n      if (fields[key].transform?.input && data[key] !== void 0) {\n        parsedData[key] = fields[key].transform?.input(data[key]);\n        continue;\n      }\n      parsedData[key] = data[key];\n      continue;\n    }\n    if (fields[key].defaultValue && action === \"create\") {\n      parsedData[key] = fields[key].defaultValue;\n      continue;\n    }\n    if (fields[key].required && action === \"create\") {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `${key} is required`\n      });\n    }\n  }\n  return parsedData;\n}\nfunction parseUserInput(options, user, action) {\n  const schema = getAllFields(options, \"user\");\n  return parseInputData(user || {}, { fields: schema, action });\n}\nfunction parseAdditionalUserInput(options, user) {\n  const schema = getAllFields(options, \"user\");\n  return parseInputData(user || {}, { fields: schema });\n}\nfunction parseAccountInput(options, account) {\n  const schema = getAllFields(options, \"account\");\n  return parseInputData(account, { fields: schema });\n}\nfunction parseSessionInput(options, session) {\n  const schema = getAllFields(options, \"session\");\n  return parseInputData(session, { fields: schema });\n}\nfunction mergeSchema(schema, newSchema) {\n  if (!newSchema) {\n    return schema;\n  }\n  for (const table in newSchema) {\n    const newModelName = newSchema[table]?.modelName;\n    if (newModelName) {\n      schema[table].modelName = newModelName;\n    }\n    for (const field in schema[table].fields) {\n      const newField = newSchema[table]?.fields?.[field];\n      if (!newField) {\n        continue;\n      }\n      schema[table].fields[field].fieldName = newField;\n    }\n  }\n  return schema;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ levels),\n/* harmony export */   c: () => (/* binding */ createLogger),\n/* harmony export */   l: () => (/* binding */ logger),\n/* harmony export */   s: () => (/* binding */ shouldPublishLog)\n/* harmony export */ });\nconst levels = [\"info\", \"success\", \"warn\", \"error\", \"debug\"];\nfunction shouldPublishLog(currentLogLevel, logLevel) {\n  return levels.indexOf(logLevel) <= levels.indexOf(currentLogLevel);\n}\nconst colors = {\n  reset: \"\\x1B[0m\",\n  bright: \"\\x1B[1m\",\n  dim: \"\\x1B[2m\",\n  fg: {\n    red: \"\\x1B[31m\",\n    green: \"\\x1B[32m\",\n    yellow: \"\\x1B[33m\",\n    blue: \"\\x1B[34m\",\n    magenta: \"\\x1B[35m\"}};\nconst levelColors = {\n  info: colors.fg.blue,\n  success: colors.fg.green,\n  warn: colors.fg.yellow,\n  error: colors.fg.red,\n  debug: colors.fg.magenta\n};\nconst formatMessage = (level, message) => {\n  const timestamp = (/* @__PURE__ */ new Date()).toISOString();\n  return `${colors.dim}${timestamp}${colors.reset} ${levelColors[level]}${level.toUpperCase()}${colors.reset} ${colors.bright}[Better Auth]:${colors.reset} ${message}`;\n};\nconst createLogger = (options) => {\n  const enabled = options?.disabled !== true;\n  const logLevel = options?.level ?? \"error\";\n  const LogFunc = (level, message, args = []) => {\n    if (!enabled || !shouldPublishLog(logLevel, level)) {\n      return;\n    }\n    const formattedMessage = formatMessage(level, message);\n    if (!options || typeof options.log !== \"function\") {\n      if (level === \"error\") {\n        console.error(formattedMessage, ...args);\n      } else if (level === \"warn\") {\n        console.warn(formattedMessage, ...args);\n      } else {\n        console.log(formattedMessage, ...args);\n      }\n      return;\n    }\n    options.log(level === \"success\" ? \"info\" : level, message, ...args);\n  };\n  return Object.fromEntries(\n    levels.map((level) => [\n      level,\n      (...[message, ...args]) => LogFunc(level, message, args)\n    ])\n  );\n};\nconst logger = createLogger();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQ3F5a2o4MkoubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxXQUFXLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsRUFBRSxjQUFjLEVBQUUsY0FBYyxnQkFBZ0IsY0FBYyxFQUFFLFFBQVE7QUFDdEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRThFIiwic291cmNlcyI6WyIvVXNlcnMvZGF2aWxpbWFzL0RvY3VtZW50cy9EYXZpL2VzdHVkb3MvcmVhY3QvYmV3ZWFyL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5DcXlrajgySi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbGV2ZWxzID0gW1wiaW5mb1wiLCBcInN1Y2Nlc3NcIiwgXCJ3YXJuXCIsIFwiZXJyb3JcIiwgXCJkZWJ1Z1wiXTtcbmZ1bmN0aW9uIHNob3VsZFB1Ymxpc2hMb2coY3VycmVudExvZ0xldmVsLCBsb2dMZXZlbCkge1xuICByZXR1cm4gbGV2ZWxzLmluZGV4T2YobG9nTGV2ZWwpIDw9IGxldmVscy5pbmRleE9mKGN1cnJlbnRMb2dMZXZlbCk7XG59XG5jb25zdCBjb2xvcnMgPSB7XG4gIHJlc2V0OiBcIlxceDFCWzBtXCIsXG4gIGJyaWdodDogXCJcXHgxQlsxbVwiLFxuICBkaW06IFwiXFx4MUJbMm1cIixcbiAgZmc6IHtcbiAgICByZWQ6IFwiXFx4MUJbMzFtXCIsXG4gICAgZ3JlZW46IFwiXFx4MUJbMzJtXCIsXG4gICAgeWVsbG93OiBcIlxceDFCWzMzbVwiLFxuICAgIGJsdWU6IFwiXFx4MUJbMzRtXCIsXG4gICAgbWFnZW50YTogXCJcXHgxQlszNW1cIn19O1xuY29uc3QgbGV2ZWxDb2xvcnMgPSB7XG4gIGluZm86IGNvbG9ycy5mZy5ibHVlLFxuICBzdWNjZXNzOiBjb2xvcnMuZmcuZ3JlZW4sXG4gIHdhcm46IGNvbG9ycy5mZy55ZWxsb3csXG4gIGVycm9yOiBjb2xvcnMuZmcucmVkLFxuICBkZWJ1ZzogY29sb3JzLmZnLm1hZ2VudGFcbn07XG5jb25zdCBmb3JtYXRNZXNzYWdlID0gKGxldmVsLCBtZXNzYWdlKSA9PiB7XG4gIGNvbnN0IHRpbWVzdGFtcCA9ICgvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSkudG9JU09TdHJpbmcoKTtcbiAgcmV0dXJuIGAke2NvbG9ycy5kaW19JHt0aW1lc3RhbXB9JHtjb2xvcnMucmVzZXR9ICR7bGV2ZWxDb2xvcnNbbGV2ZWxdfSR7bGV2ZWwudG9VcHBlckNhc2UoKX0ke2NvbG9ycy5yZXNldH0gJHtjb2xvcnMuYnJpZ2h0fVtCZXR0ZXIgQXV0aF06JHtjb2xvcnMucmVzZXR9ICR7bWVzc2FnZX1gO1xufTtcbmNvbnN0IGNyZWF0ZUxvZ2dlciA9IChvcHRpb25zKSA9PiB7XG4gIGNvbnN0IGVuYWJsZWQgPSBvcHRpb25zPy5kaXNhYmxlZCAhPT0gdHJ1ZTtcbiAgY29uc3QgbG9nTGV2ZWwgPSBvcHRpb25zPy5sZXZlbCA/PyBcImVycm9yXCI7XG4gIGNvbnN0IExvZ0Z1bmMgPSAobGV2ZWwsIG1lc3NhZ2UsIGFyZ3MgPSBbXSkgPT4ge1xuICAgIGlmICghZW5hYmxlZCB8fCAhc2hvdWxkUHVibGlzaExvZyhsb2dMZXZlbCwgbGV2ZWwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGZvcm1hdHRlZE1lc3NhZ2UgPSBmb3JtYXRNZXNzYWdlKGxldmVsLCBtZXNzYWdlKTtcbiAgICBpZiAoIW9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMubG9nICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmIChsZXZlbCA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0dGVkTWVzc2FnZSwgLi4uYXJncyk7XG4gICAgICB9IGVsc2UgaWYgKGxldmVsID09PSBcIndhcm5cIikge1xuICAgICAgICBjb25zb2xlLndhcm4oZm9ybWF0dGVkTWVzc2FnZSwgLi4uYXJncyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhmb3JtYXR0ZWRNZXNzYWdlLCAuLi5hcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb3B0aW9ucy5sb2cobGV2ZWwgPT09IFwic3VjY2Vzc1wiID8gXCJpbmZvXCIgOiBsZXZlbCwgbWVzc2FnZSwgLi4uYXJncyk7XG4gIH07XG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgbGV2ZWxzLm1hcCgobGV2ZWwpID0+IFtcbiAgICAgIGxldmVsLFxuICAgICAgKC4uLlttZXNzYWdlLCAuLi5hcmdzXSkgPT4gTG9nRnVuYyhsZXZlbCwgbWVzc2FnZSwgYXJncylcbiAgICBdKVxuICApO1xufTtcbmNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcigpO1xuXG5leHBvcnQgeyBsZXZlbHMgYXMgYSwgY3JlYXRlTG9nZ2VyIGFzIGMsIGxvZ2dlciBhcyBsLCBzaG91bGRQdWJsaXNoTG9nIGFzIHMgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ capitalizeFirstLetter)\n/* harmony export */ });\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRC0yQ21Fd3oubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRXNDIiwic291cmNlcyI6WyIvVXNlcnMvZGF2aWxpbWFzL0RvY3VtZW50cy9EYXZpL2VzdHVkb3MvcmVhY3QvYmV3ZWFyL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5ELTJDbUV3ei5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxuXG5leHBvcnQgeyBjYXBpdGFsaXplRmlyc3RMZXR0ZXIgYXMgYyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DDEbWX-S.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DDEbWX-S.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s: () => (/* binding */ signJWT)\n/* harmony export */ });\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/jwt/sign.js\");\n\n\nasync function signJWT(payload, secret, expiresIn = 3600) {\n  const jwt = await new jose__WEBPACK_IMPORTED_MODULE_0__.SignJWT(payload).setProtectedHeader({ alg: \"HS256\" }).setIssuedAt().setExpirationTime(Math.floor(Date.now() / 1e3) + expiresIn).sign(new TextEncoder().encode(secret));\n  return jwt;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRERFYldYLVMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStCOztBQUUvQjtBQUNBLHdCQUF3Qix5Q0FBTywrQkFBK0IsY0FBYztBQUM1RTtBQUNBOztBQUV3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlsaW1hcy9Eb2N1bWVudHMvRGF2aS9lc3R1ZG9zL3JlYWN0L2Jld2Vhci9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRERFYldYLVMubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpZ25KV1QgfSBmcm9tICdqb3NlJztcblxuYXN5bmMgZnVuY3Rpb24gc2lnbkpXVChwYXlsb2FkLCBzZWNyZXQsIGV4cGlyZXNJbiA9IDM2MDApIHtcbiAgY29uc3Qgand0ID0gYXdhaXQgbmV3IFNpZ25KV1QocGF5bG9hZCkuc2V0UHJvdGVjdGVkSGVhZGVyKHsgYWxnOiBcIkhTMjU2XCIgfSkuc2V0SXNzdWVkQXQoKS5zZXRFeHBpcmF0aW9uVGltZShNYXRoLmZsb29yKERhdGUubm93KCkgLyAxZTMpICsgZXhwaXJlc0luKS5zaWduKG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzZWNyZXQpKTtcbiAgcmV0dXJuIGp3dDtcbn1cblxuZXhwb3J0IHsgc2lnbkpXVCBhcyBzIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DDEbWX-S.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DFIAchwv.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DFIAchwv.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createAdapter)\n/* harmony export */ });\n/* harmony import */ var _better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.tB5eU6EY.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.DORkW_Ge.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction withApplyDefault(value, field, action) {\n  if (action === \"update\") {\n    return value;\n  }\n  if (value === void 0 || value === null) {\n    if (field.defaultValue !== void 0) {\n      if (typeof field.defaultValue === \"function\") {\n        return field.defaultValue();\n      }\n      return field.defaultValue;\n    }\n  }\n  return value;\n}\n\nlet debugLogs = [];\nlet transactionId = -1;\nconst colors = {\n  reset: \"\\x1B[0m\",\n  bright: \"\\x1B[1m\",\n  dim: \"\\x1B[2m\",\n  fg: {\n    yellow: \"\\x1B[33m\",\n    magenta: \"\\x1B[35m\"},\n  bg: {\n    black: \"\\x1B[40m\"}\n};\nconst createAdapter = ({\n  adapter,\n  config: cfg\n}) => (options) => {\n  const config = {\n    ...cfg,\n    supportsBooleans: cfg.supportsBooleans ?? true,\n    supportsDates: cfg.supportsDates ?? true,\n    supportsJSON: cfg.supportsJSON ?? false,\n    adapterName: cfg.adapterName ?? cfg.adapterId,\n    supportsNumericIds: cfg.supportsNumericIds ?? true\n  };\n  if (options.advanced?.database?.useNumberId === true && config.supportsNumericIds === false) {\n    throw new Error(\n      `[${config.adapterName}] Your database or database adapter does not support numeric ids. Please disable \"useNumberId\" in your config.`\n    );\n  }\n  const schema = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(options);\n  const getDefaultFieldName = ({\n    field,\n    model: unsafe_model\n  }) => {\n    if (field === \"id\" || field === \"_id\") {\n      return \"id\";\n    }\n    const model = getDefaultModelName(unsafe_model);\n    let f = schema[model]?.fields[field];\n    if (!f) {\n      f = Object.values(schema[model]?.fields).find(\n        (f2) => f2.fieldName === field\n      );\n    }\n    if (!f) {\n      debugLog(`Field ${field} not found in model ${model}`);\n      debugLog(`Schema:`, schema);\n      throw new Error(`Field ${field} not found in model ${model}`);\n    }\n    return field;\n  };\n  const getDefaultModelName = (model) => {\n    if (config.usePlural && model.charAt(model.length - 1) === \"s\") {\n      let pluralessModel = model.slice(0, -1);\n      let m2 = schema[pluralessModel] ? pluralessModel : void 0;\n      if (!m2) {\n        m2 = Object.entries(schema).find(\n          ([_, f]) => f.modelName === pluralessModel\n        )?.[0];\n      }\n      if (m2) {\n        return m2;\n      }\n    }\n    let m = schema[model] ? model : void 0;\n    if (!m) {\n      m = Object.entries(schema).find(([_, f]) => f.modelName === model)?.[0];\n    }\n    if (!m) {\n      debugLog(`Model \"${model}\" not found in schema`);\n      debugLog(`Schema:`, schema);\n      throw new Error(`Model \"${model}\" not found in schema`);\n    }\n    return m;\n  };\n  const getModelName = (model) => {\n    const defaultModelKey = getDefaultModelName(model);\n    const usePlural = config && config.usePlural;\n    const useCustomModelName = schema && schema[defaultModelKey] && schema[defaultModelKey].modelName !== model;\n    if (useCustomModelName) {\n      return usePlural ? `${schema[defaultModelKey].modelName}s` : schema[defaultModelKey].modelName;\n    }\n    return usePlural ? `${model}s` : model;\n  };\n  function getFieldName({\n    model: model_name,\n    field: field_name\n  }) {\n    const model = getDefaultModelName(model_name);\n    const field = getDefaultFieldName({ model, field: field_name });\n    return schema[model]?.fields[field]?.fieldName || field;\n  }\n  const debugLog = (...args) => {\n    if (config.debugLogs === true || typeof config.debugLogs === \"object\") {\n      if (typeof config.debugLogs === \"object\" && \"isRunningAdapterTests\" in config.debugLogs) {\n        if (config.debugLogs.isRunningAdapterTests) {\n          args.shift();\n          debugLogs.push(args);\n        }\n        return;\n      }\n      if (typeof config.debugLogs === \"object\" && config.debugLogs.logCondition && !config.debugLogs.logCondition?.()) {\n        return;\n      }\n      if (typeof args[0] === \"object\" && \"method\" in args[0]) {\n        const method = args.shift().method;\n        if (typeof config.debugLogs === \"object\") {\n          if (method === \"create\" && !config.debugLogs.create) {\n            return;\n          } else if (method === \"update\" && !config.debugLogs.update) {\n            return;\n          } else if (method === \"updateMany\" && !config.debugLogs.updateMany) {\n            return;\n          } else if (method === \"findOne\" && !config.debugLogs.findOne) {\n            return;\n          } else if (method === \"findMany\" && !config.debugLogs.findMany) {\n            return;\n          } else if (method === \"delete\" && !config.debugLogs.delete) {\n            return;\n          } else if (method === \"deleteMany\" && !config.debugLogs.deleteMany) {\n            return;\n          } else if (method === \"count\" && !config.debugLogs.count) {\n            return;\n          }\n        }\n        _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_9__.l.info(`[${config.adapterName}]`, ...args);\n      } else {\n        _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_9__.l.info(`[${config.adapterName}]`, ...args);\n      }\n    }\n  };\n  const idField = ({\n    customModelName,\n    forceAllowId\n  }) => {\n    const shouldGenerateId = !config.disableIdGeneration && !options.advanced?.database?.useNumberId && !forceAllowId;\n    const model = getDefaultModelName(customModelName ?? \"id\");\n    return {\n      type: options.advanced?.database?.useNumberId ? \"number\" : \"string\",\n      required: shouldGenerateId ? true : false,\n      ...shouldGenerateId ? {\n        defaultValue() {\n          if (config.disableIdGeneration) return void 0;\n          const useNumberId = options.advanced?.database?.useNumberId;\n          let generateId$1 = options.advanced?.database?.generateId;\n          if (options.advanced?.generateId !== void 0) {\n            _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_9__.l.warn(\n              \"Your Better Auth config includes advanced.generateId which is deprecated. Please use advanced.database.generateId instead. This will be removed in future releases.\"\n            );\n            generateId$1 = options.advanced?.generateId;\n          }\n          if (generateId$1 === false || useNumberId) return void 0;\n          if (generateId$1) {\n            return generateId$1({\n              model\n            });\n          }\n          if (config.customIdGenerator) {\n            return config.customIdGenerator({ model });\n          }\n          return (0,_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_2__.g)();\n        }\n      } : {}\n    };\n  };\n  const getFieldAttributes = ({\n    model,\n    field\n  }) => {\n    const defaultModelName = getDefaultModelName(model);\n    const defaultFieldName = getDefaultFieldName({\n      field,\n      model\n    });\n    const fields = schema[defaultModelName].fields;\n    fields.id = idField({ customModelName: defaultModelName });\n    return fields[defaultFieldName];\n  };\n  const adapterInstance = adapter({\n    options,\n    schema,\n    debugLog,\n    getFieldName,\n    getModelName,\n    getDefaultModelName,\n    getDefaultFieldName,\n    getFieldAttributes\n  });\n  const transformInput = async (data, unsafe_model, action, forceAllowId) => {\n    const transformedData = {};\n    const fields = schema[unsafe_model].fields;\n    const newMappedKeys = config.mapKeysTransformInput ?? {};\n    if (!config.disableIdGeneration && !options.advanced?.database?.useNumberId) {\n      fields.id = idField({\n        customModelName: unsafe_model,\n        forceAllowId: forceAllowId && \"id\" in data\n      });\n    }\n    for (const field in fields) {\n      const value = data[field];\n      const fieldAttributes = fields[field];\n      let newFieldName = newMappedKeys[field] || fields[field].fieldName || field;\n      if (value === void 0 && (!fieldAttributes.defaultValue && !fieldAttributes.transform?.input || action === \"update\")) {\n        continue;\n      }\n      let newValue = withApplyDefault(value, fieldAttributes, action);\n      if (fieldAttributes.transform?.input) {\n        newValue = await fieldAttributes.transform.input(newValue);\n      }\n      if (fieldAttributes.references?.field === \"id\" && options.advanced?.database?.useNumberId) {\n        if (Array.isArray(newValue)) {\n          newValue = newValue.map(Number);\n        } else {\n          newValue = Number(newValue);\n        }\n      } else if (config.supportsJSON === false && typeof newValue === \"object\" && //@ts-expect-error -Future proofing\n      fieldAttributes.type === \"json\") {\n        newValue = JSON.stringify(newValue);\n      } else if (config.supportsDates === false && newValue instanceof Date && fieldAttributes.type === \"date\") {\n        newValue = newValue.toISOString();\n      } else if (config.supportsBooleans === false && typeof newValue === \"boolean\") {\n        newValue = newValue ? 1 : 0;\n      }\n      if (config.customTransformInput) {\n        newValue = config.customTransformInput({\n          data: newValue,\n          action,\n          field: newFieldName,\n          fieldAttributes,\n          model: unsafe_model,\n          schema,\n          options\n        });\n      }\n      transformedData[newFieldName] = newValue;\n    }\n    return transformedData;\n  };\n  const transformOutput = async (data, unsafe_model, select = []) => {\n    if (!data) return null;\n    const newMappedKeys = config.mapKeysTransformOutput ?? {};\n    const transformedData = {};\n    const tableSchema = schema[unsafe_model].fields;\n    const idKey = Object.entries(newMappedKeys).find(\n      ([_, v]) => v === \"id\"\n    )?.[0];\n    tableSchema[idKey ?? \"id\"] = {\n      type: options.advanced?.database?.useNumberId ? \"number\" : \"string\"\n    };\n    for (const key in tableSchema) {\n      if (select.length && !select.includes(key)) {\n        continue;\n      }\n      const field = tableSchema[key];\n      if (field) {\n        const originalKey = field.fieldName || key;\n        let newValue = data[Object.entries(newMappedKeys).find(\n          ([_, v]) => v === originalKey\n        )?.[0] || originalKey];\n        if (field.transform?.output) {\n          newValue = await field.transform.output(newValue);\n        }\n        let newFieldName = newMappedKeys[key] || key;\n        if (originalKey === \"id\" || field.references?.field === \"id\") {\n          if (typeof newValue !== \"undefined\") newValue = String(newValue);\n        } else if (config.supportsJSON === false && typeof newValue === \"string\" && //@ts-expect-error - Future proofing\n        field.type === \"json\") {\n          newValue = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(newValue);\n        } else if (config.supportsDates === false && typeof newValue === \"string\" && field.type === \"date\") {\n          newValue = new Date(newValue);\n        } else if (config.supportsBooleans === false && typeof newValue === \"number\" && field.type === \"boolean\") {\n          newValue = newValue === 1;\n        }\n        if (config.customTransformOutput) {\n          newValue = config.customTransformOutput({\n            data: newValue,\n            field: newFieldName,\n            fieldAttributes: field,\n            select,\n            model: unsafe_model,\n            schema,\n            options\n          });\n        }\n        transformedData[newFieldName] = newValue;\n      }\n    }\n    return transformedData;\n  };\n  const transformWhereClause = ({\n    model,\n    where\n  }) => {\n    if (!where) return void 0;\n    const newMappedKeys = config.mapKeysTransformInput ?? {};\n    return where.map((w) => {\n      const {\n        field: unsafe_field,\n        value,\n        operator = \"eq\",\n        connector = \"AND\"\n      } = w;\n      if (operator === \"in\") {\n        if (!Array.isArray(value)) {\n          throw new Error(\"Value must be an array\");\n        }\n      }\n      const defaultModelName = getDefaultModelName(model);\n      const defaultFieldName = getDefaultFieldName({\n        field: unsafe_field,\n        model\n      });\n      const fieldName = newMappedKeys[defaultFieldName] || getFieldName({\n        field: defaultFieldName,\n        model: defaultModelName\n      });\n      const fieldAttr = getFieldAttributes({\n        field: defaultFieldName,\n        model: defaultModelName\n      });\n      if (defaultFieldName === \"id\" || fieldAttr.references?.field === \"id\") {\n        if (options.advanced?.database?.useNumberId) {\n          if (Array.isArray(value)) {\n            return {\n              operator,\n              connector,\n              field: fieldName,\n              value: value.map(Number)\n            };\n          }\n          return {\n            operator,\n            connector,\n            field: fieldName,\n            value: Number(value)\n          };\n        }\n      }\n      return {\n        operator,\n        connector,\n        field: fieldName,\n        value\n      };\n    });\n  };\n  return {\n    create: async ({\n      data: unsafeData,\n      model: unsafeModel,\n      select,\n      forceAllowId = false\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      if (\"id\" in unsafeData && !forceAllowId) {\n        _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_9__.l.warn(\n          `[${config.adapterName}] - You are trying to create a record with an id. This is not allowed as we handle id generation for you, unless you pass in the \\`forceAllowId\\` parameter. The id will be ignored.`\n        );\n        const err = new Error();\n        const stack = err.stack?.split(\"\\n\").filter((_, i) => i !== 1).join(\"\\n\").replace(\"Error:\", \"Create method with `id` being called at:\");\n        console.log(stack);\n        unsafeData.id = void 0;\n      }\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      const data = await transformInput(\n        unsafeData,\n        unsafeModel,\n        \"create\",\n        forceAllowId\n      );\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const res = await adapterInstance.create({ data, model });\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"DB Result\")}:`,\n        { model, res }\n      );\n      const transformed = await transformOutput(res, unsafeModel, select);\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    update: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      update: unsafeData\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      const data = await transformInput(\n        unsafeData,\n        unsafeModel,\n        \"update\"\n      );\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const res = await adapterInstance.update({\n        model,\n        where,\n        update: data\n      });\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      const transformed = await transformOutput(res, unsafeModel);\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    updateMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      update: unsafeData\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      const data = await transformInput(unsafeData, unsafeModel, \"update\");\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const updatedCount = await adapterInstance.updateMany({\n        model,\n        where,\n        update: data\n      });\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: updatedCount }\n      );\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: updatedCount }\n      );\n      return updatedCount;\n    },\n    findOne: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      select\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 3)}`,\n        `${formatMethod(\"findOne\")}:`,\n        { model, where, select }\n      );\n      const res = await adapterInstance.findOne({\n        model,\n        where,\n        select\n      });\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 3)}`,\n        `${formatMethod(\"findOne\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      const transformed = await transformOutput(\n        res,\n        unsafeModel,\n        select\n      );\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 3)}`,\n        `${formatMethod(\"findOne\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    findMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      limit: unsafeLimit,\n      sortBy,\n      offset\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const limit = unsafeLimit ?? options.advanced?.database?.defaultFindManyLimit ?? 100;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 3)}`,\n        `${formatMethod(\"findMany\")}:`,\n        { model, where, limit, sortBy, offset }\n      );\n      const res = await adapterInstance.findMany({\n        model,\n        where,\n        limit,\n        sortBy,\n        offset\n      });\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 3)}`,\n        `${formatMethod(\"findMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      const transformed = await Promise.all(\n        res.map(async (r) => await transformOutput(r, unsafeModel))\n      );\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 3)}`,\n        `${formatMethod(\"findMany\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    delete: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"delete\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"delete\")}:`,\n        { model, where }\n      );\n      await adapterInstance.delete({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"delete\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"delete\")} ${formatAction(\"DB Result\")}:`,\n        { model }\n      );\n    },\n    deleteMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"deleteMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"deleteMany\")} ${formatAction(\"DeleteMany\")}:`,\n        { model, where }\n      );\n      const res = await adapterInstance.deleteMany({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"deleteMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"deleteMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      return res;\n    },\n    count: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"count\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"count\")}:`,\n        {\n          model,\n          where\n        }\n      );\n      const res = await adapterInstance.count({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"count\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"count\")}:`,\n        {\n          model,\n          data: res\n        }\n      );\n      return res;\n    },\n    createSchema: adapterInstance.createSchema ? async (_, file) => {\n      const tables = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(options);\n      if (options.secondaryStorage && !options.session?.storeSessionInDatabase) {\n        delete tables.session;\n      }\n      if (options.rateLimit && options.rateLimit.storage === \"database\" && // rate-limit will default to enabled in production,\n      // and given storage is database, it will try to use the rate-limit table,\n      // so we should make sure to generate rate-limit table schema\n      (typeof options.rateLimit.enabled === \"undefined\" || // and of course if they forcefully set to true, then they want rate-limit,\n      // thus we should also generate rate-limit table schema\n      options.rateLimit.enabled === true)) {\n        tables.ratelimit = {\n          modelName: options.rateLimit.modelName ?? \"ratelimit\",\n          fields: {\n            key: {\n              type: \"string\",\n              unique: true,\n              required: true,\n              fieldName: options.rateLimit.fields?.key ?? \"key\"\n            },\n            count: {\n              type: \"number\",\n              required: true,\n              fieldName: options.rateLimit.fields?.count ?? \"count\"\n            },\n            lastRequest: {\n              type: \"number\",\n              required: true,\n              bigint: true,\n              defaultValue: () => Date.now(),\n              fieldName: options.rateLimit.fields?.lastRequest ?? \"lastRequest\"\n            }\n          }\n        };\n      }\n      return adapterInstance.createSchema({ file, tables });\n    } : void 0,\n    options: {\n      adapterConfig: config,\n      ...adapterInstance.options ?? {}\n    },\n    id: config.adapterId,\n    // Secretly export values ONLY if this adapter has enabled adapter-test-debug-logs.\n    // This would then be used during our adapter-tests to help print debug logs if a test fails.\n    //@ts-expect-error - ^^\n    ...config.debugLogs?.isRunningAdapterTests ? {\n      adapterTestDebugLogs: {\n        resetDebugLogs() {\n          debugLogs = [];\n        },\n        printDebugLogs() {\n          const separator = `\\u2500`.repeat(80);\n          let log = debugLogs.reverse().map((log2) => {\n            log2[0] = `\n${log2[0]}`;\n            return [...log2, \"\\n\"];\n          }).reduce(\n            (prev, curr) => {\n              return [...curr, ...prev];\n            },\n            [`\n${separator}`]\n          );\n          console.log(...log);\n        }\n      }\n    } : {}\n  };\n};\nfunction formatTransactionId(transactionId2) {\n  return `${colors.fg.magenta}#${transactionId2}${colors.reset}`;\n}\nfunction formatStep(step, total) {\n  return `${colors.bg.black}${colors.fg.yellow}[${step}/${total}]${colors.reset}`;\n}\nfunction formatMethod(method) {\n  return `${colors.bright}${method}${colors.reset}`;\n}\nfunction formatAction(action) {\n  return `${colors.dim}(${action})${colors.reset}`;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DFIAchwv.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getAuthTables)\n/* harmony export */ });\nconst getAuthTables = (options) => {\n  const pluginSchema = options.plugins?.reduce(\n    (acc, plugin) => {\n      const schema = plugin.schema;\n      if (!schema) return acc;\n      for (const [key, value] of Object.entries(schema)) {\n        acc[key] = {\n          fields: {\n            ...acc[key]?.fields,\n            ...value.fields\n          },\n          modelName: value.modelName || key\n        };\n      }\n      return acc;\n    },\n    {}\n  );\n  const shouldAddRateLimitTable = options.rateLimit?.storage === \"database\";\n  const rateLimitTable = {\n    rateLimit: {\n      modelName: options.rateLimit?.modelName || \"rateLimit\",\n      fields: {\n        key: {\n          type: \"string\",\n          fieldName: options.rateLimit?.fields?.key || \"key\"\n        },\n        count: {\n          type: \"number\",\n          fieldName: options.rateLimit?.fields?.count || \"count\"\n        },\n        lastRequest: {\n          type: \"number\",\n          bigint: true,\n          fieldName: options.rateLimit?.fields?.lastRequest || \"lastRequest\"\n        }\n      }\n    }\n  };\n  const { user, session, account, ...pluginTables } = pluginSchema || {};\n  const sessionTable = {\n    session: {\n      modelName: options.session?.modelName || \"session\",\n      fields: {\n        expiresAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.expiresAt || \"expiresAt\"\n        },\n        token: {\n          type: \"string\",\n          required: true,\n          fieldName: options.session?.fields?.token || \"token\",\n          unique: true\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.updatedAt || \"updatedAt\"\n        },\n        ipAddress: {\n          type: \"string\",\n          required: false,\n          fieldName: options.session?.fields?.ipAddress || \"ipAddress\"\n        },\n        userAgent: {\n          type: \"string\",\n          required: false,\n          fieldName: options.session?.fields?.userAgent || \"userAgent\"\n        },\n        userId: {\n          type: \"string\",\n          fieldName: options.session?.fields?.userId || \"userId\",\n          references: {\n            model: options.user?.modelName || \"user\",\n            field: \"id\",\n            onDelete: \"cascade\"\n          },\n          required: true\n        },\n        ...session?.fields,\n        ...options.session?.additionalFields\n      },\n      order: 2\n    }\n  };\n  return {\n    user: {\n      modelName: options.user?.modelName || \"user\",\n      fields: {\n        name: {\n          type: \"string\",\n          required: true,\n          fieldName: options.user?.fields?.name || \"name\",\n          sortable: true\n        },\n        email: {\n          type: \"string\",\n          unique: true,\n          required: true,\n          fieldName: options.user?.fields?.email || \"email\",\n          sortable: true\n        },\n        emailVerified: {\n          type: \"boolean\",\n          defaultValue: () => false,\n          required: true,\n          fieldName: options.user?.fields?.emailVerified || \"emailVerified\"\n        },\n        image: {\n          type: \"string\",\n          required: false,\n          fieldName: options.user?.fields?.image || \"image\"\n        },\n        createdAt: {\n          type: \"date\",\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          required: true,\n          fieldName: options.user?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          required: true,\n          fieldName: options.user?.fields?.updatedAt || \"updatedAt\"\n        },\n        ...user?.fields,\n        ...options.user?.additionalFields\n      },\n      order: 1\n    },\n    //only add session table if it's not stored in secondary storage\n    ...!options.secondaryStorage || options.session?.storeSessionInDatabase ? sessionTable : {},\n    account: {\n      modelName: options.account?.modelName || \"account\",\n      fields: {\n        accountId: {\n          type: \"string\",\n          required: true,\n          fieldName: options.account?.fields?.accountId || \"accountId\"\n        },\n        providerId: {\n          type: \"string\",\n          required: true,\n          fieldName: options.account?.fields?.providerId || \"providerId\"\n        },\n        userId: {\n          type: \"string\",\n          references: {\n            model: options.user?.modelName || \"user\",\n            field: \"id\",\n            onDelete: \"cascade\"\n          },\n          required: true,\n          fieldName: options.account?.fields?.userId || \"userId\"\n        },\n        accessToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.accessToken || \"accessToken\"\n        },\n        refreshToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.refreshToken || \"refreshToken\"\n        },\n        idToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.idToken || \"idToken\"\n        },\n        accessTokenExpiresAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options.account?.fields?.accessTokenExpiresAt || \"accessTokenExpiresAt\"\n        },\n        refreshTokenExpiresAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options.account?.fields?.accessTokenExpiresAt || \"refreshTokenExpiresAt\"\n        },\n        scope: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.scope || \"scope\"\n        },\n        password: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.password || \"password\"\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.account?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.account?.fields?.updatedAt || \"updatedAt\"\n        },\n        ...account?.fields\n      },\n      order: 3\n    },\n    verification: {\n      modelName: options.verification?.modelName || \"verification\",\n      fields: {\n        identifier: {\n          type: \"string\",\n          required: true,\n          fieldName: options.verification?.fields?.identifier || \"identifier\"\n        },\n        value: {\n          type: \"string\",\n          required: true,\n          fieldName: options.verification?.fields?.value || \"value\"\n        },\n        expiresAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.verification?.fields?.expiresAt || \"expiresAt\"\n        },\n        createdAt: {\n          type: \"date\",\n          required: false,\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          fieldName: options.verification?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: false,\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          fieldName: options.verification?.fields?.updatedAt || \"updatedAt\"\n        }\n      },\n      order: 4\n    },\n    ...pluginTables,\n    ...shouldAddRateLimitTable ? rateLimitTable : {}\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DPBqdYQ3.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DPBqdYQ3.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ generateState),\n/* harmony export */   p: () => (/* binding */ parseState)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/types.js\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nasync function generateState(c, link) {\n  const callbackURL = c.body?.callbackURL || c.context.options.baseURL;\n  if (!callbackURL) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"callbackURL is required\"\n    });\n  }\n  const codeVerifier = (0,_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_5__.g)(128);\n  const state = (0,_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_5__.g)(32);\n  const data = JSON.stringify({\n    callbackURL,\n    codeVerifier,\n    errorURL: c.body?.errorCallbackURL,\n    newUserURL: c.body?.newUserCallbackURL,\n    link,\n    /**\n     * This is the actual expiry time of the state\n     */\n    expiresAt: Date.now() + 10 * 60 * 1e3,\n    requestSignUp: c.body?.requestSignUp\n  });\n  const expiresAt = /* @__PURE__ */ new Date();\n  expiresAt.setMinutes(expiresAt.getMinutes() + 10);\n  const verification = await c.context.internalAdapter.createVerificationValue(\n    {\n      value: data,\n      identifier: state,\n      expiresAt\n    },\n    c\n  );\n  if (!verification) {\n    c.context.logger.error(\n      \"Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database\"\n    );\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\", {\n      message: \"Unable to create verification\"\n    });\n  }\n  return {\n    state: verification.identifier,\n    codeVerifier\n  };\n}\nasync function parseState(c) {\n  const state = c.query.state || c.body.state;\n  const data = await c.context.internalAdapter.findVerificationValue(state);\n  if (!data) {\n    c.context.logger.error(\"State Mismatch. Verification not found\", {\n      state\n    });\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=please_restart_the_process`);\n  }\n  const parsedData = zod__WEBPACK_IMPORTED_MODULE_6__.object({\n    callbackURL: zod__WEBPACK_IMPORTED_MODULE_6__.string(),\n    codeVerifier: zod__WEBPACK_IMPORTED_MODULE_6__.string(),\n    errorURL: zod__WEBPACK_IMPORTED_MODULE_6__.string().optional(),\n    newUserURL: zod__WEBPACK_IMPORTED_MODULE_6__.string().optional(),\n    expiresAt: zod__WEBPACK_IMPORTED_MODULE_6__.number(),\n    link: zod__WEBPACK_IMPORTED_MODULE_6__.object({\n      email: zod__WEBPACK_IMPORTED_MODULE_6__.string(),\n      userId: zod__WEBPACK_IMPORTED_MODULE_6__.coerce.string()\n    }).optional(),\n    requestSignUp: zod__WEBPACK_IMPORTED_MODULE_6__.boolean().optional()\n  }).parse(JSON.parse(data.value));\n  if (!parsedData.errorURL) {\n    parsedData.errorURL = `${c.context.baseURL}/error`;\n  }\n  if (parsedData.expiresAt < Date.now()) {\n    await c.context.internalAdapter.deleteVerificationValue(data.id);\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=please_restart_the_process`);\n  }\n  await c.context.internalAdapter.deleteVerificationValue(data.id);\n  return parsedData;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRFBCcWRZUTMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUF3QjtBQUNlO0FBQ047QUFDRjtBQUNEO0FBQ0k7QUFDQztBQUNyQjtBQUNnQjtBQUNGO0FBQ0k7QUFDSDtBQUMwQzs7QUFFdkU7QUFDQTtBQUNBO0FBQ0EsY0FBYyxpREFBUTtBQUN0QjtBQUNBLEtBQUs7QUFDTDtBQUNBLHVCQUF1Qiw0REFBb0I7QUFDM0MsZ0JBQWdCLDREQUFvQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaURBQVE7QUFDdEI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGtFQUFrRSxrQkFBa0I7QUFDcEYsd0JBQXdCLFNBQVM7QUFDakM7QUFDQSxxQkFBcUIsdUNBQVE7QUFDN0IsaUJBQWlCLHVDQUFRO0FBQ3pCLGtCQUFrQix1Q0FBUTtBQUMxQixjQUFjLHVDQUFRO0FBQ3RCLGdCQUFnQix1Q0FBUTtBQUN4QixlQUFlLHVDQUFRO0FBQ3ZCLFVBQVUsdUNBQVE7QUFDbEIsYUFBYSx1Q0FBUTtBQUNyQixjQUFjLHVDQUFRO0FBQ3RCLEtBQUs7QUFDTCxtQkFBbUIsd0NBQVM7QUFDNUIsR0FBRztBQUNIO0FBQ0EsNkJBQTZCLGtCQUFrQjtBQUMvQztBQUNBO0FBQ0E7QUFDQSxrRUFBa0Usa0JBQWtCO0FBQ3BGLHdCQUF3QixTQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBOztBQUUrQyIsInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlsaW1hcy9Eb2N1bWVudHMvRGF2aS9lc3R1ZG9zL3JlYWN0L2Jld2Vhci9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRFBCcWRZUTMubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgQVBJRXJyb3IgfSBmcm9tICdiZXR0ZXItY2FsbCc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9oYXNoJztcbmltcG9ydCAnQG5vYmxlL2NpcGhlcnMvY2hhY2hhJztcbmltcG9ydCAnQG5vYmxlL2NpcGhlcnMvdXRpbHMnO1xuaW1wb3J0ICdAbm9ibGUvY2lwaGVycy93ZWJjcnlwdG8nO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvYmFzZTY0JztcbmltcG9ydCAnam9zZSc7XG5pbXBvcnQgJ0Bub2JsZS9oYXNoZXMvc2NyeXB0JztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL2hleCc7XG5pbXBvcnQgJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xuaW1wb3J0IHsgZyBhcyBnZW5lcmF0ZVJhbmRvbVN0cmluZyB9IGZyb20gJy4vYmV0dGVyLWF1dGguQjRRb3hkZ2MubWpzJztcblxuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVTdGF0ZShjLCBsaW5rKSB7XG4gIGNvbnN0IGNhbGxiYWNrVVJMID0gYy5ib2R5Py5jYWxsYmFja1VSTCB8fCBjLmNvbnRleHQub3B0aW9ucy5iYXNlVVJMO1xuICBpZiAoIWNhbGxiYWNrVVJMKSB7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKFwiQkFEX1JFUVVFU1RcIiwge1xuICAgICAgbWVzc2FnZTogXCJjYWxsYmFja1VSTCBpcyByZXF1aXJlZFwiXG4gICAgfSk7XG4gIH1cbiAgY29uc3QgY29kZVZlcmlmaWVyID0gZ2VuZXJhdGVSYW5kb21TdHJpbmcoMTI4KTtcbiAgY29uc3Qgc3RhdGUgPSBnZW5lcmF0ZVJhbmRvbVN0cmluZygzMik7XG4gIGNvbnN0IGRhdGEgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgY2FsbGJhY2tVUkwsXG4gICAgY29kZVZlcmlmaWVyLFxuICAgIGVycm9yVVJMOiBjLmJvZHk/LmVycm9yQ2FsbGJhY2tVUkwsXG4gICAgbmV3VXNlclVSTDogYy5ib2R5Py5uZXdVc2VyQ2FsbGJhY2tVUkwsXG4gICAgbGluayxcbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIHRoZSBhY3R1YWwgZXhwaXJ5IHRpbWUgb2YgdGhlIHN0YXRlXG4gICAgICovXG4gICAgZXhwaXJlc0F0OiBEYXRlLm5vdygpICsgMTAgKiA2MCAqIDFlMyxcbiAgICByZXF1ZXN0U2lnblVwOiBjLmJvZHk/LnJlcXVlc3RTaWduVXBcbiAgfSk7XG4gIGNvbnN0IGV4cGlyZXNBdCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpO1xuICBleHBpcmVzQXQuc2V0TWludXRlcyhleHBpcmVzQXQuZ2V0TWludXRlcygpICsgMTApO1xuICBjb25zdCB2ZXJpZmljYXRpb24gPSBhd2FpdCBjLmNvbnRleHQuaW50ZXJuYWxBZGFwdGVyLmNyZWF0ZVZlcmlmaWNhdGlvblZhbHVlKFxuICAgIHtcbiAgICAgIHZhbHVlOiBkYXRhLFxuICAgICAgaWRlbnRpZmllcjogc3RhdGUsXG4gICAgICBleHBpcmVzQXRcbiAgICB9LFxuICAgIGNcbiAgKTtcbiAgaWYgKCF2ZXJpZmljYXRpb24pIHtcbiAgICBjLmNvbnRleHQubG9nZ2VyLmVycm9yKFxuICAgICAgXCJVbmFibGUgdG8gY3JlYXRlIHZlcmlmaWNhdGlvbi4gTWFrZSBzdXJlIHRoZSBkYXRhYmFzZSBhZGFwdGVyIGlzIHByb3Blcmx5IHdvcmtpbmcgYW5kIHRoZXJlIGlzIGEgdmVyaWZpY2F0aW9uIHRhYmxlIGluIHRoZSBkYXRhYmFzZVwiXG4gICAgKTtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIiwge1xuICAgICAgbWVzc2FnZTogXCJVbmFibGUgdG8gY3JlYXRlIHZlcmlmaWNhdGlvblwiXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdGF0ZTogdmVyaWZpY2F0aW9uLmlkZW50aWZpZXIsXG4gICAgY29kZVZlcmlmaWVyXG4gIH07XG59XG5hc3luYyBmdW5jdGlvbiBwYXJzZVN0YXRlKGMpIHtcbiAgY29uc3Qgc3RhdGUgPSBjLnF1ZXJ5LnN0YXRlIHx8IGMuYm9keS5zdGF0ZTtcbiAgY29uc3QgZGF0YSA9IGF3YWl0IGMuY29udGV4dC5pbnRlcm5hbEFkYXB0ZXIuZmluZFZlcmlmaWNhdGlvblZhbHVlKHN0YXRlKTtcbiAgaWYgKCFkYXRhKSB7XG4gICAgYy5jb250ZXh0LmxvZ2dlci5lcnJvcihcIlN0YXRlIE1pc21hdGNoLiBWZXJpZmljYXRpb24gbm90IGZvdW5kXCIsIHtcbiAgICAgIHN0YXRlXG4gICAgfSk7XG4gICAgY29uc3QgZXJyb3JVUkwgPSBjLmNvbnRleHQub3B0aW9ucy5vbkFQSUVycm9yPy5lcnJvclVSTCB8fCBgJHtjLmNvbnRleHQuYmFzZVVSTH0vZXJyb3JgO1xuICAgIHRocm93IGMucmVkaXJlY3QoYCR7ZXJyb3JVUkx9P2Vycm9yPXBsZWFzZV9yZXN0YXJ0X3RoZV9wcm9jZXNzYCk7XG4gIH1cbiAgY29uc3QgcGFyc2VkRGF0YSA9IHoub2JqZWN0KHtcbiAgICBjYWxsYmFja1VSTDogei5zdHJpbmcoKSxcbiAgICBjb2RlVmVyaWZpZXI6IHouc3RyaW5nKCksXG4gICAgZXJyb3JVUkw6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBuZXdVc2VyVVJMOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgZXhwaXJlc0F0OiB6Lm51bWJlcigpLFxuICAgIGxpbms6IHoub2JqZWN0KHtcbiAgICAgIGVtYWlsOiB6LnN0cmluZygpLFxuICAgICAgdXNlcklkOiB6LmNvZXJjZS5zdHJpbmcoKVxuICAgIH0pLm9wdGlvbmFsKCksXG4gICAgcmVxdWVzdFNpZ25VcDogei5ib29sZWFuKCkub3B0aW9uYWwoKVxuICB9KS5wYXJzZShKU09OLnBhcnNlKGRhdGEudmFsdWUpKTtcbiAgaWYgKCFwYXJzZWREYXRhLmVycm9yVVJMKSB7XG4gICAgcGFyc2VkRGF0YS5lcnJvclVSTCA9IGAke2MuY29udGV4dC5iYXNlVVJMfS9lcnJvcmA7XG4gIH1cbiAgaWYgKHBhcnNlZERhdGEuZXhwaXJlc0F0IDwgRGF0ZS5ub3coKSkge1xuICAgIGF3YWl0IGMuY29udGV4dC5pbnRlcm5hbEFkYXB0ZXIuZGVsZXRlVmVyaWZpY2F0aW9uVmFsdWUoZGF0YS5pZCk7XG4gICAgY29uc3QgZXJyb3JVUkwgPSBjLmNvbnRleHQub3B0aW9ucy5vbkFQSUVycm9yPy5lcnJvclVSTCB8fCBgJHtjLmNvbnRleHQuYmFzZVVSTH0vZXJyb3JgO1xuICAgIHRocm93IGMucmVkaXJlY3QoYCR7ZXJyb3JVUkx9P2Vycm9yPXBsZWFzZV9yZXN0YXJ0X3RoZV9wcm9jZXNzYCk7XG4gIH1cbiAgYXdhaXQgYy5jb250ZXh0LmludGVybmFsQWRhcHRlci5kZWxldGVWZXJpZmljYXRpb25WYWx1ZShkYXRhLmlkKTtcbiAgcmV0dXJuIHBhcnNlZERhdGE7XG59XG5cbmV4cG9ydCB7IGdlbmVyYXRlU3RhdGUgYXMgZywgcGFyc2VTdGF0ZSBhcyBwIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DPBqdYQ3.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: () => (/* binding */ BetterAuthError),\n/* harmony export */   M: () => (/* binding */ MissingDependencyError)\n/* harmony export */ });\nclass BetterAuthError extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.name = \"BetterAuthError\";\n    this.message = message;\n    this.cause = cause;\n    this.stack = \"\";\n  }\n}\nclass MissingDependencyError extends BetterAuthError {\n  constructor(pkgName) {\n    super(\n      `The package \"${pkgName}\" is required. Make sure it is installed.`,\n      pkgName\n    );\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRTZEIiwic291cmNlcyI6WyIvVXNlcnMvZGF2aWxpbWFzL0RvY3VtZW50cy9EYXZpL2VzdHVkb3MvcmVhY3QvYmV3ZWFyL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5EZHpTSmYtbi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQmV0dGVyQXV0aEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjYXVzZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiQmV0dGVyQXV0aEVycm9yXCI7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLmNhdXNlID0gY2F1c2U7XG4gICAgdGhpcy5zdGFjayA9IFwiXCI7XG4gIH1cbn1cbmNsYXNzIE1pc3NpbmdEZXBlbmRlbmN5RXJyb3IgZXh0ZW5kcyBCZXR0ZXJBdXRoRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihwa2dOYW1lKSB7XG4gICAgc3VwZXIoXG4gICAgICBgVGhlIHBhY2thZ2UgXCIke3BrZ05hbWV9XCIgaXMgcmVxdWlyZWQuIE1ha2Ugc3VyZSBpdCBpcyBpbnN0YWxsZWQuYCxcbiAgICAgIHBrZ05hbWVcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7IEJldHRlckF1dGhFcnJvciBhcyBCLCBNaXNzaW5nRGVwZW5kZW5jeUVycm9yIGFzIE0gfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DufyW0qf.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DufyW0qf.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ validateToken),\n/* harmony export */   b: () => (/* binding */ getOAuth2Tokens),\n/* harmony export */   c: () => (/* binding */ createAuthorizationURL),\n/* harmony export */   e: () => (/* binding */ encodeOAuthParameter),\n/* harmony export */   g: () => (/* binding */ generateCodeChallenge),\n/* harmony export */   r: () => (/* binding */ refreshAccessToken),\n/* harmony export */   v: () => (/* binding */ validateAuthorizationCode)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/jwt/verify.js\");\n/* harmony import */ var _better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n\n\n\n\n\n\nasync function generateCodeChallenge(codeVerifier) {\n  const codeChallengeBytes = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_3__.createHash)(\"SHA-256\").digest(codeVerifier);\n  return _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_0__.base64Url.encode(new Uint8Array(codeChallengeBytes), {\n    padding: false\n  });\n}\nfunction getOAuth2Tokens(data) {\n  return {\n    tokenType: data.token_type,\n    accessToken: data.access_token,\n    refreshToken: data.refresh_token,\n    accessTokenExpiresAt: data.expires_in ? (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(data.expires_in, \"sec\") : void 0,\n    scopes: data?.scope ? typeof data.scope === \"string\" ? data.scope.split(\" \") : data.scope : [],\n    idToken: data.id_token\n  };\n}\nconst encodeOAuthParameter = (value) => encodeURIComponent(value).replace(/%20/g, \"+\");\n\nasync function createAuthorizationURL({\n  id,\n  options,\n  authorizationEndpoint,\n  state,\n  codeVerifier,\n  scopes,\n  claims,\n  redirectURI,\n  duration,\n  prompt,\n  accessType,\n  responseType,\n  display,\n  loginHint,\n  hd,\n  responseMode,\n  additionalParams,\n  scopeJoiner\n}) {\n  const url = new URL(authorizationEndpoint);\n  url.searchParams.set(\"response_type\", responseType || \"code\");\n  url.searchParams.set(\"client_id\", options.clientId);\n  url.searchParams.set(\"state\", state);\n  url.searchParams.set(\"scope\", scopes.join(scopeJoiner || \" \"));\n  url.searchParams.set(\"redirect_uri\", options.redirectURI || redirectURI);\n  duration && url.searchParams.set(\"duration\", duration);\n  display && url.searchParams.set(\"display\", display);\n  loginHint && url.searchParams.set(\"login_hint\", loginHint);\n  prompt && url.searchParams.set(\"prompt\", prompt);\n  hd && url.searchParams.set(\"hd\", hd);\n  accessType && url.searchParams.set(\"access_type\", accessType);\n  responseMode && url.searchParams.set(\"response_mode\", responseMode);\n  if (codeVerifier) {\n    const codeChallenge = await generateCodeChallenge(codeVerifier);\n    url.searchParams.set(\"code_challenge_method\", \"S256\");\n    url.searchParams.set(\"code_challenge\", codeChallenge);\n  }\n  if (claims) {\n    const claimsObj = claims.reduce(\n      (acc, claim) => {\n        acc[claim] = null;\n        return acc;\n      },\n      {}\n    );\n    url.searchParams.set(\n      \"claims\",\n      JSON.stringify({\n        id_token: { email: null, email_verified: null, ...claimsObj }\n      })\n    );\n  }\n  if (additionalParams) {\n    Object.entries(additionalParams).forEach(([key, value]) => {\n      url.searchParams.set(key, value);\n    });\n  }\n  return url;\n}\n\nasync function validateAuthorizationCode({\n  code,\n  codeVerifier,\n  redirectURI,\n  options,\n  tokenEndpoint,\n  authentication,\n  deviceId,\n  headers\n}) {\n  const body = new URLSearchParams();\n  const requestHeaders = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    accept: \"application/json\",\n    \"user-agent\": \"better-auth\",\n    ...headers\n  };\n  body.set(\"grant_type\", \"authorization_code\");\n  body.set(\"code\", code);\n  codeVerifier && body.set(\"code_verifier\", codeVerifier);\n  options.clientKey && body.set(\"client_key\", options.clientKey);\n  deviceId && body.set(\"device_id\", deviceId);\n  body.set(\"redirect_uri\", options.redirectURI || redirectURI);\n  if (authentication === \"basic\") {\n    const encodedCredentials = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_0__.base64Url.encode(\n      `${options.clientId}:${options.clientSecret}`\n    );\n    requestHeaders[\"authorization\"] = `Basic ${encodedCredentials}`;\n  } else {\n    body.set(\"client_id\", options.clientId);\n    body.set(\"client_secret\", options.clientSecret);\n  }\n  const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_1__.betterFetch)(tokenEndpoint, {\n    method: \"POST\",\n    body,\n    headers: requestHeaders\n  });\n  if (error) {\n    throw error;\n  }\n  const tokens = getOAuth2Tokens(data);\n  return tokens;\n}\nasync function validateToken(token, jwksEndpoint) {\n  const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_1__.betterFetch)(jwksEndpoint, {\n    method: \"GET\",\n    headers: {\n      accept: \"application/json\",\n      \"user-agent\": \"better-auth\"\n    }\n  });\n  if (error) {\n    throw error;\n  }\n  const keys = data[\"keys\"];\n  const header = JSON.parse(atob(token.split(\".\")[0]));\n  const key = keys.find((key2) => key2.kid === header.kid);\n  if (!key) {\n    throw new Error(\"Key not found\");\n  }\n  const verified = await (0,jose__WEBPACK_IMPORTED_MODULE_4__.jwtVerify)(token, key);\n  return verified;\n}\n\nasync function refreshAccessToken({\n  refreshToken,\n  options,\n  tokenEndpoint,\n  authentication,\n  extraParams,\n  grantType = \"refresh_token\"\n}) {\n  const body = new URLSearchParams();\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    accept: \"application/json\"\n  };\n  body.set(\"grant_type\", grantType);\n  body.set(\"refresh_token\", refreshToken);\n  if (authentication === \"basic\") {\n    const encodedCredentials = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_0__.base64Url.encode(\n      `${options.clientId}:${options.clientSecret}`\n    );\n    headers[\"authorization\"] = `Basic ${encodedCredentials}`;\n  } else {\n    body.set(\"client_id\", options.clientId);\n    body.set(\"client_secret\", options.clientSecret);\n  }\n  if (extraParams) {\n    for (const [key, value] of Object.entries(extraParams)) {\n      body.set(key, value);\n    }\n  }\n  const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_1__.betterFetch)(tokenEndpoint, {\n    method: \"POST\",\n    body,\n    headers\n  });\n  if (error) {\n    throw error;\n  }\n  const tokens = {\n    accessToken: data.access_token,\n    refreshToken: data.refresh_token,\n    tokenType: data.token_type,\n    scopes: data.scope?.split(\" \"),\n    idToken: data.id_token\n  };\n  if (data.expires_in) {\n    const now = /* @__PURE__ */ new Date();\n    tokens.accessTokenExpiresAt = new Date(\n      now.getTime() + data.expires_in * 1e3\n    );\n  }\n  return tokens;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DufyW0qf.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.OT3XFeFk.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.OT3XFeFk.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ constantTimeEqual),\n/* harmony export */   h: () => (/* binding */ hashPassword),\n/* harmony export */   v: () => (/* binding */ verifyPassword)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/scrypt */ \"(rsc)/./node_modules/@noble/hashes/esm/scrypt.js\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/utils */ \"(rsc)/./node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n\n\nfunction constantTimeEqual(a, b) {\n  const aBuffer = new Uint8Array(a);\n  const bBuffer = new Uint8Array(b);\n  if (aBuffer.length !== bBuffer.length) {\n    return false;\n  }\n  let c = 0;\n  for (let i = 0; i < aBuffer.length; i++) {\n    c |= aBuffer[i] ^ bBuffer[i];\n  }\n  return c === 0;\n}\n\nconst config = {\n  N: 16384,\n  r: 16,\n  p: 1,\n  dkLen: 64\n};\nasync function generateKey(password, salt) {\n  return await (0,_noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_2__.scryptAsync)(password.normalize(\"NFKC\"), salt, {\n    N: config.N,\n    p: config.p,\n    r: config.r,\n    dkLen: config.dkLen,\n    maxmem: 128 * config.N * config.r * 2\n  });\n}\nconst hashPassword = async (password) => {\n  const salt = _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_1__.hex.encode((0,_better_auth_utils__WEBPACK_IMPORTED_MODULE_0__.getRandomValues)(new Uint8Array(16)));\n  const key = await generateKey(password, salt);\n  return `${salt}:${_better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_1__.hex.encode(key)}`;\n};\nconst verifyPassword = async ({\n  hash,\n  password\n}) => {\n  const [salt, key] = hash.split(\":\");\n  const targetKey = await generateKey(password, salt);\n  return constantTimeEqual(targetKey, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(key));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguT1QzWEZlRmsubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBbUQ7QUFDRTtBQUNSO0FBQ0k7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9CQUFvQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUVBQVc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZUFBZSx1REFBRyxRQUFRLG1FQUFlO0FBQ3pDO0FBQ0EsWUFBWSxLQUFLLEdBQUcsdURBQUcsYUFBYTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0Esc0NBQXNDLCtEQUFVO0FBQ2hEOztBQUUwRSIsInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlsaW1hcy9Eb2N1bWVudHMvRGF2aS9lc3R1ZG9zL3JlYWN0L2Jld2Vhci9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguT1QzWEZlRmsubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNjcnlwdEFzeW5jIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9zY3J5cHQnO1xuaW1wb3J0IHsgZ2V0UmFuZG9tVmFsdWVzIH0gZnJvbSAnQGJldHRlci1hdXRoL3V0aWxzJztcbmltcG9ydCB7IGhleCB9IGZyb20gJ0BiZXR0ZXItYXV0aC91dGlscy9oZXgnO1xuaW1wb3J0IHsgaGV4VG9CeXRlcyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xuXG5mdW5jdGlvbiBjb25zdGFudFRpbWVFcXVhbChhLCBiKSB7XG4gIGNvbnN0IGFCdWZmZXIgPSBuZXcgVWludDhBcnJheShhKTtcbiAgY29uc3QgYkJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGIpO1xuICBpZiAoYUJ1ZmZlci5sZW5ndGggIT09IGJCdWZmZXIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxldCBjID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhQnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgYyB8PSBhQnVmZmVyW2ldIF4gYkJ1ZmZlcltpXTtcbiAgfVxuICByZXR1cm4gYyA9PT0gMDtcbn1cblxuY29uc3QgY29uZmlnID0ge1xuICBOOiAxNjM4NCxcbiAgcjogMTYsXG4gIHA6IDEsXG4gIGRrTGVuOiA2NFxufTtcbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlS2V5KHBhc3N3b3JkLCBzYWx0KSB7XG4gIHJldHVybiBhd2FpdCBzY3J5cHRBc3luYyhwYXNzd29yZC5ub3JtYWxpemUoXCJORktDXCIpLCBzYWx0LCB7XG4gICAgTjogY29uZmlnLk4sXG4gICAgcDogY29uZmlnLnAsXG4gICAgcjogY29uZmlnLnIsXG4gICAgZGtMZW46IGNvbmZpZy5ka0xlbixcbiAgICBtYXhtZW06IDEyOCAqIGNvbmZpZy5OICogY29uZmlnLnIgKiAyXG4gIH0pO1xufVxuY29uc3QgaGFzaFBhc3N3b3JkID0gYXN5bmMgKHBhc3N3b3JkKSA9PiB7XG4gIGNvbnN0IHNhbHQgPSBoZXguZW5jb2RlKGdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgxNikpKTtcbiAgY29uc3Qga2V5ID0gYXdhaXQgZ2VuZXJhdGVLZXkocGFzc3dvcmQsIHNhbHQpO1xuICByZXR1cm4gYCR7c2FsdH06JHtoZXguZW5jb2RlKGtleSl9YDtcbn07XG5jb25zdCB2ZXJpZnlQYXNzd29yZCA9IGFzeW5jICh7XG4gIGhhc2gsXG4gIHBhc3N3b3JkXG59KSA9PiB7XG4gIGNvbnN0IFtzYWx0LCBrZXldID0gaGFzaC5zcGxpdChcIjpcIik7XG4gIGNvbnN0IHRhcmdldEtleSA9IGF3YWl0IGdlbmVyYXRlS2V5KHBhc3N3b3JkLCBzYWx0KTtcbiAgcmV0dXJuIGNvbnN0YW50VGltZUVxdWFsKHRhcmdldEtleSwgaGV4VG9CeXRlcyhrZXkpKTtcbn07XG5cbmV4cG9ydCB7IGNvbnN0YW50VGltZUVxdWFsIGFzIGMsIGhhc2hQYXNzd29yZCBhcyBoLCB2ZXJpZnlQYXNzd29yZCBhcyB2IH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.OT3XFeFk.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.OuYYTHC7.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.OuYYTHC7.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   h: () => (/* binding */ hasPermission)\n/* harmony export */ });\n/* harmony import */ var _plugins_organization_access_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../plugins/organization/access/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/plugins/organization/access/index.mjs\");\n\n\nconst hasPermission = (input) => {\n  if (!input.permissions && !input.permission) {\n    return false;\n  }\n  const roles = input.role.split(\",\");\n  const acRoles = input.options.roles || _plugins_organization_access_index_mjs__WEBPACK_IMPORTED_MODULE_0__.defaultRoles;\n  for (const role of roles) {\n    const _role = acRoles[role];\n    const result = _role?.authorize(input.permissions ?? input.permission);\n    if (result?.success) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguT3VZWVRIQzcubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdFOztBQUV4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLGdGQUFZO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFOEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpbGltYXMvRG9jdW1lbnRzL0RhdmkvZXN0dWRvcy9yZWFjdC9iZXdlYXIvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLk91WVlUSEM3Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZhdWx0Um9sZXMgfSBmcm9tICcuLi9wbHVnaW5zL29yZ2FuaXphdGlvbi9hY2Nlc3MvaW5kZXgubWpzJztcblxuY29uc3QgaGFzUGVybWlzc2lvbiA9IChpbnB1dCkgPT4ge1xuICBpZiAoIWlucHV0LnBlcm1pc3Npb25zICYmICFpbnB1dC5wZXJtaXNzaW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHJvbGVzID0gaW5wdXQucm9sZS5zcGxpdChcIixcIik7XG4gIGNvbnN0IGFjUm9sZXMgPSBpbnB1dC5vcHRpb25zLnJvbGVzIHx8IGRlZmF1bHRSb2xlcztcbiAgZm9yIChjb25zdCByb2xlIG9mIHJvbGVzKSB7XG4gICAgY29uc3QgX3JvbGUgPSBhY1JvbGVzW3JvbGVdO1xuICAgIGNvbnN0IHJlc3VsdCA9IF9yb2xlPy5hdXRob3JpemUoaW5wdXQucGVybWlzc2lvbnMgPz8gaW5wdXQucGVybWlzc2lvbik7XG4gICAgaWYgKHJlc3VsdD8uc3VjY2Vzcykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCB7IGhhc1Blcm1pc3Npb24gYXMgaCB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.OuYYTHC7.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getBaseURL),\n/* harmony export */   b: () => (/* binding */ getHost),\n/* harmony export */   c: () => (/* binding */ getProtocol),\n/* harmony export */   g: () => (/* binding */ getOrigin)\n/* harmony export */ });\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\nfunction checkHasPath(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.pathname !== \"/\";\n  } catch (error) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n      `Invalid base URL: ${url}. Please provide a valid base URL.`\n    );\n  }\n}\nfunction withPath(url, path = \"/api/auth\") {\n  const hasPath = checkHasPath(url);\n  if (hasPath) {\n    return url;\n  }\n  path = path.startsWith(\"/\") ? path : `/${path}`;\n  return `${url.replace(/\\/+$/, \"\")}${path}`;\n}\nfunction getBaseURL(url, path, request) {\n  if (url) {\n    return withPath(url, path);\n  }\n  const fromEnv = _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NEXT_PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_AUTH_URL || (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL !== \"/\" ? _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL : void 0);\n  if (fromEnv) {\n    return withPath(fromEnv, path);\n  }\n  const fromRequest = request?.headers.get(\"x-forwarded-host\");\n  const fromRequestProto = request?.headers.get(\"x-forwarded-proto\");\n  if (fromRequest && fromRequestProto) {\n    return withPath(`${fromRequestProto}://${fromRequest}`, path);\n  }\n  if (request) {\n    const url2 = getOrigin(request.url);\n    if (!url2) {\n      throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n        \"Could not get origin from request. Please provide a valid base URL.\"\n      );\n    }\n    return withPath(url2, path);\n  }\n  if (typeof window !== \"undefined\" && window.location) {\n    return withPath(window.location.origin, path);\n  }\n  return void 0;\n}\nfunction getOrigin(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.origin;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getProtocol(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.protocol;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getHost(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.host;\n  } catch (error) {\n    return url;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguVlRYTkxGTVQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFzRDtBQUNZOztBQUVsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixjQUFjLHdEQUFlO0FBQzdCLDJCQUEyQixJQUFJO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsS0FBSztBQUNoRCxZQUFZLHdCQUF3QixFQUFFLEtBQUs7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix3REFBRyxvQkFBb0Isd0RBQUcsZ0NBQWdDLHdEQUFHLDJCQUEyQix3REFBRyxnQ0FBZ0Msd0RBQUcsMEJBQTBCLHdEQUFHLG9CQUFvQix3REFBRztBQUNwTTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaUJBQWlCLEtBQUssWUFBWTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix3REFBZTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFMkUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpbGltYXMvRG9jdW1lbnRzL0RhdmkvZXN0dWRvcy9yZWFjdC9iZXdlYXIvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLlZUWE5MRk1ULm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlIGFzIGVudiB9IGZyb20gJy4vYmV0dGVyLWF1dGguOHpveHpnLUYubWpzJztcbmltcG9ydCB7IEIgYXMgQmV0dGVyQXV0aEVycm9yIH0gZnJvbSAnLi9iZXR0ZXItYXV0aC5EZHpTSmYtbi5tanMnO1xuXG5mdW5jdGlvbiBjaGVja0hhc1BhdGgodXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwucGF0aG5hbWUgIT09IFwiL1wiO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBCZXR0ZXJBdXRoRXJyb3IoXG4gICAgICBgSW52YWxpZCBiYXNlIFVSTDogJHt1cmx9LiBQbGVhc2UgcHJvdmlkZSBhIHZhbGlkIGJhc2UgVVJMLmBcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiB3aXRoUGF0aCh1cmwsIHBhdGggPSBcIi9hcGkvYXV0aFwiKSB7XG4gIGNvbnN0IGhhc1BhdGggPSBjaGVja0hhc1BhdGgodXJsKTtcbiAgaWYgKGhhc1BhdGgpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHBhdGggPSBwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpID8gcGF0aCA6IGAvJHtwYXRofWA7XG4gIHJldHVybiBgJHt1cmwucmVwbGFjZSgvXFwvKyQvLCBcIlwiKX0ke3BhdGh9YDtcbn1cbmZ1bmN0aW9uIGdldEJhc2VVUkwodXJsLCBwYXRoLCByZXF1ZXN0KSB7XG4gIGlmICh1cmwpIHtcbiAgICByZXR1cm4gd2l0aFBhdGgodXJsLCBwYXRoKTtcbiAgfVxuICBjb25zdCBmcm9tRW52ID0gZW52LkJFVFRFUl9BVVRIX1VSTCB8fCBlbnYuTkVYVF9QVUJMSUNfQkVUVEVSX0FVVEhfVVJMIHx8IGVudi5QVUJMSUNfQkVUVEVSX0FVVEhfVVJMIHx8IGVudi5OVVhUX1BVQkxJQ19CRVRURVJfQVVUSF9VUkwgfHwgZW52Lk5VWFRfUFVCTElDX0FVVEhfVVJMIHx8IChlbnYuQkFTRV9VUkwgIT09IFwiL1wiID8gZW52LkJBU0VfVVJMIDogdm9pZCAwKTtcbiAgaWYgKGZyb21FbnYpIHtcbiAgICByZXR1cm4gd2l0aFBhdGgoZnJvbUVudiwgcGF0aCk7XG4gIH1cbiAgY29uc3QgZnJvbVJlcXVlc3QgPSByZXF1ZXN0Py5oZWFkZXJzLmdldChcIngtZm9yd2FyZGVkLWhvc3RcIik7XG4gIGNvbnN0IGZyb21SZXF1ZXN0UHJvdG8gPSByZXF1ZXN0Py5oZWFkZXJzLmdldChcIngtZm9yd2FyZGVkLXByb3RvXCIpO1xuICBpZiAoZnJvbVJlcXVlc3QgJiYgZnJvbVJlcXVlc3RQcm90bykge1xuICAgIHJldHVybiB3aXRoUGF0aChgJHtmcm9tUmVxdWVzdFByb3RvfTovLyR7ZnJvbVJlcXVlc3R9YCwgcGF0aCk7XG4gIH1cbiAgaWYgKHJlcXVlc3QpIHtcbiAgICBjb25zdCB1cmwyID0gZ2V0T3JpZ2luKHJlcXVlc3QudXJsKTtcbiAgICBpZiAoIXVybDIpIHtcbiAgICAgIHRocm93IG5ldyBCZXR0ZXJBdXRoRXJyb3IoXG4gICAgICAgIFwiQ291bGQgbm90IGdldCBvcmlnaW4gZnJvbSByZXF1ZXN0LiBQbGVhc2UgcHJvdmlkZSBhIHZhbGlkIGJhc2UgVVJMLlwiXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gd2l0aFBhdGgodXJsMiwgcGF0aCk7XG4gIH1cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIHdpdGhQYXRoKHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sIHBhdGgpO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiBnZXRPcmlnaW4odXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwub3JpZ2luO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5mdW5jdGlvbiBnZXRQcm90b2NvbCh1cmwpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJzZWRVcmwgPSBuZXcgVVJMKHVybCk7XG4gICAgcmV0dXJuIHBhcnNlZFVybC5wcm90b2NvbDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0SG9zdCh1cmwpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJzZWRVcmwgPSBuZXcgVVJMKHVybCk7XG4gICAgcmV0dXJuIHBhcnNlZFVybC5ob3N0O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbn1cblxuZXhwb3J0IHsgZ2V0QmFzZVVSTCBhcyBhLCBnZXRIb3N0IGFzIGIsIGdldFByb3RvY29sIGFzIGMsIGdldE9yaWdpbiBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ checkPassword),\n/* harmony export */   v: () => (/* binding */ validatePassword)\n/* harmony export */ });\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n\n\nasync function validatePassword(ctx, data) {\n  const accounts = await ctx.context.internalAdapter.findAccounts(data.userId);\n  const credentialAccount = accounts?.find(\n    (account) => account.providerId === \"credential\"\n  );\n  const currentPassword = credentialAccount?.password;\n  if (!credentialAccount || !currentPassword) {\n    return false;\n  }\n  const compare = await ctx.context.password.verify({\n    hash: currentPassword,\n    password: data.password\n  });\n  return compare;\n}\nasync function checkPassword(userId, c) {\n  const accounts = await c.context.internalAdapter.findAccounts(userId);\n  const credentialAccount = accounts?.find(\n    (account) => account.providerId === \"credential\"\n  );\n  const currentPassword = credentialAccount?.password;\n  if (!credentialAccount || !currentPassword || !c.body.password) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"No password credential found\"\n    });\n  }\n  const compare = await c.context.password.verify({\n    hash: currentPassword,\n    password: c.body.password\n  });\n  if (!compare) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"Invalid password\"\n    });\n  }\n  return true;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguWXdEUWhvUGMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1Qzs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaURBQVE7QUFDdEI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLGlEQUFRO0FBQ3RCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFcUQiLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpbGltYXMvRG9jdW1lbnRzL0RhdmkvZXN0dWRvcy9yZWFjdC9iZXdlYXIvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLll3RFFob1BjLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJ2JldHRlci1jYWxsJztcblxuYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVQYXNzd29yZChjdHgsIGRhdGEpIHtcbiAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCBjdHguY29udGV4dC5pbnRlcm5hbEFkYXB0ZXIuZmluZEFjY291bnRzKGRhdGEudXNlcklkKTtcbiAgY29uc3QgY3JlZGVudGlhbEFjY291bnQgPSBhY2NvdW50cz8uZmluZChcbiAgICAoYWNjb3VudCkgPT4gYWNjb3VudC5wcm92aWRlcklkID09PSBcImNyZWRlbnRpYWxcIlxuICApO1xuICBjb25zdCBjdXJyZW50UGFzc3dvcmQgPSBjcmVkZW50aWFsQWNjb3VudD8ucGFzc3dvcmQ7XG4gIGlmICghY3JlZGVudGlhbEFjY291bnQgfHwgIWN1cnJlbnRQYXNzd29yZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBjb21wYXJlID0gYXdhaXQgY3R4LmNvbnRleHQucGFzc3dvcmQudmVyaWZ5KHtcbiAgICBoYXNoOiBjdXJyZW50UGFzc3dvcmQsXG4gICAgcGFzc3dvcmQ6IGRhdGEucGFzc3dvcmRcbiAgfSk7XG4gIHJldHVybiBjb21wYXJlO1xufVxuYXN5bmMgZnVuY3Rpb24gY2hlY2tQYXNzd29yZCh1c2VySWQsIGMpIHtcbiAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCBjLmNvbnRleHQuaW50ZXJuYWxBZGFwdGVyLmZpbmRBY2NvdW50cyh1c2VySWQpO1xuICBjb25zdCBjcmVkZW50aWFsQWNjb3VudCA9IGFjY291bnRzPy5maW5kKFxuICAgIChhY2NvdW50KSA9PiBhY2NvdW50LnByb3ZpZGVySWQgPT09IFwiY3JlZGVudGlhbFwiXG4gICk7XG4gIGNvbnN0IGN1cnJlbnRQYXNzd29yZCA9IGNyZWRlbnRpYWxBY2NvdW50Py5wYXNzd29yZDtcbiAgaWYgKCFjcmVkZW50aWFsQWNjb3VudCB8fCAhY3VycmVudFBhc3N3b3JkIHx8ICFjLmJvZHkucGFzc3dvcmQpIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoXCJCQURfUkVRVUVTVFwiLCB7XG4gICAgICBtZXNzYWdlOiBcIk5vIHBhc3N3b3JkIGNyZWRlbnRpYWwgZm91bmRcIlxuICAgIH0pO1xuICB9XG4gIGNvbnN0IGNvbXBhcmUgPSBhd2FpdCBjLmNvbnRleHQucGFzc3dvcmQudmVyaWZ5KHtcbiAgICBoYXNoOiBjdXJyZW50UGFzc3dvcmQsXG4gICAgcGFzc3dvcmQ6IGMuYm9keS5wYXNzd29yZFxuICB9KTtcbiAgaWYgKCFjb21wYXJlKSB7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKFwiQkFEX1JFUVVFU1RcIiwge1xuICAgICAgbWVzc2FnZTogXCJJbnZhbGlkIHBhc3N3b3JkXCJcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IHsgY2hlY2tQYXNzd29yZCBhcyBjLCB2YWxpZGF0ZVBhc3N3b3JkIGFzIHYgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.cM0Fc3LZ.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.cM0Fc3LZ.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ requestPasswordResetCallback),\n/* harmony export */   B: () => (/* binding */ BASE_ERROR_CODES),\n/* harmony export */   C: () => (/* binding */ requestPasswordReset),\n/* harmony export */   D: () => (/* binding */ forgetPasswordCallback),\n/* harmony export */   E: () => (/* binding */ deleteUser),\n/* harmony export */   F: () => (/* binding */ setPassword),\n/* harmony export */   G: () => (/* binding */ changePassword),\n/* harmony export */   H: () => (/* binding */ HIDE_METADATA),\n/* harmony export */   I: () => (/* binding */ changeEmail),\n/* harmony export */   J: () => (/* binding */ sendVerificationEmail),\n/* harmony export */   K: () => (/* binding */ verifyEmail),\n/* harmony export */   L: () => (/* binding */ resetPassword),\n/* harmony export */   M: () => (/* binding */ forgetPassword),\n/* harmony export */   N: () => (/* binding */ signInEmail),\n/* harmony export */   O: () => (/* binding */ signOut),\n/* harmony export */   P: () => (/* binding */ callbackOAuth),\n/* harmony export */   Q: () => (/* binding */ signInSocial),\n/* harmony export */   R: () => (/* binding */ requestOnlySessionMiddleware),\n/* harmony export */   S: () => (/* binding */ optionsMiddleware),\n/* harmony export */   a: () => (/* binding */ createAuthEndpoint),\n/* harmony export */   b: () => (/* binding */ getSession),\n/* harmony export */   c: () => (/* binding */ createAuthMiddleware),\n/* harmony export */   d: () => (/* binding */ sendVerificationEmailFn),\n/* harmony export */   e: () => (/* binding */ createEmailVerificationToken),\n/* harmony export */   f: () => (/* binding */ freshSessionMiddleware),\n/* harmony export */   g: () => (/* binding */ getSessionFromCtx),\n/* harmony export */   h: () => (/* binding */ handleOAuthUserInfo),\n/* harmony export */   i: () => (/* binding */ originCheckMiddleware),\n/* harmony export */   j: () => (/* binding */ error),\n/* harmony export */   k: () => (/* binding */ ok),\n/* harmony export */   l: () => (/* binding */ listSessions),\n/* harmony export */   m: () => (/* binding */ accountInfo),\n/* harmony export */   n: () => (/* binding */ getAccessToken),\n/* harmony export */   o: () => (/* binding */ originCheck),\n/* harmony export */   p: () => (/* binding */ unlinkAccount),\n/* harmony export */   q: () => (/* binding */ deleteUserCallback),\n/* harmony export */   r: () => (/* binding */ refreshToken),\n/* harmony export */   s: () => (/* binding */ sessionMiddleware),\n/* harmony export */   t: () => (/* binding */ listUserAccounts),\n/* harmony export */   u: () => (/* binding */ updateUser),\n/* harmony export */   v: () => (/* binding */ linkSocialAccount),\n/* harmony export */   w: () => (/* binding */ wildcardMatch),\n/* harmony export */   x: () => (/* binding */ revokeOtherSessions),\n/* harmony export */   y: () => (/* binding */ revokeSessions),\n/* harmony export */   z: () => (/* binding */ revokeSession)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/types.js\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cookies/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_DPBqdYQ3_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./better-auth.DPBqdYQ3.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DPBqdYQ3.mjs\");\n/* harmony import */ var _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n/* harmony import */ var _social_providers_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../social-providers/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/social-providers/index.mjs\");\n/* harmony import */ var _better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./better-auth.tB5eU6EY.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/jwt/verify.js\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./better-auth.Cc72UxUH.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs\");\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! defu */ \"(rsc)/./node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _better_auth_DDEbWX_S_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./better-auth.DDEbWX-S.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DDEbWX-S.mjs\");\n/* harmony import */ var _better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./better-auth.VTXNLFMT.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var jose_errors__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! jose/errors */ \"(rsc)/./node_modules/jose/dist/webapi/util/errors.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst optionsMiddleware = (0,better_call__WEBPACK_IMPORTED_MODULE_1__.createMiddleware)(async () => {\n  return {};\n});\nconst createAuthMiddleware = better_call__WEBPACK_IMPORTED_MODULE_1__.createMiddleware.create({\n  use: [\n    optionsMiddleware,\n    /**\n     * Only use for post hooks\n     */\n    (0,better_call__WEBPACK_IMPORTED_MODULE_1__.createMiddleware)(async () => {\n      return {};\n    })\n  ]\n});\nconst createAuthEndpoint = better_call__WEBPACK_IMPORTED_MODULE_1__.createEndpoint.create({\n  use: [optionsMiddleware]\n});\n\nfunction escapeRegExpChar(char) {\n  if (char === \"-\" || char === \"^\" || char === \"$\" || char === \"+\" || char === \".\" || char === \"(\" || char === \")\" || char === \"|\" || char === \"[\" || char === \"]\" || char === \"{\" || char === \"}\" || char === \"*\" || char === \"?\" || char === \"\\\\\") {\n    return `\\\\${char}`;\n  } else {\n    return char;\n  }\n}\nfunction escapeRegExpString(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    result += escapeRegExpChar(str[i]);\n  }\n  return result;\n}\nfunction transform(pattern, separator = true) {\n  if (Array.isArray(pattern)) {\n    let regExpPatterns = pattern.map((p) => `^${transform(p, separator)}$`);\n    return `(?:${regExpPatterns.join(\"|\")})`;\n  }\n  let separatorSplitter = \"\";\n  let separatorMatcher = \"\";\n  let wildcard = \".\";\n  if (separator === true) {\n    separatorSplitter = \"/\";\n    separatorMatcher = \"[/\\\\\\\\]\";\n    wildcard = \"[^/\\\\\\\\]\";\n  } else if (separator) {\n    separatorSplitter = separator;\n    separatorMatcher = escapeRegExpString(separatorSplitter);\n    if (separatorMatcher.length > 1) {\n      separatorMatcher = `(?:${separatorMatcher})`;\n      wildcard = `((?!${separatorMatcher}).)`;\n    } else {\n      wildcard = `[^${separatorMatcher}]`;\n    }\n  }\n  let requiredSeparator = separator ? `${separatorMatcher}+?` : \"\";\n  let optionalSeparator = separator ? `${separatorMatcher}*?` : \"\";\n  let segments = separator ? pattern.split(separatorSplitter) : [pattern];\n  let result = \"\";\n  for (let s = 0; s < segments.length; s++) {\n    let segment = segments[s];\n    let nextSegment = segments[s + 1];\n    let currentSeparator = \"\";\n    if (!segment && s > 0) {\n      continue;\n    }\n    if (separator) {\n      if (s === segments.length - 1) {\n        currentSeparator = optionalSeparator;\n      } else if (nextSegment !== \"**\") {\n        currentSeparator = requiredSeparator;\n      } else {\n        currentSeparator = \"\";\n      }\n    }\n    if (separator && segment === \"**\") {\n      if (currentSeparator) {\n        result += s === 0 ? \"\" : currentSeparator;\n        result += `(?:${wildcard}*?${currentSeparator})*?`;\n      }\n      continue;\n    }\n    for (let c = 0; c < segment.length; c++) {\n      let char = segment[c];\n      if (char === \"\\\\\") {\n        if (c < segment.length - 1) {\n          result += escapeRegExpChar(segment[c + 1]);\n          c++;\n        }\n      } else if (char === \"?\") {\n        result += wildcard;\n      } else if (char === \"*\") {\n        result += `${wildcard}*?`;\n      } else {\n        result += escapeRegExpChar(char);\n      }\n    }\n    result += currentSeparator;\n  }\n  return result;\n}\nfunction isMatch(regexp, sample) {\n  if (typeof sample !== \"string\") {\n    throw new TypeError(`Sample must be a string, but ${typeof sample} given`);\n  }\n  return regexp.test(sample);\n}\nfunction wildcardMatch(pattern, options) {\n  if (typeof pattern !== \"string\" && !Array.isArray(pattern)) {\n    throw new TypeError(\n      `The first argument must be a single pattern string or an array of patterns, but ${typeof pattern} given`\n    );\n  }\n  if (typeof options === \"string\" || typeof options === \"boolean\") {\n    options = { separator: options };\n  }\n  if (arguments.length === 2 && !(typeof options === \"undefined\" || typeof options === \"object\" && options !== null && !Array.isArray(options))) {\n    throw new TypeError(\n      `The second argument must be an options object or a string/boolean separator, but ${typeof options} given`\n    );\n  }\n  options = options || {};\n  if (options.separator === \"\\\\\") {\n    throw new Error(\n      \"\\\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead\"\n    );\n  }\n  let regexpPattern = transform(pattern, options.separator);\n  let regexp = new RegExp(`^${regexpPattern}$`, options.flags);\n  let fn = isMatch.bind(null, regexp);\n  fn.options = options;\n  fn.pattern = pattern;\n  fn.regexp = regexp;\n  return fn;\n}\n\nconst originCheckMiddleware = createAuthMiddleware(async (ctx) => {\n  if (ctx.request?.method !== \"POST\" || !ctx.request) {\n    return;\n  }\n  const { body, query, context } = ctx;\n  const originHeader = ctx.headers?.get(\"origin\") || ctx.headers?.get(\"referer\") || \"\";\n  const callbackURL = body?.callbackURL || query?.callbackURL;\n  const redirectURL = body?.redirectTo;\n  const errorCallbackURL = body?.errorCallbackURL;\n  const newUserCallbackURL = body?.newUserCallbackURL;\n  const trustedOrigins = Array.isArray(context.options.trustedOrigins) ? context.trustedOrigins : [\n    ...context.trustedOrigins,\n    ...await context.options.trustedOrigins?.(ctx.request) || []\n  ];\n  const usesCookies = ctx.headers?.has(\"cookie\");\n  const matchesPattern = (url, pattern) => {\n    if (url.startsWith(\"/\")) {\n      return false;\n    }\n    if (pattern.includes(\"*\")) {\n      return wildcardMatch(pattern)((0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_21__.b)(url));\n    }\n    const protocol = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_21__.c)(url);\n    return protocol === \"http:\" || protocol === \"https:\" || !protocol ? pattern === (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_21__.g)(url) : url.startsWith(pattern);\n  };\n  const validateURL = (url, label) => {\n    if (!url) {\n      return;\n    }\n    const isTrustedOrigin = trustedOrigins.some(\n      (origin) => matchesPattern(url, origin) || url?.startsWith(\"/\") && label !== \"origin\" && /^\\/(?!\\/|\\\\|%2f|%5c)[\\w\\-.\\+/@]*(?:\\?[\\w\\-.\\+/=&%@]*)?$/.test(url)\n    );\n    if (!isTrustedOrigin) {\n      ctx.context.logger.error(`Invalid ${label}: ${url}`);\n      ctx.context.logger.info(\n        `If it's a valid URL, please add ${url} to trustedOrigins in your auth config\n`,\n        `Current list of trustedOrigins: ${trustedOrigins}`\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"FORBIDDEN\", { message: `Invalid ${label}` });\n    }\n  };\n  if (usesCookies && !ctx.context.options.advanced?.disableCSRFCheck) {\n    validateURL(originHeader, \"origin\");\n  }\n  callbackURL && validateURL(callbackURL, \"callbackURL\");\n  redirectURL && validateURL(redirectURL, \"redirectURL\");\n  errorCallbackURL && validateURL(errorCallbackURL, \"errorCallbackURL\");\n  newUserCallbackURL && validateURL(newUserCallbackURL, \"newUserCallbackURL\");\n});\nconst originCheck = (getValue) => createAuthMiddleware(async (ctx) => {\n  if (!ctx.request) {\n    return;\n  }\n  const { context } = ctx;\n  const callbackURL = getValue(ctx);\n  const trustedOrigins = Array.isArray(\n    context.options.trustedOrigins\n  ) ? context.trustedOrigins : [\n    ...context.trustedOrigins,\n    ...await context.options.trustedOrigins?.(ctx.request) || []\n  ];\n  const matchesPattern = (url, pattern) => {\n    if (url.startsWith(\"/\")) {\n      return false;\n    }\n    if (pattern.includes(\"*\")) {\n      return wildcardMatch(pattern)((0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_21__.b)(url));\n    }\n    const protocol = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_21__.c)(url);\n    return protocol === \"http:\" || protocol === \"https:\" || !protocol ? pattern === (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_21__.g)(url) : url.startsWith(pattern);\n  };\n  const validateURL = (url, label) => {\n    if (!url) {\n      return;\n    }\n    const isTrustedOrigin = trustedOrigins.some(\n      (origin) => matchesPattern(url, origin) || url?.startsWith(\"/\") && label !== \"origin\" && /^\\/(?!\\/|\\\\|%2f|%5c)[\\w\\-.\\+/@]*(?:\\?[\\w\\-.\\+/=&%@]*)?$/.test(\n        url\n      )\n    );\n    if (!isTrustedOrigin) {\n      ctx.context.logger.error(`Invalid ${label}: ${url}`);\n      ctx.context.logger.info(\n        `If it's a valid URL, please add ${url} to trustedOrigins in your auth config\n`,\n        `Current list of trustedOrigins: ${trustedOrigins}`\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"FORBIDDEN\", { message: `Invalid ${label}` });\n    }\n  };\n  const callbacks = Array.isArray(callbackURL) ? callbackURL : [callbackURL];\n  for (const url of callbacks) {\n    validateURL(url, \"callbackURL\");\n  }\n});\n\nconst BASE_ERROR_CODES = {\n  USER_NOT_FOUND: \"User not found\",\n  FAILED_TO_CREATE_USER: \"Failed to create user\",\n  FAILED_TO_CREATE_SESSION: \"Failed to create session\",\n  FAILED_TO_UPDATE_USER: \"Failed to update user\",\n  FAILED_TO_GET_SESSION: \"Failed to get session\",\n  INVALID_PASSWORD: \"Invalid password\",\n  INVALID_EMAIL: \"Invalid email\",\n  INVALID_EMAIL_OR_PASSWORD: \"Invalid email or password\",\n  SOCIAL_ACCOUNT_ALREADY_LINKED: \"Social account already linked\",\n  PROVIDER_NOT_FOUND: \"Provider not found\",\n  INVALID_TOKEN: \"invalid token\",\n  ID_TOKEN_NOT_SUPPORTED: \"id_token not supported\",\n  FAILED_TO_GET_USER_INFO: \"Failed to get user info\",\n  USER_EMAIL_NOT_FOUND: \"User email not found\",\n  EMAIL_NOT_VERIFIED: \"Email not verified\",\n  PASSWORD_TOO_SHORT: \"Password too short\",\n  PASSWORD_TOO_LONG: \"Password too long\",\n  USER_ALREADY_EXISTS: \"User already exists\",\n  EMAIL_CAN_NOT_BE_UPDATED: \"Email can not be updated\",\n  CREDENTIAL_ACCOUNT_NOT_FOUND: \"Credential account not found\",\n  SESSION_EXPIRED: \"Session expired. Re-authenticate to perform this action.\",\n  FAILED_TO_UNLINK_LAST_ACCOUNT: \"You can't unlink your last account\",\n  ACCOUNT_NOT_FOUND: \"Account not found\",\n  USER_ALREADY_HAS_PASSWORD: \"User already has a password. Provide that to delete the account.\"\n};\n\nconst getSession = () => createAuthEndpoint(\n  \"/get-session\",\n  {\n    method: \"GET\",\n    query: zod__WEBPACK_IMPORTED_MODULE_22__.optional(\n      zod__WEBPACK_IMPORTED_MODULE_22__.object({\n        /**\n         * If cookie cache is enabled, it will disable the cache\n         * and fetch the session from the database\n         */\n        disableCookieCache: zod__WEBPACK_IMPORTED_MODULE_22__.optional(\n          zod__WEBPACK_IMPORTED_MODULE_22__.boolean({\n            description: \"Disable cookie cache and fetch session from database\"\n          }).or(zod__WEBPACK_IMPORTED_MODULE_22__.string().transform((v) => v === \"true\"))\n        ).optional(),\n        disableRefresh: zod__WEBPACK_IMPORTED_MODULE_22__.boolean({\n          description: \"Disable session refresh. Useful for checking session status, without updating the session\"\n        }).or(zod__WEBPACK_IMPORTED_MODULE_22__.string().transform((v) => v === \"true\")).optional()\n      })\n    ),\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Get the current session\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    session: {\n                      $ref: \"#/components/schemas/Session\"\n                    },\n                    user: {\n                      $ref: \"#/components/schemas/User\"\n                    }\n                  },\n                  required: [\"session\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      const sessionCookieToken = await ctx.getSignedCookie(\n        ctx.context.authCookies.sessionToken.name,\n        ctx.context.secret\n      );\n      if (!sessionCookieToken) {\n        return null;\n      }\n      const sessionDataCookie = ctx.getCookie(\n        ctx.context.authCookies.sessionData.name\n      );\n      const sessionDataPayload = sessionDataCookie ? (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_6__.s)(_better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_17__.binary.decode(_better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_10__.base64.decode(sessionDataCookie))) : null;\n      if (sessionDataPayload) {\n        const isValid = await (0,_better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_16__.createHMAC)(\"SHA-256\", \"base64urlnopad\").verify(\n          ctx.context.secret,\n          JSON.stringify({\n            ...sessionDataPayload.session,\n            expiresAt: sessionDataPayload.expiresAt\n          }),\n          sessionDataPayload.signature\n        );\n        if (!isValid) {\n          const dataCookie = ctx.context.authCookies.sessionData.name;\n          ctx.setCookie(dataCookie, \"\", {\n            maxAge: 0\n          });\n          return ctx.json(null);\n        }\n      }\n      const dontRememberMe = await ctx.getSignedCookie(\n        ctx.context.authCookies.dontRememberToken.name,\n        ctx.context.secret\n      );\n      if (sessionDataPayload?.session && ctx.context.options.session?.cookieCache?.enabled && !ctx.query?.disableCookieCache) {\n        const session2 = sessionDataPayload.session;\n        const hasExpired = sessionDataPayload.expiresAt < Date.now() || session2.session.expiresAt < /* @__PURE__ */ new Date();\n        if (!hasExpired) {\n          return ctx.json(\n            session2\n          );\n        } else {\n          const dataCookie = ctx.context.authCookies.sessionData.name;\n          ctx.setCookie(dataCookie, \"\", {\n            maxAge: 0\n          });\n        }\n      }\n      const session = await ctx.context.internalAdapter.findSession(sessionCookieToken);\n      ctx.context.session = session;\n      if (!session || session.session.expiresAt < /* @__PURE__ */ new Date()) {\n        (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.deleteSessionCookie)(ctx);\n        if (session) {\n          await ctx.context.internalAdapter.deleteSession(\n            session.session.token\n          );\n        }\n        return ctx.json(null);\n      }\n      if (dontRememberMe || ctx.query?.disableRefresh) {\n        return ctx.json(\n          session\n        );\n      }\n      const expiresIn = ctx.context.sessionConfig.expiresIn;\n      const updateAge = ctx.context.sessionConfig.updateAge;\n      const sessionIsDueToBeUpdatedDate = session.session.expiresAt.valueOf() - expiresIn * 1e3 + updateAge * 1e3;\n      const shouldBeUpdated = sessionIsDueToBeUpdatedDate <= Date.now();\n      if (shouldBeUpdated && (!ctx.query?.disableRefresh || !ctx.context.options.session?.disableSessionRefresh)) {\n        const updatedSession = await ctx.context.internalAdapter.updateSession(\n          session.session.token,\n          {\n            expiresAt: (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_7__.g)(ctx.context.sessionConfig.expiresIn, \"sec\"),\n            updatedAt: /* @__PURE__ */ new Date()\n          }\n        );\n        if (!updatedSession) {\n          (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.deleteSessionCookie)(ctx);\n          return ctx.json(null, { status: 401 });\n        }\n        const maxAge = (updatedSession.expiresAt.valueOf() - Date.now()) / 1e3;\n        await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.setSessionCookie)(\n          ctx,\n          {\n            session: updatedSession,\n            user: session.user\n          },\n          false,\n          {\n            maxAge\n          }\n        );\n        return ctx.json({\n          session: updatedSession,\n          user: session.user\n        });\n      }\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.setCookieCache)(ctx, session);\n      return ctx.json(\n        session\n      );\n    } catch (error) {\n      ctx.context.logger.error(\"INTERNAL_SERVER_ERROR\", error);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"INTERNAL_SERVER_ERROR\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n      });\n    }\n  }\n);\nconst getSessionFromCtx = async (ctx, config) => {\n  if (ctx.context.session) {\n    return ctx.context.session;\n  }\n  const session = await getSession()({\n    ...ctx,\n    asResponse: false,\n    headers: ctx.headers,\n    returnHeaders: false,\n    query: {\n      ...config,\n      ...ctx.query\n    }\n  }).catch((e) => {\n    return null;\n  });\n  ctx.context.session = session;\n  return session;\n};\nconst sessionMiddleware = createAuthMiddleware(async (ctx) => {\n  const session = await getSessionFromCtx(ctx);\n  if (!session?.session) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\");\n  }\n  return {\n    session\n  };\n});\nconst requestOnlySessionMiddleware = createAuthMiddleware(\n  async (ctx) => {\n    const session = await getSessionFromCtx(ctx);\n    if (!session?.session && (ctx.request || ctx.headers)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\");\n    }\n    return { session };\n  }\n);\nconst freshSessionMiddleware = createAuthMiddleware(async (ctx) => {\n  const session = await getSessionFromCtx(ctx);\n  if (!session?.session) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\");\n  }\n  if (ctx.context.sessionConfig.freshAge === 0) {\n    return {\n      session\n    };\n  }\n  const freshAge = ctx.context.sessionConfig.freshAge;\n  const lastUpdated = session.session.updatedAt?.valueOf() || session.session.createdAt.valueOf();\n  const now = Date.now();\n  const isFresh = now - lastUpdated < freshAge * 1e3;\n  if (!isFresh) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"FORBIDDEN\", {\n      message: \"Session is not fresh\"\n    });\n  }\n  return {\n    session\n  };\n});\nconst listSessions = () => createAuthEndpoint(\n  \"/list-sessions\",\n  {\n    method: \"GET\",\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"List all active sessions for the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    $ref: \"#/components/schemas/Session\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      const sessions = await ctx.context.internalAdapter.listSessions(\n        ctx.context.session.user.id\n      );\n      const activeSessions = sessions.filter((session) => {\n        return session.expiresAt > /* @__PURE__ */ new Date();\n      });\n      return ctx.json(\n        activeSessions\n      );\n    } catch (e) {\n      ctx.context.logger.error(e);\n      throw ctx.error(\"INTERNAL_SERVER_ERROR\");\n    }\n  }\n);\nconst revokeSession = createAuthEndpoint(\n  \"/revoke-session\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      token: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The token to revoke\"\n      })\n    }),\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Revoke a single session\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  token: {\n                    type: \"string\",\n                    description: \"The token to revoke\"\n                  }\n                },\n                required: [\"token\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the session was revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const token = ctx.body.token;\n    const findSession = await ctx.context.internalAdapter.findSession(token);\n    if (!findSession) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Session not found\"\n      });\n    }\n    if (findSession.session.userId !== ctx.context.session.user.id) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\");\n    }\n    try {\n      await ctx.context.internalAdapter.deleteSession(token);\n    } catch (error) {\n      ctx.context.logger.error(\n        error && typeof error === \"object\" && \"name\" in error ? error.name : \"\",\n        error\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"INTERNAL_SERVER_ERROR\");\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst revokeSessions = createAuthEndpoint(\n  \"/revoke-sessions\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Revoke all sessions for the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if all sessions were revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      await ctx.context.internalAdapter.deleteSessions(\n        ctx.context.session.user.id\n      );\n    } catch (error) {\n      ctx.context.logger.error(\n        error && typeof error === \"object\" && \"name\" in error ? error.name : \"\",\n        error\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"INTERNAL_SERVER_ERROR\");\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst revokeOtherSessions = createAuthEndpoint(\n  \"/revoke-other-sessions\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Revoke all other sessions for the user except the current one\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if all other sessions were revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    if (!session.user) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\");\n    }\n    const sessions = await ctx.context.internalAdapter.listSessions(\n      session.user.id\n    );\n    const activeSessions = sessions.filter((session2) => {\n      return session2.expiresAt > /* @__PURE__ */ new Date();\n    });\n    const otherSessions = activeSessions.filter(\n      (session2) => session2.token !== ctx.context.session.session.token\n    );\n    await Promise.all(\n      otherSessions.map(\n        (session2) => ctx.context.internalAdapter.deleteSession(session2.token)\n      )\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nasync function createEmailVerificationToken(secret, email, updateTo, expiresIn = 3600) {\n  const token = await (0,_better_auth_DDEbWX_S_mjs__WEBPACK_IMPORTED_MODULE_20__.s)(\n    {\n      email: email.toLowerCase(),\n      updateTo\n    },\n    secret,\n    expiresIn\n  );\n  return token;\n}\nasync function sendVerificationEmailFn(ctx, user) {\n  if (!ctx.context.options.emailVerification?.sendVerificationEmail) {\n    ctx.context.logger.error(\"Verification email isn't enabled.\");\n    throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n      message: \"Verification email isn't enabled\"\n    });\n  }\n  const token = await createEmailVerificationToken(\n    ctx.context.secret,\n    user.email,\n    void 0,\n    ctx.context.options.emailVerification?.expiresIn\n  );\n  const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n  await ctx.context.options.emailVerification.sendVerificationEmail(\n    {\n      user,\n      url,\n      token\n    },\n    ctx.request\n  );\n}\nconst sendVerificationEmail = createAuthEndpoint(\n  \"/send-verification-email\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      email: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The email to send the verification email to\"\n      }).email(),\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The URL to use for email verification callback\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a verification email to the user\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  email: {\n                    type: \"string\",\n                    description: \"The email to send the verification email to\",\n                    example: \"user@example.com\"\n                  },\n                  callbackURL: {\n                    type: \"string\",\n                    description: \"The URL to use for email verification callback\",\n                    example: \"https://example.com/callback\",\n                    nullable: true\n                  }\n                },\n                required: [\"email\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the email was sent successfully\",\n                      example: true\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            description: \"Bad Request\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    message: {\n                      type: \"string\",\n                      description: \"Error message\",\n                      example: \"Verification email isn't enabled\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailVerification?.sendVerificationEmail) {\n      ctx.context.logger.error(\"Verification email isn't enabled.\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Verification email isn't enabled\"\n      });\n    }\n    const { email } = ctx.body;\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      const user = await ctx.context.internalAdapter.findUserByEmail(email);\n      if (!user) {\n        return ctx.json({\n          status: true\n        });\n      }\n      await sendVerificationEmailFn(ctx, user.user);\n      return ctx.json({\n        status: true\n      });\n    }\n    if (session?.user.emailVerified) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"You can only send a verification email to an unverified email\"\n      });\n    }\n    if (session?.user.email !== email) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"You can only send a verification email to your own email\"\n      });\n    }\n    await sendVerificationEmailFn(ctx, session.user);\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst verifyEmail = createAuthEndpoint(\n  \"/verify-email\",\n  {\n    method: \"GET\",\n    query: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      token: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The token to verify the email\"\n      }),\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The URL to redirect to after email verification\"\n      }).optional()\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Verify the email of the user\",\n        parameters: [\n          {\n            name: \"token\",\n            in: \"query\",\n            description: \"The token to verify the email\",\n            required: true,\n            schema: {\n              type: \"string\"\n            }\n          },\n          {\n            name: \"callbackURL\",\n            in: \"query\",\n            description: \"The URL to redirect to after email verification\",\n            required: false,\n            schema: {\n              type: \"string\"\n            }\n          }\n        ],\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"User ID\"\n                        },\n                        email: {\n                          type: \"string\",\n                          description: \"User email\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"User name\"\n                        },\n                        image: {\n                          type: \"string\",\n                          description: \"User image URL\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Indicates if the user email is verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          description: \"User creation date\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          description: \"User update date\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"image\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    },\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the email was verified successfully\"\n                    }\n                  },\n                  required: [\"user\", \"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    function redirectOnError(error) {\n      if (ctx.query.callbackURL) {\n        if (ctx.query.callbackURL.includes(\"?\")) {\n          throw ctx.redirect(`${ctx.query.callbackURL}&error=${error}`);\n        }\n        throw ctx.redirect(`${ctx.query.callbackURL}?error=${error}`);\n      }\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n        message: error\n      });\n    }\n    const { token } = ctx.query;\n    let jwt;\n    try {\n      jwt = await (0,jose__WEBPACK_IMPORTED_MODULE_23__.jwtVerify)(\n        token,\n        new TextEncoder().encode(ctx.context.secret),\n        {\n          algorithms: [\"HS256\"]\n        }\n      );\n    } catch (e) {\n      if (e instanceof jose_errors__WEBPACK_IMPORTED_MODULE_24__.JWTExpired) {\n        return redirectOnError(\"token_expired\");\n      }\n      return redirectOnError(\"invalid_token\");\n    }\n    const schema = zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      email: zod__WEBPACK_IMPORTED_MODULE_22__.string().email(),\n      updateTo: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional()\n    });\n    const parsed = schema.parse(jwt.payload);\n    const user = await ctx.context.internalAdapter.findUserByEmail(\n      parsed.email\n    );\n    if (!user) {\n      return redirectOnError(\"user_not_found\");\n    }\n    if (parsed.updateTo) {\n      const session = await getSessionFromCtx(ctx);\n      if (!session) {\n        if (ctx.query.callbackURL) {\n          throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);\n        }\n        return redirectOnError(\"unauthorized\");\n      }\n      if (session.user.email !== parsed.email) {\n        if (ctx.query.callbackURL) {\n          throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);\n        }\n        return redirectOnError(\"unauthorized\");\n      }\n      const updatedUser = await ctx.context.internalAdapter.updateUserByEmail(\n        parsed.email,\n        {\n          email: parsed.updateTo,\n          emailVerified: false\n        },\n        ctx\n      );\n      const newToken = await createEmailVerificationToken(\n        ctx.context.secret,\n        parsed.updateTo\n      );\n      await ctx.context.options.emailVerification?.sendVerificationEmail?.(\n        {\n          user: updatedUser,\n          url: `${ctx.context.baseURL}/verify-email?token=${newToken}&callbackURL=${ctx.query.callbackURL || \"/\"}`,\n          token: newToken\n        },\n        ctx.request\n      );\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.setSessionCookie)(ctx, {\n        session: session.session,\n        user: {\n          ...session.user,\n          email: parsed.updateTo,\n          emailVerified: false\n        }\n      });\n      if (ctx.query.callbackURL) {\n        throw ctx.redirect(ctx.query.callbackURL);\n      }\n      return ctx.json({\n        status: true,\n        user: {\n          id: updatedUser.id,\n          email: updatedUser.email,\n          name: updatedUser.name,\n          image: updatedUser.image,\n          emailVerified: updatedUser.emailVerified,\n          createdAt: updatedUser.createdAt,\n          updatedAt: updatedUser.updatedAt\n        }\n      });\n    }\n    await ctx.context.options.emailVerification?.onEmailVerification?.(\n      user.user,\n      ctx.request\n    );\n    await ctx.context.internalAdapter.updateUserByEmail(\n      parsed.email,\n      {\n        emailVerified: true\n      },\n      ctx\n    );\n    if (ctx.context.options.emailVerification?.autoSignInAfterVerification) {\n      const currentSession = await getSessionFromCtx(ctx);\n      if (!currentSession || currentSession.user.email !== parsed.email) {\n        const session = await ctx.context.internalAdapter.createSession(\n          user.user.id,\n          ctx\n        );\n        if (!session) {\n          throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"INTERNAL_SERVER_ERROR\", {\n            message: \"Failed to create session\"\n          });\n        }\n        await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.setSessionCookie)(ctx, {\n          session,\n          user: {\n            ...user.user,\n            emailVerified: true\n          }\n        });\n      } else {\n        await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.setSessionCookie)(ctx, {\n          session: currentSession.session,\n          user: {\n            ...currentSession.user,\n            emailVerified: true\n          }\n        });\n      }\n    }\n    if (ctx.query.callbackURL) {\n      throw ctx.redirect(ctx.query.callbackURL);\n    }\n    return ctx.json({\n      status: true,\n      user: null\n    });\n  }\n);\n\nconst HIDE_METADATA = {\n  isAction: false\n};\n\nasync function handleOAuthUserInfo(c, {\n  userInfo,\n  account,\n  callbackURL,\n  disableSignUp,\n  overrideUserInfo\n}) {\n  const dbUser = await c.context.internalAdapter.findOAuthUser(\n    userInfo.email.toLowerCase(),\n    account.accountId,\n    account.providerId\n  ).catch((e) => {\n    _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_4__.l.error(\n      \"Better auth was unable to query your database.\\nError: \",\n      e\n    );\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=internal_server_error`);\n  });\n  let user = dbUser?.user;\n  let isRegister = !user;\n  if (dbUser) {\n    const hasBeenLinked = dbUser.accounts.find(\n      (a) => a.providerId === account.providerId && a.accountId === account.accountId\n    );\n    if (!hasBeenLinked) {\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(\n        account.providerId\n      );\n      if (!isTrustedProvider && !userInfo.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        if (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_15__.b) {\n          _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_4__.l.warn(\n            `User already exist but account isn't linked to ${account.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`\n          );\n        }\n        return {\n          error: \"account not linked\",\n          data: null\n        };\n      }\n      try {\n        await c.context.internalAdapter.linkAccount(\n          {\n            providerId: account.providerId,\n            accountId: userInfo.id.toString(),\n            userId: dbUser.user.id,\n            accessToken: account.accessToken,\n            idToken: account.idToken,\n            refreshToken: account.refreshToken,\n            accessTokenExpiresAt: account.accessTokenExpiresAt,\n            refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n            scope: account.scope\n          },\n          c\n        );\n      } catch (e) {\n        _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_4__.l.error(\"Unable to link account\", e);\n        return {\n          error: \"unable to link account\",\n          data: null\n        };\n      }\n    } else {\n      if (c.context.options.account?.updateAccountOnSignIn !== false) {\n        const updateData = Object.fromEntries(\n          Object.entries({\n            accessToken: account.accessToken,\n            idToken: account.idToken,\n            refreshToken: account.refreshToken,\n            accessTokenExpiresAt: account.accessTokenExpiresAt,\n            refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n            scope: account.scope\n          }).filter(([_, value]) => value !== void 0)\n        );\n        if (Object.keys(updateData).length > 0) {\n          await c.context.internalAdapter.updateAccount(\n            hasBeenLinked.id,\n            updateData,\n            c\n          );\n        }\n      }\n    }\n    if (overrideUserInfo) {\n      const { id: _, ...restUserInfo } = userInfo;\n      await c.context.internalAdapter.updateUser(dbUser.user.id, {\n        ...restUserInfo,\n        email: userInfo.email.toLowerCase(),\n        emailVerified: userInfo.email.toLowerCase() === dbUser.user.email ? dbUser.user.emailVerified || userInfo.emailVerified : userInfo.emailVerified\n      });\n    }\n  } else {\n    if (disableSignUp) {\n      return {\n        error: \"signup disabled\",\n        data: null,\n        isRegister: false\n      };\n    }\n    try {\n      const { id: _, ...restUserInfo } = userInfo;\n      user = await c.context.internalAdapter.createOAuthUser(\n        {\n          ...restUserInfo,\n          email: userInfo.email.toLowerCase()\n        },\n        {\n          accessToken: account.accessToken,\n          idToken: account.idToken,\n          refreshToken: account.refreshToken,\n          accessTokenExpiresAt: account.accessTokenExpiresAt,\n          refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n          scope: account.scope,\n          providerId: account.providerId,\n          accountId: userInfo.id.toString()\n        },\n        c\n      ).then((res) => res?.user);\n      if (!userInfo.emailVerified && user && c.context.options.emailVerification?.sendOnSignUp) {\n        const token = await createEmailVerificationToken(\n          c.context.secret,\n          user.email,\n          void 0,\n          c.context.options.emailVerification?.expiresIn\n        );\n        const url = `${c.context.baseURL}/verify-email?token=${token}&callbackURL=${callbackURL}`;\n        await c.context.options.emailVerification?.sendVerificationEmail?.(\n          {\n            user,\n            url,\n            token\n          },\n          c.request\n        );\n      }\n    } catch (e) {\n      _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_4__.l.error(e);\n      if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_1__.APIError) {\n        return {\n          error: e.message,\n          data: null,\n          isRegister: false\n        };\n      }\n      return {\n        error: \"unable to create user\",\n        data: null,\n        isRegister: false\n      };\n    }\n  }\n  if (!user) {\n    return {\n      error: \"unable to create user\",\n      data: null,\n      isRegister: false\n    };\n  }\n  const session = await c.context.internalAdapter.createSession(user.id, c);\n  if (!session) {\n    return {\n      error: \"unable to create session\",\n      data: null,\n      isRegister: false\n    };\n  }\n  return {\n    data: {\n      session,\n      user\n    },\n    error: null,\n    isRegister\n  };\n}\n\nconst signInSocial = createAuthEndpoint(\n  \"/sign-in/social\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      /**\n       * Callback URL to redirect to after the user\n       * has signed in.\n       */\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"Callback URL to redirect to after the user has signed in\"\n      }).optional(),\n      /**\n       * callback url to redirect if the user is newly registered.\n       *\n       * useful if you have different routes for existing users and new users\n       */\n      newUserCallbackURL: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional(),\n      /**\n       * Callback url to redirect to if an error happens\n       *\n       * If it's initiated from the client sdk this defaults to\n       * the current url.\n       */\n      errorCallbackURL: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"Callback URL to redirect to if an error happens\"\n      }).optional(),\n      /**\n       * OAuth2 provider to use`\n       */\n      provider: _social_providers_index_mjs__WEBPACK_IMPORTED_MODULE_5__.SocialProviderListEnum,\n      /**\n       * Disable automatic redirection to the provider\n       *\n       * This is useful if you want to handle the redirection\n       * yourself like in a popup or a different tab.\n       */\n      disableRedirect: zod__WEBPACK_IMPORTED_MODULE_22__.boolean({\n        description: \"Disable automatic redirection to the provider. Useful for handling the redirection yourself\"\n      }).optional(),\n      /**\n       * ID token from the provider\n       *\n       * This is used to sign in the user\n       * if the user is already signed in with the\n       * provider in the frontend.\n       *\n       * Only applicable if the provider supports\n       * it. Currently only `apple` and `google` is\n       * supported out of the box.\n       */\n      idToken: zod__WEBPACK_IMPORTED_MODULE_22__.optional(\n        zod__WEBPACK_IMPORTED_MODULE_22__.object({\n          /**\n           * ID token from the provider\n           */\n          token: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n            description: \"ID token from the provider\"\n          }),\n          /**\n           * The nonce used to generate the token\n           */\n          nonce: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n            description: \"Nonce used to generate the token\"\n          }).optional(),\n          /**\n           * Access token from the provider\n           */\n          accessToken: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n            description: \"Access token from the provider\"\n          }).optional(),\n          /**\n           * Refresh token from the provider\n           */\n          refreshToken: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n            description: \"Refresh token from the provider\"\n          }).optional(),\n          /**\n           * Expiry date of the token\n           */\n          expiresAt: zod__WEBPACK_IMPORTED_MODULE_22__.number({\n            description: \"Expiry date of the token\"\n          }).optional()\n        }),\n        {\n          description: \"ID token from the provider to sign in the user with id token\"\n        }\n      ),\n      scopes: zod__WEBPACK_IMPORTED_MODULE_22__.array(zod__WEBPACK_IMPORTED_MODULE_22__.string(), {\n        description: \"Array of scopes to request from the provider. This will override the default scopes passed.\"\n      }).optional(),\n      /**\n       * Explicitly request sign-up\n       *\n       * Should be used to allow sign up when\n       * disableImplicitSignUp for this provider is\n       * true\n       */\n      requestSignUp: zod__WEBPACK_IMPORTED_MODULE_22__.boolean({\n        description: \"Explicitly request sign-up. Useful when disableImplicitSignUp is true for this provider\"\n      }).optional(),\n      /**\n       * The login hint to use for the authorization code request\n       */\n      loginHint: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The login hint to use for the authorization code request\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Sign in with a social provider\",\n        operationId: \"socialSignIn\",\n        responses: {\n          \"200\": {\n            description: \"Success - Returns either session details or redirect URL\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  // todo: we need support for multiple schema\n                  type: \"object\",\n                  description: \"Session response when idToken is provided\",\n                  properties: {\n                    redirect: {\n                      type: \"boolean\",\n                      enum: [false]\n                    },\n                    token: {\n                      type: \"string\",\n                      description: \"Session token\",\n                      url: {\n                        type: \"null\",\n                        nullable: true\n                      },\n                      user: {\n                        type: \"object\",\n                        properties: {\n                          id: { type: \"string\" },\n                          email: { type: \"string\" },\n                          name: {\n                            type: \"string\",\n                            nullable: true\n                          },\n                          image: {\n                            type: \"string\",\n                            nullable: true\n                          },\n                          emailVerified: {\n                            type: \"boolean\"\n                          },\n                          createdAt: {\n                            type: \"string\",\n                            format: \"date-time\"\n                          },\n                          updatedAt: {\n                            type: \"string\",\n                            format: \"date-time\"\n                          }\n                        },\n                        required: [\n                          \"id\",\n                          \"email\",\n                          \"emailVerified\",\n                          \"createdAt\",\n                          \"updatedAt\"\n                        ]\n                      }\n                    }\n                  },\n                  required: [\"redirect\", \"token\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.body.provider\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Provider not found. Make sure to add the provider in your auth config\",\n        {\n          provider: c.body.provider\n        }\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.PROVIDER_NOT_FOUND\n      });\n    }\n    if (c.body.idToken) {\n      if (!provider.verifyIdToken) {\n        c.context.logger.error(\n          \"Provider does not support id token verification\",\n          {\n            provider: c.body.provider\n          }\n        );\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\", {\n          message: BASE_ERROR_CODES.ID_TOKEN_NOT_SUPPORTED\n        });\n      }\n      const { token, nonce } = c.body.idToken;\n      const valid = await provider.verifyIdToken(token, nonce);\n      if (!valid) {\n        c.context.logger.error(\"Invalid id token\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.INVALID_TOKEN\n        });\n      }\n      const userInfo = await provider.getUserInfo({\n        idToken: token,\n        accessToken: c.body.idToken.accessToken,\n        refreshToken: c.body.idToken.refreshToken\n      });\n      if (!userInfo || !userInfo?.user) {\n        c.context.logger.error(\"Failed to get user info\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n        });\n      }\n      if (!userInfo.user.email) {\n        c.context.logger.error(\"User email not found\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.USER_EMAIL_NOT_FOUND\n        });\n      }\n      const data = await handleOAuthUserInfo(c, {\n        userInfo: {\n          ...userInfo.user,\n          email: userInfo.user.email,\n          id: userInfo.user.id,\n          name: userInfo.user.name || \"\",\n          image: userInfo.user.image,\n          emailVerified: userInfo.user.emailVerified || false\n        },\n        account: {\n          providerId: provider.id,\n          accountId: userInfo.user.id,\n          accessToken: c.body.idToken.accessToken\n        },\n        callbackURL: c.body.callbackURL,\n        disableSignUp: provider.disableImplicitSignUp && !c.body.requestSignUp || provider.disableSignUp\n      });\n      if (data.error) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: data.error\n        });\n      }\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.setSessionCookie)(c, data.data);\n      return c.json({\n        redirect: false,\n        token: data.data.session.token,\n        url: void 0,\n        user: {\n          id: data.data.user.id,\n          email: data.data.user.email,\n          name: data.data.user.name,\n          image: data.data.user.image,\n          emailVerified: data.data.user.emailVerified,\n          createdAt: data.data.user.createdAt,\n          updatedAt: data.data.user.updatedAt\n        }\n      });\n    }\n    const { codeVerifier, state } = await (0,_better_auth_DPBqdYQ3_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(c);\n    const url = await provider.createAuthorizationURL({\n      state,\n      codeVerifier,\n      redirectURI: `${c.context.baseURL}/callback/${provider.id}`,\n      scopes: c.body.scopes,\n      loginHint: c.body.loginHint\n    });\n    return c.json({\n      url: url.toString(),\n      redirect: !c.body.disableRedirect\n    });\n  }\n);\nconst signInEmail = createAuthEndpoint(\n  \"/sign-in/email\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      /**\n       * Email of the user\n       */\n      email: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"Email of the user\"\n      }),\n      /**\n       * Password of the user\n       */\n      password: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"Password of the user\"\n      }),\n      /**\n       * Callback URL to use as a redirect for email\n       * verification and for possible redirects\n       */\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"Callback URL to use as a redirect for email verification\"\n      }).optional(),\n      /**\n       * If this is false, the session will not be remembered\n       * @default true\n       */\n      rememberMe: zod__WEBPACK_IMPORTED_MODULE_22__.boolean({\n        description: \"If this is false, the session will not be remembered. Default is `true`.\"\n      }).default(true).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Sign in with email and password\",\n        responses: {\n          \"200\": {\n            description: \"Success - Returns either session details or redirect URL\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  // todo: we need support for multiple schema\n                  type: \"object\",\n                  description: \"Session response when idToken is provided\",\n                  properties: {\n                    redirect: {\n                      type: \"boolean\",\n                      enum: [false]\n                    },\n                    token: {\n                      type: \"string\",\n                      description: \"Session token\"\n                    },\n                    url: {\n                      type: \"null\",\n                      nullable: true\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: { type: \"string\" },\n                        email: { type: \"string\" },\n                        name: {\n                          type: \"string\",\n                          nullable: true\n                        },\n                        image: {\n                          type: \"string\",\n                          nullable: true\n                        },\n                        emailVerified: {\n                          type: \"boolean\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"redirect\", \"token\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options?.emailAndPassword?.enabled) {\n      ctx.context.logger.error(\n        \"Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Email and password is not enabled\"\n      });\n    }\n    const { email, password } = ctx.body;\n    const isValidEmail = zod__WEBPACK_IMPORTED_MODULE_22__.string().email().safeParse(email);\n    if (!isValidEmail.success) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL\n      });\n    }\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      await ctx.context.password.hash(password);\n      ctx.context.logger.error(\"User not found\", { email });\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const credentialAccount = user.accounts.find(\n      (a) => a.providerId === \"credential\"\n    );\n    if (!credentialAccount) {\n      ctx.context.logger.error(\"Credential account not found\", { email });\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const currentPassword = credentialAccount?.password;\n    if (!currentPassword) {\n      ctx.context.logger.error(\"Password not found\", { email });\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const validPassword = await ctx.context.password.verify({\n      hash: currentPassword,\n      password\n    });\n    if (!validPassword) {\n      ctx.context.logger.error(\"Invalid password\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    if (ctx.context.options?.emailAndPassword?.requireEmailVerification && !user.user.emailVerified) {\n      if (!ctx.context.options?.emailVerification?.sendVerificationEmail) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"FORBIDDEN\", {\n          message: BASE_ERROR_CODES.EMAIL_NOT_VERIFIED\n        });\n      }\n      const token = await createEmailVerificationToken(\n        ctx.context.secret,\n        user.user.email,\n        void 0,\n        ctx.context.options.emailVerification?.expiresIn\n      );\n      const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n      await ctx.context.options.emailVerification.sendVerificationEmail(\n        {\n          user: user.user,\n          url,\n          token\n        },\n        ctx.request\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"FORBIDDEN\", {\n        message: BASE_ERROR_CODES.EMAIL_NOT_VERIFIED\n      });\n    }\n    const session = await ctx.context.internalAdapter.createSession(\n      user.user.id,\n      ctx,\n      ctx.body.rememberMe === false\n    );\n    if (!session) {\n      ctx.context.logger.error(\"Failed to create session\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.FAILED_TO_CREATE_SESSION\n      });\n    }\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.setSessionCookie)(\n      ctx,\n      {\n        session,\n        user: user.user\n      },\n      ctx.body.rememberMe === false\n    );\n    return ctx.json({\n      redirect: !!ctx.body.callbackURL,\n      token: session.token,\n      url: ctx.body.callbackURL,\n      user: {\n        id: user.user.id,\n        email: user.user.email,\n        name: user.user.name,\n        image: user.user.image,\n        emailVerified: user.user.emailVerified,\n        createdAt: user.user.createdAt,\n        updatedAt: user.user.updatedAt\n      }\n    });\n  }\n);\n\nconst schema = zod__WEBPACK_IMPORTED_MODULE_22__.object({\n  code: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional(),\n  error: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional(),\n  device_id: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional(),\n  error_description: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional(),\n  state: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional(),\n  user: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional()\n});\nconst callbackOAuth = createAuthEndpoint(\n  \"/callback/:id\",\n  {\n    method: [\"GET\", \"POST\"],\n    body: schema.optional(),\n    query: schema.optional(),\n    metadata: HIDE_METADATA\n  },\n  async (c) => {\n    let queryOrBody;\n    const defaultErrorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    try {\n      if (c.method === \"GET\") {\n        queryOrBody = schema.parse(c.query);\n      } else if (c.method === \"POST\") {\n        queryOrBody = schema.parse(c.body);\n      } else {\n        throw new Error(\"Unsupported method\");\n      }\n    } catch (e) {\n      c.context.logger.error(\"INVALID_CALLBACK_REQUEST\", e);\n      throw c.redirect(`${defaultErrorURL}?error=invalid_callback_request`);\n    }\n    const { code, error, state, error_description, device_id } = queryOrBody;\n    if (error) {\n      throw c.redirect(\n        `${defaultErrorURL}?error=${error}&error_description=${error_description}`\n      );\n    }\n    if (!state) {\n      c.context.logger.error(\"State not found\", error);\n      throw c.redirect(`${defaultErrorURL}?error=state_not_found`);\n    }\n    const {\n      codeVerifier,\n      callbackURL,\n      link,\n      errorURL,\n      newUserURL,\n      requestSignUp\n    } = await (0,_better_auth_DPBqdYQ3_mjs__WEBPACK_IMPORTED_MODULE_3__.p)(c);\n    function redirectOnError(error2) {\n      let url = errorURL || defaultErrorURL;\n      if (url.includes(\"?\")) {\n        url = `${url}&error=${error2}`;\n      } else {\n        url = `${url}?error=${error2}`;\n      }\n      throw c.redirect(url);\n    }\n    if (!code) {\n      c.context.logger.error(\"Code not found\");\n      throw redirectOnError(\"no_code\");\n    }\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.params.id\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Oauth provider with id\",\n        c.params.id,\n        \"not found\"\n      );\n      throw redirectOnError(\"oauth_provider_not_found\");\n    }\n    let tokens;\n    try {\n      tokens = await provider.validateAuthorizationCode({\n        code,\n        codeVerifier,\n        deviceId: device_id,\n        redirectURI: `${c.context.baseURL}/callback/${provider.id}`\n      });\n    } catch (e) {\n      c.context.logger.error(\"\", e);\n      throw redirectOnError(\"invalid_code\");\n    }\n    const userInfo = await provider.getUserInfo({\n      ...tokens,\n      user: c.body?.user ? (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_6__.s)(c.body.user) : void 0\n    }).then((res) => res?.user);\n    if (!userInfo) {\n      c.context.logger.error(\"Unable to get user info\");\n      return redirectOnError(\"unable_to_get_user_info\");\n    }\n    if (!userInfo.email) {\n      c.context.logger.error(\n        \"Provider did not return email. This could be due to misconfiguration in the provider settings.\"\n      );\n      return redirectOnError(\"email_not_found\");\n    }\n    if (!callbackURL) {\n      c.context.logger.error(\"No callback URL found\");\n      throw redirectOnError(\"no_callback_url\");\n    }\n    if (link) {\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(\n        provider.id\n      );\n      if (!isTrustedProvider && !userInfo.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        c.context.logger.error(\"Unable to link account - untrusted provider\");\n        return redirectOnError(\"unable_to_link_account\");\n      }\n      const existingAccount = await c.context.internalAdapter.findAccount(\n        userInfo.id\n      );\n      if (existingAccount) {\n        if (existingAccount.userId.toString() !== link.userId.toString()) {\n          return redirectOnError(\"account_already_linked_to_different_user\");\n        }\n        const updateData = Object.fromEntries(\n          Object.entries({\n            accessToken: tokens.accessToken,\n            idToken: tokens.idToken,\n            refreshToken: tokens.refreshToken,\n            accessTokenExpiresAt: tokens.accessTokenExpiresAt,\n            refreshTokenExpiresAt: tokens.refreshTokenExpiresAt,\n            scope: tokens.scopes?.join(\",\")\n          }).filter(([_, value]) => value !== void 0)\n        );\n        await c.context.internalAdapter.updateAccount(\n          existingAccount.id,\n          updateData\n        );\n      } else {\n        const newAccount = await c.context.internalAdapter.createAccount(\n          {\n            userId: link.userId,\n            providerId: provider.id,\n            accountId: userInfo.id,\n            ...tokens,\n            scope: tokens.scopes?.join(\",\")\n          },\n          c\n        );\n        if (!newAccount) {\n          return redirectOnError(\"unable_to_link_account\");\n        }\n      }\n      let toRedirectTo2;\n      try {\n        const url = callbackURL;\n        toRedirectTo2 = url.toString();\n      } catch {\n        toRedirectTo2 = callbackURL;\n      }\n      throw c.redirect(toRedirectTo2);\n    }\n    const result = await handleOAuthUserInfo(c, {\n      userInfo: {\n        ...userInfo,\n        email: userInfo.email,\n        name: userInfo.name || userInfo.email\n      },\n      account: {\n        providerId: provider.id,\n        accountId: userInfo.id,\n        ...tokens,\n        scope: tokens.scopes?.join(\",\")\n      },\n      callbackURL,\n      disableSignUp: provider.disableImplicitSignUp && !requestSignUp || provider.options?.disableSignUp,\n      overrideUserInfo: provider.options?.overrideUserInfoOnSignIn\n    });\n    if (result.error) {\n      c.context.logger.error(result.error.split(\" \").join(\"_\"));\n      return redirectOnError(result.error.split(\" \").join(\"_\"));\n    }\n    const { session, user } = result.data;\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.setSessionCookie)(c, {\n      session,\n      user\n    });\n    let toRedirectTo;\n    try {\n      const url = result.isRegister ? newUserURL || callbackURL : callbackURL;\n      toRedirectTo = url.toString();\n    } catch {\n      toRedirectTo = result.isRegister ? newUserURL || callbackURL : callbackURL;\n    }\n    throw c.redirect(toRedirectTo);\n  }\n);\n\nconst signOut = createAuthEndpoint(\n  \"/sign-out\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Sign out the current user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const sessionCookieToken = await ctx.getSignedCookie(\n      ctx.context.authCookies.sessionToken.name,\n      ctx.context.secret\n    );\n    if (!sessionCookieToken) {\n      (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.deleteSessionCookie)(ctx);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n      });\n    }\n    await ctx.context.internalAdapter.deleteSession(sessionCookieToken);\n    (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.deleteSessionCookie)(ctx);\n    return ctx.json({\n      success: true\n    });\n  }\n);\n\nfunction redirectError(ctx, callbackURL, query) {\n  const url = callbackURL ? new URL(callbackURL, ctx.baseURL) : new URL(`${ctx.baseURL}/error`);\n  if (query)\n    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));\n  return url.href;\n}\nfunction redirectCallback(ctx, callbackURL, query) {\n  const url = new URL(callbackURL, ctx.baseURL);\n  if (query)\n    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));\n  return url.href;\n}\nconst requestPasswordReset = createAuthEndpoint(\n  \"/request-password-reset\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      /**\n       * The email address of the user to send a password reset email to.\n       */\n      email: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The email address of the user to send a password reset email to\"\n      }).email(),\n      /**\n       * The URL to redirect the user to reset their password.\n       * If the token isn't valid or expired, it'll be redirected with a query parameter `?\n       * error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?\n       * token=VALID_TOKEN\n       */\n      redirectTo: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a password reset email to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    },\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.sendResetPassword) {\n      ctx.context.logger.error(\n        \"Reset password isn't enabled.Please pass an emailAndPassword.sendResetPassword function in your auth config!\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Reset password isn't enabled\"\n      });\n    }\n    const { email, redirectTo } = ctx.body;\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      ctx.context.logger.error(\"Reset Password: User not found\", { email });\n      return ctx.json({\n        status: true,\n        message: \"If this email exists in our system, check your email for the reset link\"\n      });\n    }\n    const defaultExpiresIn = 60 * 60 * 1;\n    const expiresAt = (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_7__.g)(\n      ctx.context.options.emailAndPassword.resetPasswordTokenExpiresIn || defaultExpiresIn,\n      \"sec\"\n    );\n    const verificationToken = (0,_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_8__.g)(24);\n    await ctx.context.internalAdapter.createVerificationValue(\n      {\n        value: user.user.id,\n        identifier: `reset-password:${verificationToken}`,\n        expiresAt\n      },\n      ctx\n    );\n    const callbackURL = redirectTo ? encodeURIComponent(redirectTo) : \"\";\n    const url = `${ctx.context.baseURL}/reset-password/${verificationToken}?callbackURL=${callbackURL}`;\n    await ctx.context.options.emailAndPassword.sendResetPassword(\n      {\n        user: user.user,\n        url,\n        token: verificationToken\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst forgetPassword = createAuthEndpoint(\n  \"/forget-password\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      /**\n       * The email address of the user to send a password reset email to.\n       */\n      email: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The email address of the user to send a password reset email to\"\n      }).email(),\n      /**\n       * The URL to redirect the user to reset their password.\n       * If the token isn't valid or expired, it'll be redirected with a query parameter `?\n       * error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?\n       * token=VALID_TOKEN\n       */\n      redirectTo: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a password reset email to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    },\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.sendResetPassword) {\n      ctx.context.logger.error(\n        \"Reset password isn't enabled.Please pass an emailAndPassword.sendResetPassword function in your auth config!\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Reset password isn't enabled\"\n      });\n    }\n    const { email, redirectTo } = ctx.body;\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      ctx.context.logger.error(\"Reset Password: User not found\", { email });\n      return ctx.json({\n        status: true,\n        message: \"If this email exists in our system, check your email for the reset link\"\n      });\n    }\n    const defaultExpiresIn = 60 * 60 * 1;\n    const expiresAt = (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_7__.g)(\n      ctx.context.options.emailAndPassword.resetPasswordTokenExpiresIn || defaultExpiresIn,\n      \"sec\"\n    );\n    const verificationToken = (0,_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_8__.g)(24);\n    await ctx.context.internalAdapter.createVerificationValue(\n      {\n        value: user.user.id,\n        identifier: `reset-password:${verificationToken}`,\n        expiresAt\n      },\n      ctx\n    );\n    const callbackURL = redirectTo ? encodeURIComponent(redirectTo) : \"\";\n    const url = `${ctx.context.baseURL}/reset-password/${verificationToken}?callbackURL=${callbackURL}`;\n    await ctx.context.options.emailAndPassword.sendResetPassword(\n      {\n        user: user.user,\n        url,\n        token: verificationToken\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst requestPasswordResetCallback = createAuthEndpoint(\n  \"/reset-password/:token\",\n  {\n    method: \"GET\",\n    query: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The URL to redirect the user to reset their password\"\n      })\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Redirects the user to the callback URL with the token\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { token } = ctx.params;\n    const { callbackURL } = ctx.query;\n    if (!token || !callbackURL) {\n      throw ctx.redirect(\n        redirectError(ctx.context, callbackURL, { error: \"INVALID_TOKEN\" })\n      );\n    }\n    const verification = await ctx.context.internalAdapter.findVerificationValue(\n      `reset-password:${token}`\n    );\n    if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {\n      throw ctx.redirect(\n        redirectError(ctx.context, callbackURL, { error: \"INVALID_TOKEN\" })\n      );\n    }\n    throw ctx.redirect(redirectCallback(ctx.context, callbackURL, { token }));\n  }\n);\nconst forgetPasswordCallback = requestPasswordResetCallback;\nconst resetPassword = createAuthEndpoint(\n  \"/reset-password\",\n  {\n    method: \"POST\",\n    query: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      token: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional()\n    }).optional(),\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      newPassword: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The new password to set\"\n      }),\n      token: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The token to reset the password\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Reset the password for a user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const token = ctx.body.token || ctx.query?.token;\n    if (!token) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const { newPassword } = ctx.body;\n    const minLength = ctx.context.password?.config.minPasswordLength;\n    const maxLength = ctx.context.password?.config.maxPasswordLength;\n    if (newPassword.length < minLength) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    if (newPassword.length > maxLength) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const id = `reset-password:${token}`;\n    const verification = await ctx.context.internalAdapter.findVerificationValue(id);\n    if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const userId = verification.value;\n    const hashedPassword = await ctx.context.password.hash(newPassword);\n    const accounts = await ctx.context.internalAdapter.findAccounts(userId);\n    const account = accounts.find((ac) => ac.providerId === \"credential\");\n    if (!account) {\n      await ctx.context.internalAdapter.createAccount(\n        {\n          userId,\n          providerId: \"credential\",\n          password: hashedPassword,\n          accountId: userId\n        },\n        ctx\n      );\n      await ctx.context.internalAdapter.deleteVerificationValue(\n        verification.id\n      );\n      return ctx.json({\n        status: true\n      });\n    }\n    await ctx.context.internalAdapter.updatePassword(\n      userId,\n      hashedPassword,\n      ctx\n    );\n    await ctx.context.internalAdapter.deleteVerificationValue(verification.id);\n    if (ctx.context.options.emailAndPassword?.revokeSessionsOnPasswordReset) {\n      await ctx.context.internalAdapter.deleteSessions(userId);\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nconst updateUser = () => createAuthEndpoint(\n  \"/update-user\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.record(zod__WEBPACK_IMPORTED_MODULE_22__.string(), zod__WEBPACK_IMPORTED_MODULE_22__.any()),\n    use: [sessionMiddleware],\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Update the current user\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  name: {\n                    type: \"string\",\n                    description: \"The name of the user\"\n                  },\n                  image: {\n                    type: \"string\",\n                    description: \"The image of the user\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the update was successful\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const body = ctx.body;\n    if (body.email) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.EMAIL_CAN_NOT_BE_UPDATED\n      });\n    }\n    const { name, image, ...rest } = body;\n    const session = ctx.context.session;\n    if (image === void 0 && name === void 0 && Object.keys(rest).length === 0) {\n      return ctx.json({\n        status: true\n      });\n    }\n    const additionalFields = (0,_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_14__.f)(\n      ctx.context.options,\n      rest,\n      \"update\"\n    );\n    const user = await ctx.context.internalAdapter.updateUser(\n      session.user.id,\n      {\n        name,\n        image,\n        ...additionalFields\n      },\n      ctx\n    );\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.setSessionCookie)(ctx, {\n      session: session.session,\n      user\n    });\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst changePassword = createAuthEndpoint(\n  \"/change-password\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      /**\n       * The new password to set\n       */\n      newPassword: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The new password to set\"\n      }),\n      /**\n       * The current password of the user\n       */\n      currentPassword: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The current password\"\n      }),\n      /**\n       * revoke all sessions that are not the\n       * current one logged in by the user\n       */\n      revokeOtherSessions: zod__WEBPACK_IMPORTED_MODULE_22__.boolean({\n        description: \"Revoke all other sessions\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Change the password of the user\",\n        responses: {\n          \"200\": {\n            description: \"Password successfully changed\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\",\n                      nullable: true,\n                      // Only present if revokeOtherSessions is true\n                      description: \"New session token if other sessions were revoked\"\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"The unique identifier of the user\"\n                        },\n                        email: {\n                          type: \"string\",\n                          format: \"email\",\n                          description: \"The email address of the user\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"The name of the user\"\n                        },\n                        image: {\n                          type: \"string\",\n                          format: \"uri\",\n                          nullable: true,\n                          description: \"The profile image URL of the user\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Whether the email has been verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was created\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was last updated\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { newPassword, currentPassword, revokeOtherSessions } = ctx.body;\n    const session = ctx.context.session;\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (newPassword.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (newPassword.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    const account = accounts.find(\n      (account2) => account2.providerId === \"credential\" && account2.password\n    );\n    if (!account || !account.password) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.CREDENTIAL_ACCOUNT_NOT_FOUND\n      });\n    }\n    const passwordHash = await ctx.context.password.hash(newPassword);\n    const verify = await ctx.context.password.verify({\n      hash: account.password,\n      password: currentPassword\n    });\n    if (!verify) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_PASSWORD\n      });\n    }\n    await ctx.context.internalAdapter.updateAccount(account.id, {\n      password: passwordHash\n    });\n    let token = null;\n    if (revokeOtherSessions) {\n      await ctx.context.internalAdapter.deleteSessions(session.user.id);\n      const newSession = await ctx.context.internalAdapter.createSession(\n        session.user.id,\n        ctx\n      );\n      if (!newSession) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"INTERNAL_SERVER_ERROR\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n        });\n      }\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.setSessionCookie)(ctx, {\n        session: newSession,\n        user: session.user\n      });\n      token = newSession.token;\n    }\n    return ctx.json({\n      token,\n      user: {\n        id: session.user.id,\n        email: session.user.email,\n        name: session.user.name,\n        image: session.user.image,\n        emailVerified: session.user.emailVerified,\n        createdAt: session.user.createdAt,\n        updatedAt: session.user.updatedAt\n      }\n    });\n  }\n);\nconst setPassword = createAuthEndpoint(\n  \"/set-password\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      /**\n       * The new password to set\n       */\n      newPassword: zod__WEBPACK_IMPORTED_MODULE_22__.string()\n    }),\n    metadata: {\n      SERVER_ONLY: true\n    },\n    use: [sessionMiddleware]\n  },\n  async (ctx) => {\n    const { newPassword } = ctx.body;\n    const session = ctx.context.session;\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (newPassword.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (newPassword.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    const account = accounts.find(\n      (account2) => account2.providerId === \"credential\" && account2.password\n    );\n    const passwordHash = await ctx.context.password.hash(newPassword);\n    if (!account) {\n      await ctx.context.internalAdapter.linkAccount(\n        {\n          userId: session.user.id,\n          providerId: \"credential\",\n          accountId: session.user.id,\n          password: passwordHash\n        },\n        ctx\n      );\n      return ctx.json({\n        status: true\n      });\n    }\n    throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n      message: \"user already has a password\"\n    });\n  }\n);\nconst deleteUser = createAuthEndpoint(\n  \"/delete-user\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      /**\n       * The callback URL to redirect to after the user is deleted\n       * this is only used on delete user callback\n       */\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional(),\n      /**\n       * The password of the user. If the password isn't provided, session freshness\n       * will be checked.\n       */\n      password: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional(),\n      /**\n       * The token to delete the user. If the token is provided, the user will be deleted\n       */\n      token: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Delete the user\",\n        responses: {\n          \"200\": {\n            description: \"User deletion processed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\",\n                      description: \"Indicates if the operation was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"User deleted\", \"Verification email sent\"],\n                      description: \"Status message of the deletion process\"\n                    }\n                  },\n                  required: [\"success\", \"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.deleteUser?.enabled) {\n      ctx.context.logger.error(\n        \"Delete user is disabled. Enable it in the options\",\n        {\n          session: ctx.context.session\n        }\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\");\n    }\n    const session = ctx.context.session;\n    if (ctx.body.password) {\n      const accounts = await ctx.context.internalAdapter.findAccounts(\n        session.user.id\n      );\n      const account = accounts.find(\n        (account2) => account2.providerId === \"credential\" && account2.password\n      );\n      if (!account || !account.password) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.CREDENTIAL_ACCOUNT_NOT_FOUND\n        });\n      }\n      const verify = await ctx.context.password.verify({\n        hash: account.password,\n        password: ctx.body.password\n      });\n      if (!verify) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.INVALID_PASSWORD\n        });\n      }\n    }\n    if (ctx.body.token) {\n      await deleteUserCallback({\n        ...ctx,\n        query: {\n          token: ctx.body.token\n        }\n      });\n      return ctx.json({\n        success: true,\n        message: \"User deleted\"\n      });\n    }\n    if (ctx.context.options.user.deleteUser?.sendDeleteAccountVerification) {\n      const token = (0,_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_13__.g)(32, \"0-9\", \"a-z\");\n      await ctx.context.internalAdapter.createVerificationValue(\n        {\n          value: session.user.id,\n          identifier: `delete-account-${token}`,\n          expiresAt: new Date(\n            Date.now() + (ctx.context.options.user.deleteUser?.deleteTokenExpiresIn || 60 * 60 * 24) * 1e3\n          )\n        },\n        ctx\n      );\n      const url = `${ctx.context.baseURL}/delete-user/callback?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n      await ctx.context.options.user.deleteUser.sendDeleteAccountVerification(\n        {\n          user: session.user,\n          url,\n          token\n        },\n        ctx.request\n      );\n      return ctx.json({\n        success: true,\n        message: \"Verification email sent\"\n      });\n    }\n    if (!ctx.body.password && ctx.context.sessionConfig.freshAge !== 0) {\n      const currentAge = session.session.createdAt.getTime();\n      const freshAge = ctx.context.sessionConfig.freshAge * 1e3;\n      const now = Date.now();\n      if (now - currentAge > freshAge * 1e3) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.SESSION_EXPIRED\n        });\n      }\n    }\n    const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;\n    if (beforeDelete) {\n      await beforeDelete(session.user, ctx.request);\n    }\n    await ctx.context.internalAdapter.deleteUser(session.user.id);\n    await ctx.context.internalAdapter.deleteSessions(session.user.id);\n    await ctx.context.internalAdapter.deleteAccounts(session.user.id);\n    (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.deleteSessionCookie)(ctx);\n    const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;\n    if (afterDelete) {\n      await afterDelete(session.user, ctx.request);\n    }\n    return ctx.json({\n      success: true,\n      message: \"User deleted\"\n    });\n  }\n);\nconst deleteUserCallback = createAuthEndpoint(\n  \"/delete-user/callback\",\n  {\n    method: \"GET\",\n    query: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      token: zod__WEBPACK_IMPORTED_MODULE_22__.string(),\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional()\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Callback to complete user deletion with verification token\",\n        responses: {\n          \"200\": {\n            description: \"User successfully deleted\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\",\n                      description: \"Indicates if the deletion was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"User deleted\"],\n                      description: \"Confirmation message\"\n                    }\n                  },\n                  required: [\"success\", \"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.deleteUser?.enabled) {\n      ctx.context.logger.error(\n        \"Delete user is disabled. Enable it in the options\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\");\n    }\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n      });\n    }\n    const token = await ctx.context.internalAdapter.findVerificationValue(\n      `delete-account-${ctx.query.token}`\n    );\n    if (!token || token.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    if (token.value !== session.user.id) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;\n    if (beforeDelete) {\n      await beforeDelete(session.user, ctx.request);\n    }\n    await ctx.context.internalAdapter.deleteUser(session.user.id);\n    await ctx.context.internalAdapter.deleteSessions(session.user.id);\n    await ctx.context.internalAdapter.deleteAccounts(session.user.id);\n    await ctx.context.internalAdapter.deleteVerificationValue(token.id);\n    (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.deleteSessionCookie)(ctx);\n    const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;\n    if (afterDelete) {\n      await afterDelete(session.user, ctx.request);\n    }\n    if (ctx.query.callbackURL) {\n      throw ctx.redirect(ctx.query.callbackURL || \"/\");\n    }\n    return ctx.json({\n      success: true,\n      message: \"User deleted\"\n    });\n  }\n);\nconst changeEmail = createAuthEndpoint(\n  \"/change-email\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      newEmail: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The new email to set\"\n      }).email(),\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The URL to redirect to after email verification\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        responses: {\n          \"200\": {\n            description: \"Email change request processed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the request was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"Email updated\", \"Verification email sent\"],\n                      description: \"Status message of the email change process\",\n                      nullable: true\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.changeEmail?.enabled) {\n      ctx.context.logger.error(\"Change email is disabled.\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Change email is disabled\"\n      });\n    }\n    const newEmail = ctx.body.newEmail.toLowerCase();\n    if (newEmail === ctx.context.session.user.email) {\n      ctx.context.logger.error(\"Email is the same\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Email is the same\"\n      });\n    }\n    const existingUser = await ctx.context.internalAdapter.findUserByEmail(newEmail);\n    if (existingUser) {\n      ctx.context.logger.error(\"Email already exists\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Couldn't update your email\"\n      });\n    }\n    if (ctx.context.session.user.emailVerified !== true) {\n      const existing = await ctx.context.internalAdapter.findUserByEmail(newEmail);\n      if (existing) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNPROCESSABLE_ENTITY\", {\n          message: BASE_ERROR_CODES.USER_ALREADY_EXISTS\n        });\n      }\n      await ctx.context.internalAdapter.updateUserByEmail(\n        ctx.context.session.user.email,\n        {\n          email: newEmail\n        },\n        ctx\n      );\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_0__.setSessionCookie)(ctx, {\n        session: ctx.context.session.session,\n        user: {\n          ...ctx.context.session.user,\n          email: newEmail\n        }\n      });\n      if (ctx.context.options.emailVerification?.sendVerificationEmail) {\n        const token2 = await createEmailVerificationToken(\n          ctx.context.secret,\n          newEmail,\n          void 0,\n          ctx.context.options.emailVerification?.expiresIn\n        );\n        const url2 = `${ctx.context.baseURL}/verify-email?token=${token2}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n        await ctx.context.options.emailVerification.sendVerificationEmail(\n          {\n            user: {\n              ...ctx.context.session.user,\n              email: newEmail\n            },\n            url: url2,\n            token: token2\n          },\n          ctx.request\n        );\n      }\n      return ctx.json({\n        status: true\n      });\n    }\n    if (!ctx.context.options.user.changeEmail.sendChangeEmailVerification) {\n      ctx.context.logger.error(\"Verification email isn't enabled.\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Verification email isn't enabled\"\n      });\n    }\n    const token = await createEmailVerificationToken(\n      ctx.context.secret,\n      ctx.context.session.user.email,\n      newEmail,\n      ctx.context.options.emailVerification?.expiresIn\n    );\n    const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n    await ctx.context.options.user.changeEmail.sendChangeEmailVerification(\n      {\n        user: ctx.context.session.user,\n        newEmail,\n        url,\n        token\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nfunction sanitize(input) {\n  return input.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\");\n}\nconst html = (errorCode = \"Unknown\") => `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Authentication Error</title>\n    <style>\n        :root {\n            --bg-color: #f8f9fa;\n            --text-color: #212529;\n            --accent-color: #000000;\n            --error-color: #dc3545;\n            --border-color: #e9ecef;\n        }\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            line-height: 1.5;\n        }\n        .error-container {\n            background-color: #ffffff;\n            border-radius: 12px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\n            padding: 2.5rem;\n            text-align: center;\n            max-width: 90%;\n            width: 400px;\n        }\n        h1 {\n            color: var(--error-color);\n            font-size: 1.75rem;\n            margin-bottom: 1rem;\n            font-weight: 600;\n        }\n        p {\n            margin-bottom: 1.5rem;\n            color: #495057;\n        }\n        .btn {\n            background-color: var(--accent-color);\n            color: #ffffff;\n            text-decoration: none;\n            padding: 0.75rem 1.5rem;\n            border-radius: 6px;\n            transition: all 0.3s ease;\n            display: inline-block;\n            font-weight: 500;\n            border: 2px solid var(--accent-color);\n        }\n        .btn:hover {\n            background-color: #131721;\n        }\n        .error-code {\n            font-size: 0.875rem;\n            color: #6c757d;\n            margin-top: 1.5rem;\n            padding-top: 1.5rem;\n            border-top: 1px solid var(--border-color);\n        }\n        .icon {\n            font-size: 3rem;\n            margin-bottom: 1rem;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"error-container\">\n        <div class=\"icon\">\\u26A0\\uFE0F</div>\n        <h1>Better Auth Error</h1>\n        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>\n        <a href=\"/\" id=\"returnLink\" class=\"btn\">Return to Application</a>\n        <div class=\"error-code\">Error Code: <span id=\"errorCode\">${sanitize(\n  errorCode\n)}</span></div>\n    </div>\n</body>\n</html>`;\nconst error = createAuthEndpoint(\n  \"/error\",\n  {\n    method: \"GET\",\n    metadata: {\n      ...HIDE_METADATA,\n      openapi: {\n        description: \"Displays an error page\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"text/html\": {\n                schema: {\n                  type: \"string\",\n                  description: \"The HTML content of the error page\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const query = new URL(c.request?.url || \"\").searchParams.get(\"error\") || \"Unknown\";\n    return new Response(html(query), {\n      headers: {\n        \"Content-Type\": \"text/html\"\n      }\n    });\n  }\n);\n\nconst ok = createAuthEndpoint(\n  \"/ok\",\n  {\n    method: \"GET\",\n    metadata: {\n      ...HIDE_METADATA,\n      openapi: {\n        description: \"Check if the API is working\",\n        responses: {\n          \"200\": {\n            description: \"API is working\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    ok: {\n                      type: \"boolean\",\n                      description: \"Indicates if the API is working\"\n                    }\n                  },\n                  required: [\"ok\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    return ctx.json({\n      ok: true\n    });\n  }\n);\n\nconst listUserAccounts = createAuthEndpoint(\n  \"/list-accounts\",\n  {\n    method: \"GET\",\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"List all accounts linked to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\"\n                      },\n                      provider: {\n                        type: \"string\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\"\n                      }\n                    },\n                    accountId: {\n                      type: \"string\"\n                    },\n                    scopes: {\n                      type: \"array\",\n                      items: {\n                        type: \"string\"\n                      }\n                    }\n                  },\n                  required: [\n                    \"id\",\n                    \"provider\",\n                    \"createdAt\",\n                    \"updatedAt\",\n                    \"accountId\",\n                    \"scopes\"\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const session = c.context.session;\n    const accounts = await c.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    return c.json(\n      accounts.map((a) => ({\n        id: a.id,\n        provider: a.providerId,\n        createdAt: a.createdAt,\n        updatedAt: a.updatedAt,\n        accountId: a.accountId,\n        scopes: a.scope?.split(\",\") || []\n      }))\n    );\n  }\n);\nconst linkSocialAccount = createAuthEndpoint(\n  \"/link-social\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      /**\n       * Callback URL to redirect to after the user has signed in.\n       */\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The URL to redirect to after the user has signed in\"\n      }).optional(),\n      /**\n       * OAuth2 provider to use\n       */\n      provider: _social_providers_index_mjs__WEBPACK_IMPORTED_MODULE_5__.SocialProviderListEnum,\n      /**\n       * ID Token for direct authentication without redirect\n       */\n      idToken: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n        token: zod__WEBPACK_IMPORTED_MODULE_22__.string(),\n        nonce: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional(),\n        accessToken: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional(),\n        refreshToken: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional(),\n        scopes: zod__WEBPACK_IMPORTED_MODULE_22__.array(zod__WEBPACK_IMPORTED_MODULE_22__.string()).optional()\n      }).optional(),\n      /**\n       * Whether to allow sign up for new users\n       */\n      requestSignUp: zod__WEBPACK_IMPORTED_MODULE_22__.boolean().optional(),\n      /**\n       * Additional scopes to request when linking the account.\n       * This is useful for requesting additional permissions when\n       * linking a social account compared to the initial authentication.\n       */\n      scopes: zod__WEBPACK_IMPORTED_MODULE_22__.array(zod__WEBPACK_IMPORTED_MODULE_22__.string(), {\n        description: \"Additional scopes to request from the provider\"\n      }).optional(),\n      /**\n       * The URL to redirect to if there is an error during the link process.\n       */\n      errorCallbackURL: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The URL to redirect to if there is an error during the link process\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Link a social account to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    url: {\n                      type: \"string\",\n                      description: \"The authorization URL to redirect the user to\"\n                    },\n                    redirect: {\n                      type: \"boolean\",\n                      description: \"Indicates if the user should be redirected to the authorization URL\"\n                    },\n                    status: {\n                      type: \"boolean\"\n                    }\n                  },\n                  required: [\"redirect\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const session = c.context.session;\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.body.provider\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Provider not found. Make sure to add the provider in your auth config\",\n        {\n          provider: c.body.provider\n        }\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.PROVIDER_NOT_FOUND\n      });\n    }\n    if (c.body.idToken) {\n      if (!provider.verifyIdToken) {\n        c.context.logger.error(\n          \"Provider does not support id token verification\",\n          {\n            provider: c.body.provider\n          }\n        );\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\", {\n          message: BASE_ERROR_CODES.ID_TOKEN_NOT_SUPPORTED\n        });\n      }\n      const { token, nonce } = c.body.idToken;\n      const valid = await provider.verifyIdToken(token, nonce);\n      if (!valid) {\n        c.context.logger.error(\"Invalid id token\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.INVALID_TOKEN\n        });\n      }\n      const linkingUserInfo = await provider.getUserInfo({\n        idToken: token,\n        accessToken: c.body.idToken.accessToken,\n        refreshToken: c.body.idToken.refreshToken\n      });\n      if (!linkingUserInfo || !linkingUserInfo?.user) {\n        c.context.logger.error(\"Failed to get user info\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n        });\n      }\n      if (!linkingUserInfo.user.email) {\n        c.context.logger.error(\"User email not found\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.USER_EMAIL_NOT_FOUND\n        });\n      }\n      const existingAccounts = await c.context.internalAdapter.findAccounts(\n        session.user.id\n      );\n      const hasBeenLinked = existingAccounts.find(\n        (a) => a.providerId === provider.id && a.accountId === linkingUserInfo.user.id\n      );\n      if (hasBeenLinked) {\n        return c.json({\n          redirect: false,\n          url: \"\",\n          // this is for type inference\n          status: true\n        });\n      }\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(provider.id);\n      if (!isTrustedProvider && !linkingUserInfo.user.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: \"Account not linked - linking not allowed\"\n        });\n      }\n      if (linkingUserInfo.user.email !== session.user.email && c.context.options.account?.accountLinking?.allowDifferentEmails !== true) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: \"Account not linked - different emails not allowed\"\n        });\n      }\n      try {\n        await c.context.internalAdapter.createAccount(\n          {\n            userId: session.user.id,\n            providerId: provider.id,\n            accountId: linkingUserInfo.user.id.toString(),\n            accessToken: c.body.idToken.accessToken,\n            idToken: token,\n            refreshToken: c.body.idToken.refreshToken,\n            scope: c.body.idToken.scopes?.join(\",\")\n          },\n          c\n        );\n      } catch (e) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"EXPECTATION_FAILED\", {\n          message: \"Account not linked - unable to create account\"\n        });\n      }\n      if (c.context.options.account?.accountLinking?.updateUserInfoOnLink === true) {\n        try {\n          await c.context.internalAdapter.updateUser(session.user.id, {\n            name: linkingUserInfo.user?.name,\n            image: linkingUserInfo.user?.image\n          });\n        } catch (e) {\n          console.warn(\"Could not update user - \" + e.toString());\n        }\n      }\n      return c.json({\n        redirect: false,\n        url: \"\",\n        // this is for type inference\n        status: true\n      });\n    }\n    const state = await (0,_better_auth_DPBqdYQ3_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(c, {\n      userId: session.user.id,\n      email: session.user.email\n    });\n    const url = await provider.createAuthorizationURL({\n      state: state.state,\n      codeVerifier: state.codeVerifier,\n      redirectURI: `${c.context.baseURL}/callback/${provider.id}`,\n      scopes: c.body.scopes\n    });\n    return c.json({\n      url: url.toString(),\n      redirect: true\n    });\n  }\n);\nconst unlinkAccount = createAuthEndpoint(\n  \"/unlink-account\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      providerId: zod__WEBPACK_IMPORTED_MODULE_22__.string(),\n      accountId: zod__WEBPACK_IMPORTED_MODULE_22__.string().optional()\n    }),\n    use: [freshSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Unlink an account\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId } = ctx.body;\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      ctx.context.session.user.id\n    );\n    if (accounts.length === 1 && !ctx.context.options.account?.accountLinking?.allowUnlinkingAll) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.FAILED_TO_UNLINK_LAST_ACCOUNT\n      });\n    }\n    const accountExist = accounts.find(\n      (account) => accountId ? account.accountId === accountId && account.providerId === providerId : account.providerId === providerId\n    );\n    if (!accountExist) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.ACCOUNT_NOT_FOUND\n      });\n    }\n    await ctx.context.internalAdapter.deleteAccount(accountExist.id);\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst getAccessToken = createAuthEndpoint(\n  \"/get-access-token\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      providerId: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The provider ID for the OAuth provider\"\n      }),\n      accountId: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The account ID associated with the refresh token\"\n      }).optional(),\n      userId: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The user ID associated with the account\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Get a valid access token, doing a refresh if needed\",\n        responses: {\n          200: {\n            description: \"A Valid access token\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    tokenType: {\n                      type: \"string\"\n                    },\n                    idToken: {\n                      type: \"string\"\n                    },\n                    accessToken: {\n                      type: \"string\"\n                    },\n                    refreshToken: {\n                      type: \"string\"\n                    },\n                    accessTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    },\n                    refreshTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          400: {\n            description: \"Invalid refresh token or provider configuration\"\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId, userId } = ctx.body;\n    const req = ctx.request;\n    const session = await getSessionFromCtx(ctx);\n    if (req && !session) {\n      throw ctx.error(\"UNAUTHORIZED\");\n    }\n    let resolvedUserId = session?.user?.id || userId;\n    if (!resolvedUserId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: `Either userId or session is required`\n      });\n    }\n    if (!ctx.context.socialProviders.find((p) => p.id === providerId)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} is not supported.`\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);\n    const account = accounts.find(\n      (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId\n    );\n    if (!account) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === providerId\n    );\n    if (!provider) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} not found.`\n      });\n    }\n    try {\n      let newTokens = null;\n      if (account.refreshToken && (!account.accessTokenExpiresAt || account.accessTokenExpiresAt.getTime() - Date.now() < 5e3) && provider.refreshAccessToken) {\n        newTokens = await provider.refreshAccessToken(\n          account.refreshToken\n        );\n        await ctx.context.internalAdapter.updateAccount(account.id, {\n          accessToken: newTokens.accessToken,\n          accessTokenExpiresAt: newTokens.accessTokenExpiresAt,\n          refreshToken: newTokens.refreshToken,\n          refreshTokenExpiresAt: newTokens.refreshTokenExpiresAt\n        });\n      }\n      const tokens = {\n        accessToken: newTokens?.accessToken ?? account.accessToken ?? void 0,\n        accessTokenExpiresAt: newTokens?.accessTokenExpiresAt ?? account.accessTokenExpiresAt ?? void 0,\n        scopes: account.scope?.split(\",\") ?? [],\n        idToken: newTokens?.idToken ?? account.idToken ?? void 0\n      };\n      return ctx.json(tokens);\n    } catch (error) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Failed to get a valid access token\",\n        cause: error\n      });\n    }\n  }\n);\nconst refreshToken = createAuthEndpoint(\n  \"/refresh-token\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      providerId: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The provider ID for the OAuth provider\"\n      }),\n      accountId: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The account ID associated with the refresh token\"\n      }).optional(),\n      userId: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The user ID associated with the account\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Refresh the access token using a refresh token\",\n        responses: {\n          200: {\n            description: \"Access token refreshed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    tokenType: {\n                      type: \"string\"\n                    },\n                    idToken: {\n                      type: \"string\"\n                    },\n                    accessToken: {\n                      type: \"string\"\n                    },\n                    refreshToken: {\n                      type: \"string\"\n                    },\n                    accessTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    },\n                    refreshTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          400: {\n            description: \"Invalid refresh token or provider configuration\"\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId, userId } = ctx.body;\n    const req = ctx.request;\n    const session = await getSessionFromCtx(ctx);\n    if (req && !session) {\n      throw ctx.error(\"UNAUTHORIZED\");\n    }\n    let resolvedUserId = session?.user?.id || userId;\n    if (!resolvedUserId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: `Either userId or session is required`\n      });\n    }\n    if (!ctx.context.socialProviders.find((p) => p.id === providerId)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} is not supported.`\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);\n    const account = accounts.find(\n      (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId\n    );\n    if (!account) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === providerId\n    );\n    if (!provider) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} not found.`\n      });\n    }\n    if (!provider.refreshAccessToken) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} does not support token refreshing.`\n      });\n    }\n    try {\n      const tokens = await provider.refreshAccessToken(\n        account.refreshToken\n      );\n      await ctx.context.internalAdapter.updateAccount(account.id, {\n        accessToken: tokens.accessToken,\n        accessTokenExpiresAt: tokens.accessTokenExpiresAt,\n        refreshToken: tokens.refreshToken,\n        refreshTokenExpiresAt: tokens.refreshTokenExpiresAt\n      });\n      return ctx.json(tokens);\n    } catch (error) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Failed to refresh access token\",\n        cause: error\n      });\n    }\n  }\n);\nconst accountInfo = createAuthEndpoint(\n  \"/account-info\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Get the account info provided by the provider\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\"\n                        },\n                        name: {\n                          type: \"string\"\n                        },\n                        email: {\n                          type: \"string\"\n                        },\n                        image: {\n                          type: \"string\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\"\n                        }\n                      },\n                      required: [\"id\", \"emailVerified\"]\n                    },\n                    data: {\n                      type: \"object\",\n                      properties: {},\n                      additionalProperties: true\n                    }\n                  },\n                  required: [\"user\", \"data\"],\n                  additionalProperties: false\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    body: zod__WEBPACK_IMPORTED_MODULE_22__.object({\n      accountId: zod__WEBPACK_IMPORTED_MODULE_22__.string({\n        description: \"The provider given account id for which to get the account info\"\n      })\n    })\n  },\n  async (ctx) => {\n    const account = await ctx.context.internalAdapter.findAccount(\n      ctx.body.accountId\n    );\n    if (!account || account.userId !== ctx.context.session.user.id) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === account.providerId\n    );\n    if (!provider) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"INTERNAL_SERVER_ERROR\", {\n        message: `Provider account provider is ${account.providerId} but it is not configured`\n      });\n    }\n    const tokens = await getAccessToken({\n      ...ctx,\n      body: {\n        accountId: account.id,\n        providerId: account.providerId\n      },\n      returnHeaders: false\n    });\n    const info = await provider.getUserInfo(tokens);\n    return ctx.json(info);\n  }\n);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.cM0Fc3LZ.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   p: () => (/* binding */ parseJSON)\n/* harmony export */ });\nconst PROTO_POLLUTION_PATTERNS = {\n  proto: /\"(?:_|\\\\u0{2}5[Ff]){2}(?:p|\\\\u0{2}70)(?:r|\\\\u0{2}72)(?:o|\\\\u0{2}6[Ff])(?:t|\\\\u0{2}74)(?:o|\\\\u0{2}6[Ff])(?:_|\\\\u0{2}5[Ff]){2}\"\\s*:/,\n  constructor: /\"(?:c|\\\\u0063)(?:o|\\\\u006[Ff])(?:n|\\\\u006[Ee])(?:s|\\\\u0073)(?:t|\\\\u0074)(?:r|\\\\u0072)(?:u|\\\\u0075)(?:c|\\\\u0063)(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:r|\\\\u0072)\"\\s*:/,\n  protoShort: /\"__proto__\"\\s*:/,\n  constructorShort: /\"constructor\"\\s*:/\n};\nconst JSON_SIGNATURE = /^\\s*[\"[{]|^\\s*-?\\d{1,16}(\\.\\d{1,17})?([Ee][+-]?\\d+)?\\s*$/;\nconst SPECIAL_VALUES = {\n  true: true,\n  false: false,\n  null: null,\n  undefined: void 0,\n  nan: Number.NaN,\n  infinity: Number.POSITIVE_INFINITY,\n  \"-infinity\": Number.NEGATIVE_INFINITY\n};\nconst ISO_DATE_REGEX = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{1,7}))?(?:Z|([+-])(\\d{2}):(\\d{2}))$/;\nfunction isValidDate(date) {\n  return date instanceof Date && !isNaN(date.getTime());\n}\nfunction parseISODate(value) {\n  const match = ISO_DATE_REGEX.exec(value);\n  if (!match) return null;\n  const [\n    ,\n    year,\n    month,\n    day,\n    hour,\n    minute,\n    second,\n    ms,\n    offsetSign,\n    offsetHour,\n    offsetMinute\n  ] = match;\n  let date = new Date(\n    Date.UTC(\n      parseInt(year, 10),\n      parseInt(month, 10) - 1,\n      parseInt(day, 10),\n      parseInt(hour, 10),\n      parseInt(minute, 10),\n      parseInt(second, 10),\n      ms ? parseInt(ms.padEnd(3, \"0\"), 10) : 0\n    )\n  );\n  if (offsetSign) {\n    const offset = (parseInt(offsetHour, 10) * 60 + parseInt(offsetMinute, 10)) * (offsetSign === \"+\" ? -1 : 1);\n    date.setUTCMinutes(date.getUTCMinutes() + offset);\n  }\n  return isValidDate(date) ? date : null;\n}\nfunction betterJSONParse(value, options = {}) {\n  const {\n    strict = false,\n    warnings = false,\n    reviver,\n    parseDates = true\n  } = options;\n  if (typeof value !== \"string\") {\n    return value;\n  }\n  const trimmed = value.trim();\n  if (trimmed[0] === '\"' && trimmed.endsWith('\"') && !trimmed.slice(1, -1).includes('\"')) {\n    return trimmed.slice(1, -1);\n  }\n  const lowerValue = trimmed.toLowerCase();\n  if (lowerValue.length <= 9 && lowerValue in SPECIAL_VALUES) {\n    return SPECIAL_VALUES[lowerValue];\n  }\n  if (!JSON_SIGNATURE.test(trimmed)) {\n    if (strict) {\n      throw new SyntaxError(\"[better-json] Invalid JSON\");\n    }\n    return value;\n  }\n  const hasProtoPattern = Object.entries(PROTO_POLLUTION_PATTERNS).some(\n    ([key, pattern]) => {\n      const matches = pattern.test(trimmed);\n      if (matches && warnings) {\n        console.warn(\n          `[better-json] Detected potential prototype pollution attempt using ${key} pattern`\n        );\n      }\n      return matches;\n    }\n  );\n  if (hasProtoPattern && strict) {\n    throw new Error(\n      \"[better-json] Potential prototype pollution attempt detected\"\n    );\n  }\n  try {\n    const secureReviver = (key, value2) => {\n      if (key === \"__proto__\" || key === \"constructor\" && value2 && typeof value2 === \"object\" && \"prototype\" in value2) {\n        if (warnings) {\n          console.warn(\n            `[better-json] Dropping \"${key}\" key to prevent prototype pollution`\n          );\n        }\n        return void 0;\n      }\n      if (parseDates && typeof value2 === \"string\") {\n        const date = parseISODate(value2);\n        if (date) {\n          return date;\n        }\n      }\n      return reviver ? reviver(key, value2) : value2;\n    };\n    return JSON.parse(trimmed, secureReviver);\n  } catch (error) {\n    if (strict) {\n      throw error;\n    }\n    return value;\n  }\n}\nfunction parseJSON(value, options = { strict: true }) {\n  return betterJSONParse(value, options);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguZmZXZWc1MHcubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLHFCQUFxQixFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFO0FBQ3RJO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFdBQVcsS0FBSyxNQUFNLEtBQUs7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLElBQUksa0JBQWtCLEVBQUUsTUFBTSxFQUFFO0FBQ2pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGLEtBQUs7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLElBQUk7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGNBQWM7QUFDcEQ7QUFDQTs7QUFFMEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpbGltYXMvRG9jdW1lbnRzL0RhdmkvZXN0dWRvcy9yZWFjdC9iZXdlYXIvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLmZmV2VnNTB3Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQUk9UT19QT0xMVVRJT05fUEFUVEVSTlMgPSB7XG4gIHByb3RvOiAvXCIoPzpffFxcXFx1MHsyfTVbRmZdKXsyfSg/OnB8XFxcXHUwezJ9NzApKD86cnxcXFxcdTB7Mn03MikoPzpvfFxcXFx1MHsyfTZbRmZdKSg/OnR8XFxcXHUwezJ9NzQpKD86b3xcXFxcdTB7Mn02W0ZmXSkoPzpffFxcXFx1MHsyfTVbRmZdKXsyfVwiXFxzKjovLFxuICBjb25zdHJ1Y3RvcjogL1wiKD86Y3xcXFxcdTAwNjMpKD86b3xcXFxcdTAwNltGZl0pKD86bnxcXFxcdTAwNltFZV0pKD86c3xcXFxcdTAwNzMpKD86dHxcXFxcdTAwNzQpKD86cnxcXFxcdTAwNzIpKD86dXxcXFxcdTAwNzUpKD86Y3xcXFxcdTAwNjMpKD86dHxcXFxcdTAwNzQpKD86b3xcXFxcdTAwNltGZl0pKD86cnxcXFxcdTAwNzIpXCJcXHMqOi8sXG4gIHByb3RvU2hvcnQ6IC9cIl9fcHJvdG9fX1wiXFxzKjovLFxuICBjb25zdHJ1Y3RvclNob3J0OiAvXCJjb25zdHJ1Y3RvclwiXFxzKjovXG59O1xuY29uc3QgSlNPTl9TSUdOQVRVUkUgPSAvXlxccypbXCJbe118XlxccyotP1xcZHsxLDE2fShcXC5cXGR7MSwxN30pPyhbRWVdWystXT9cXGQrKT9cXHMqJC87XG5jb25zdCBTUEVDSUFMX1ZBTFVFUyA9IHtcbiAgdHJ1ZTogdHJ1ZSxcbiAgZmFsc2U6IGZhbHNlLFxuICBudWxsOiBudWxsLFxuICB1bmRlZmluZWQ6IHZvaWQgMCxcbiAgbmFuOiBOdW1iZXIuTmFOLFxuICBpbmZpbml0eTogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICBcIi1pbmZpbml0eVwiOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbn07XG5jb25zdCBJU09fREFURV9SRUdFWCA9IC9eKFxcZHs0fSktKFxcZHsyfSktKFxcZHsyfSlUKFxcZHsyfSk6KFxcZHsyfSk6KFxcZHsyfSkoPzpcXC4oXFxkezEsN30pKT8oPzpafChbKy1dKShcXGR7Mn0pOihcXGR7Mn0pKSQvO1xuZnVuY3Rpb24gaXNWYWxpZERhdGUoZGF0ZSkge1xuICByZXR1cm4gZGF0ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKGRhdGUuZ2V0VGltZSgpKTtcbn1cbmZ1bmN0aW9uIHBhcnNlSVNPRGF0ZSh2YWx1ZSkge1xuICBjb25zdCBtYXRjaCA9IElTT19EQVRFX1JFR0VYLmV4ZWModmFsdWUpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgW1xuICAgICxcbiAgICB5ZWFyLFxuICAgIG1vbnRoLFxuICAgIGRheSxcbiAgICBob3VyLFxuICAgIG1pbnV0ZSxcbiAgICBzZWNvbmQsXG4gICAgbXMsXG4gICAgb2Zmc2V0U2lnbixcbiAgICBvZmZzZXRIb3VyLFxuICAgIG9mZnNldE1pbnV0ZVxuICBdID0gbWF0Y2g7XG4gIGxldCBkYXRlID0gbmV3IERhdGUoXG4gICAgRGF0ZS5VVEMoXG4gICAgICBwYXJzZUludCh5ZWFyLCAxMCksXG4gICAgICBwYXJzZUludChtb250aCwgMTApIC0gMSxcbiAgICAgIHBhcnNlSW50KGRheSwgMTApLFxuICAgICAgcGFyc2VJbnQoaG91ciwgMTApLFxuICAgICAgcGFyc2VJbnQobWludXRlLCAxMCksXG4gICAgICBwYXJzZUludChzZWNvbmQsIDEwKSxcbiAgICAgIG1zID8gcGFyc2VJbnQobXMucGFkRW5kKDMsIFwiMFwiKSwgMTApIDogMFxuICAgIClcbiAgKTtcbiAgaWYgKG9mZnNldFNpZ24pIHtcbiAgICBjb25zdCBvZmZzZXQgPSAocGFyc2VJbnQob2Zmc2V0SG91ciwgMTApICogNjAgKyBwYXJzZUludChvZmZzZXRNaW51dGUsIDEwKSkgKiAob2Zmc2V0U2lnbiA9PT0gXCIrXCIgPyAtMSA6IDEpO1xuICAgIGRhdGUuc2V0VVRDTWludXRlcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSArIG9mZnNldCk7XG4gIH1cbiAgcmV0dXJuIGlzVmFsaWREYXRlKGRhdGUpID8gZGF0ZSA6IG51bGw7XG59XG5mdW5jdGlvbiBiZXR0ZXJKU09OUGFyc2UodmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgc3RyaWN0ID0gZmFsc2UsXG4gICAgd2FybmluZ3MgPSBmYWxzZSxcbiAgICByZXZpdmVyLFxuICAgIHBhcnNlRGF0ZXMgPSB0cnVlXG4gIH0gPSBvcHRpb25zO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGNvbnN0IHRyaW1tZWQgPSB2YWx1ZS50cmltKCk7XG4gIGlmICh0cmltbWVkWzBdID09PSAnXCInICYmIHRyaW1tZWQuZW5kc1dpdGgoJ1wiJykgJiYgIXRyaW1tZWQuc2xpY2UoMSwgLTEpLmluY2x1ZGVzKCdcIicpKSB7XG4gICAgcmV0dXJuIHRyaW1tZWQuc2xpY2UoMSwgLTEpO1xuICB9XG4gIGNvbnN0IGxvd2VyVmFsdWUgPSB0cmltbWVkLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChsb3dlclZhbHVlLmxlbmd0aCA8PSA5ICYmIGxvd2VyVmFsdWUgaW4gU1BFQ0lBTF9WQUxVRVMpIHtcbiAgICByZXR1cm4gU1BFQ0lBTF9WQUxVRVNbbG93ZXJWYWx1ZV07XG4gIH1cbiAgaWYgKCFKU09OX1NJR05BVFVSRS50ZXN0KHRyaW1tZWQpKSB7XG4gICAgaWYgKHN0cmljdCkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiW2JldHRlci1qc29uXSBJbnZhbGlkIEpTT05cIik7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBjb25zdCBoYXNQcm90b1BhdHRlcm4gPSBPYmplY3QuZW50cmllcyhQUk9UT19QT0xMVVRJT05fUEFUVEVSTlMpLnNvbWUoXG4gICAgKFtrZXksIHBhdHRlcm5dKSA9PiB7XG4gICAgICBjb25zdCBtYXRjaGVzID0gcGF0dGVybi50ZXN0KHRyaW1tZWQpO1xuICAgICAgaWYgKG1hdGNoZXMgJiYgd2FybmluZ3MpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBbYmV0dGVyLWpzb25dIERldGVjdGVkIHBvdGVudGlhbCBwcm90b3R5cGUgcG9sbHV0aW9uIGF0dGVtcHQgdXNpbmcgJHtrZXl9IHBhdHRlcm5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hlcztcbiAgICB9XG4gICk7XG4gIGlmIChoYXNQcm90b1BhdHRlcm4gJiYgc3RyaWN0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJbYmV0dGVyLWpzb25dIFBvdGVudGlhbCBwcm90b3R5cGUgcG9sbHV0aW9uIGF0dGVtcHQgZGV0ZWN0ZWRcIlxuICAgICk7XG4gIH1cbiAgdHJ5IHtcbiAgICBjb25zdCBzZWN1cmVSZXZpdmVyID0gKGtleSwgdmFsdWUyKSA9PiB7XG4gICAgICBpZiAoa2V5ID09PSBcIl9fcHJvdG9fX1wiIHx8IGtleSA9PT0gXCJjb25zdHJ1Y3RvclwiICYmIHZhbHVlMiAmJiB0eXBlb2YgdmFsdWUyID09PSBcIm9iamVjdFwiICYmIFwicHJvdG90eXBlXCIgaW4gdmFsdWUyKSB7XG4gICAgICAgIGlmICh3YXJuaW5ncykge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIGBbYmV0dGVyLWpzb25dIERyb3BwaW5nIFwiJHtrZXl9XCIga2V5IHRvIHByZXZlbnQgcHJvdG90eXBlIHBvbGx1dGlvbmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VEYXRlcyAmJiB0eXBlb2YgdmFsdWUyID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBwYXJzZUlTT0RhdGUodmFsdWUyKTtcbiAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJldml2ZXIgPyByZXZpdmVyKGtleSwgdmFsdWUyKSA6IHZhbHVlMjtcbiAgICB9O1xuICAgIHJldHVybiBKU09OLnBhcnNlKHRyaW1tZWQsIHNlY3VyZVJldml2ZXIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbmZ1bmN0aW9uIHBhcnNlSlNPTih2YWx1ZSwgb3B0aW9ucyA9IHsgc3RyaWN0OiB0cnVlIH0pIHtcbiAgcmV0dXJuIGJldHRlckpTT05QYXJzZSh2YWx1ZSwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCB7IHBhcnNlSlNPTiBhcyBwIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.fsvwNeUx.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.fsvwNeUx.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s: () => (/* binding */ schema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/types.js\");\n\n\nconst schema = {\n  jwks: {\n    fields: {\n      publicKey: {\n        type: \"string\",\n        required: true\n      },\n      privateKey: {\n        type: \"string\",\n        required: true\n      },\n      createdAt: {\n        type: \"date\",\n        required: true\n      }\n    }\n  }\n};\nzod__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  publicKey: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  privateKey: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_0__.date()\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguZnN2d05lVXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdCOztBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQVE7QUFDUixNQUFNLHVDQUFRO0FBQ2QsYUFBYSx1Q0FBUTtBQUNyQixjQUFjLHVDQUFRO0FBQ3RCLGFBQWEscUNBQU07QUFDbkIsQ0FBQzs7QUFFc0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpbGltYXMvRG9jdW1lbnRzL0RhdmkvZXN0dWRvcy9yZWFjdC9iZXdlYXIvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLmZzdndOZVV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcblxuY29uc3Qgc2NoZW1hID0ge1xuICBqd2tzOiB7XG4gICAgZmllbGRzOiB7XG4gICAgICBwdWJsaWNLZXk6IHtcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBwcml2YXRlS2V5OiB7XG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgICB9LFxuICAgICAgY3JlYXRlZEF0OiB7XG4gICAgICAgIHR5cGU6IFwiZGF0ZVwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbnoub2JqZWN0KHtcbiAgaWQ6IHouc3RyaW5nKCksXG4gIHB1YmxpY0tleTogei5zdHJpbmcoKSxcbiAgcHJpdmF0ZUtleTogei5zdHJpbmcoKSxcbiAgY3JlYXRlZEF0OiB6LmRhdGUoKVxufSk7XG5cbmV4cG9ydCB7IHNjaGVtYSBhcyBzIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.fsvwNeUx.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.iKoUsdFE.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.iKoUsdFE.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getIp)\n/* harmony export */ });\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n\n\nfunction getIp(req, options) {\n  if (options.advanced?.ipAddress?.disableIpTracking) {\n    return null;\n  }\n  const testIP = \"127.0.0.1\";\n  if (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.i) {\n    return testIP;\n  }\n  const headers = \"headers\" in req ? req.headers : req;\n  const defaultHeaders = [\"x-forwarded-for\"];\n  const ipHeaders = options.advanced?.ipAddress?.ipAddressHeaders || defaultHeaders;\n  for (const key of ipHeaders) {\n    const value = \"get\" in headers ? headers.get(key) : headers[key];\n    if (typeof value === \"string\") {\n      const ip = value.split(\",\")[0].trim();\n      if (isValidIP(ip)) {\n        return ip;\n      }\n    }\n  }\n  return null;\n}\nfunction isValidIP(ip) {\n  const ipv4Regex = /^(\\d{1,3}\\.){3}\\d{1,3}$/;\n  if (ipv4Regex.test(ip)) {\n    const parts = ip.split(\".\").map(Number);\n    return parts.every((part) => part >= 0 && part <= 255);\n  }\n  const ipv6Regex = /^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$/;\n  return ipv6Regex.test(ip);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguaUtvVXNkRkUubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlEOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSx3REFBTTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsSUFBSSxJQUFJLEVBQUUsR0FBRyxJQUFJO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLElBQUksR0FBRyxFQUFFLFlBQVksSUFBSTtBQUM1RDtBQUNBOztBQUVzQiIsInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlsaW1hcy9Eb2N1bWVudHMvRGF2aS9lc3R1ZG9zL3JlYWN0L2Jld2Vhci9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguaUtvVXNkRkUubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGkgYXMgaXNUZXN0IH0gZnJvbSAnLi9iZXR0ZXItYXV0aC44em94emctRi5tanMnO1xuXG5mdW5jdGlvbiBnZXRJcChyZXEsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMuYWR2YW5jZWQ/LmlwQWRkcmVzcz8uZGlzYWJsZUlwVHJhY2tpbmcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCB0ZXN0SVAgPSBcIjEyNy4wLjAuMVwiO1xuICBpZiAoaXNUZXN0KSB7XG4gICAgcmV0dXJuIHRlc3RJUDtcbiAgfVxuICBjb25zdCBoZWFkZXJzID0gXCJoZWFkZXJzXCIgaW4gcmVxID8gcmVxLmhlYWRlcnMgOiByZXE7XG4gIGNvbnN0IGRlZmF1bHRIZWFkZXJzID0gW1wieC1mb3J3YXJkZWQtZm9yXCJdO1xuICBjb25zdCBpcEhlYWRlcnMgPSBvcHRpb25zLmFkdmFuY2VkPy5pcEFkZHJlc3M/LmlwQWRkcmVzc0hlYWRlcnMgfHwgZGVmYXVsdEhlYWRlcnM7XG4gIGZvciAoY29uc3Qga2V5IG9mIGlwSGVhZGVycykge1xuICAgIGNvbnN0IHZhbHVlID0gXCJnZXRcIiBpbiBoZWFkZXJzID8gaGVhZGVycy5nZXQoa2V5KSA6IGhlYWRlcnNba2V5XTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCBpcCA9IHZhbHVlLnNwbGl0KFwiLFwiKVswXS50cmltKCk7XG4gICAgICBpZiAoaXNWYWxpZElQKGlwKSkge1xuICAgICAgICByZXR1cm4gaXA7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gaXNWYWxpZElQKGlwKSB7XG4gIGNvbnN0IGlwdjRSZWdleCA9IC9eKFxcZHsxLDN9XFwuKXszfVxcZHsxLDN9JC87XG4gIGlmIChpcHY0UmVnZXgudGVzdChpcCkpIHtcbiAgICBjb25zdCBwYXJ0cyA9IGlwLnNwbGl0KFwiLlwiKS5tYXAoTnVtYmVyKTtcbiAgICByZXR1cm4gcGFydHMuZXZlcnkoKHBhcnQpID0+IHBhcnQgPj0gMCAmJiBwYXJ0IDw9IDI1NSk7XG4gIH1cbiAgY29uc3QgaXB2NlJlZ2V4ID0gL14oWzAtOWEtZkEtRl17MSw0fTopezd9WzAtOWEtZkEtRl17MSw0fSQvO1xuICByZXR1cm4gaXB2NlJlZ2V4LnRlc3QoaXApO1xufVxuXG5leHBvcnQgeyBnZXRJcCBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.iKoUsdFE.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s: () => (/* binding */ safeJSONParse)\n/* harmony export */ });\nfunction safeJSONParse(data) {\n  function reviver(_, value) {\n    if (typeof value === \"string\") {\n      const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n      if (iso8601Regex.test(value)) {\n        const date = new Date(value);\n        if (!isNaN(date.getTime())) {\n          return date;\n        }\n      }\n    }\n    return value;\n  }\n  try {\n    return JSON.parse(data, reviver);\n  } catch {\n    return null;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGgudEI1ZVU2RVkubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUU4QiIsInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlsaW1hcy9Eb2N1bWVudHMvRGF2aS9lc3R1ZG9zL3JlYWN0L2Jld2Vhci9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGgudEI1ZVU2RVkubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHNhZmVKU09OUGFyc2UoZGF0YSkge1xuICBmdW5jdGlvbiByZXZpdmVyKF8sIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgaXNvODYwMVJlZ2V4ID0gL15cXGR7NH0tXFxkezJ9LVxcZHsyfVRcXGR7Mn06XFxkezJ9OlxcZHsyfSg/OlxcLlxcZCspP1okLztcbiAgICAgIGlmIChpc284NjAxUmVnZXgudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc05hTihkYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhLCByZXZpdmVyKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IHsgc2FmZUpTT05QYXJzZSBhcyBzIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.xcRi-2W1.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.xcRi-2W1.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   o: () => (/* binding */ organization),\n/* harmony export */   p: () => (/* binding */ parseRoles)\n/* harmony export */ });\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/types.js\");\n/* harmony import */ var _better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.cM0Fc3LZ.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.cM0Fc3LZ.mjs\");\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./better-auth.Cc72UxUH.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs\");\n/* harmony import */ var _better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _better_auth_ffWeg50w_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./better-auth.ffWeg50w.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs\");\n/* harmony import */ var _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! defu */ \"(rsc)/./node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _better_auth_OuYYTHC7_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./better-auth.OuYYTHC7.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.OuYYTHC7.mjs\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../cookies/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var _better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _plugins_organization_access_index_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../plugins/organization/access/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/plugins/organization/access/index.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst shimContext = (originalObject, newContext) => {\n  const shimmedObj = {};\n  for (const [key, value] of Object.entries(originalObject)) {\n    shimmedObj[key] = (ctx) => {\n      return value({\n        ...ctx,\n        context: {\n          ...newContext,\n          ...ctx.context\n        }\n      });\n    };\n    shimmedObj[key].path = value.path;\n    shimmedObj[key].method = value.method;\n    shimmedObj[key].options = value.options;\n    shimmedObj[key].headers = value.headers;\n  }\n  return shimmedObj;\n};\n\nconst getOrgAdapter = (context, options) => {\n  const adapter = context.adapter;\n  return {\n    findOrganizationBySlug: async (slug) => {\n      const organization = await adapter.findOne({\n        model: \"organization\",\n        where: [\n          {\n            field: \"slug\",\n            value: slug\n          }\n        ]\n      });\n      return organization;\n    },\n    createOrganization: async (data) => {\n      const organization = await adapter.create({\n        model: \"organization\",\n        data: {\n          ...data.organization,\n          metadata: data.organization.metadata ? JSON.stringify(data.organization.metadata) : void 0\n        }\n      });\n      return {\n        ...organization,\n        metadata: organization.metadata ? JSON.parse(organization.metadata) : void 0\n      };\n    },\n    findMemberByEmail: async (data) => {\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            field: \"email\",\n            value: data.email\n          }\n        ]\n      });\n      if (!user) {\n        return null;\n      }\n      const member = await adapter.findOne({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: data.organizationId\n          },\n          {\n            field: \"userId\",\n            value: user.id\n          }\n        ]\n      });\n      if (!member) {\n        return null;\n      }\n      return {\n        ...member,\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          image: user.image\n        }\n      };\n    },\n    listMembers: async (data) => {\n      const members = await adapter.findMany({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: data.organizationId\n          }\n        ],\n        limit: options?.membershipLimit || 100\n      });\n      return members;\n    },\n    findMemberByOrgId: async (data) => {\n      const [member, user] = await Promise.all([\n        await adapter.findOne({\n          model: \"member\",\n          where: [\n            {\n              field: \"userId\",\n              value: data.userId\n            },\n            {\n              field: \"organizationId\",\n              value: data.organizationId\n            }\n          ]\n        }),\n        await adapter.findOne({\n          model: \"user\",\n          where: [\n            {\n              field: \"id\",\n              value: data.userId\n            }\n          ]\n        })\n      ]);\n      if (!user || !member) {\n        return null;\n      }\n      return {\n        ...member,\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          image: user.image\n        }\n      };\n    },\n    findMemberById: async (memberId) => {\n      const member = await adapter.findOne({\n        model: \"member\",\n        where: [\n          {\n            field: \"id\",\n            value: memberId\n          }\n        ]\n      });\n      if (!member) {\n        return null;\n      }\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: member.userId\n          }\n        ]\n      });\n      if (!user) {\n        return null;\n      }\n      return {\n        ...member,\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          image: user.image\n        }\n      };\n    },\n    createMember: async (data) => {\n      const member = await adapter.create({\n        model: \"member\",\n        data: {\n          ...data,\n          createdAt: /* @__PURE__ */ new Date()\n        }\n      });\n      return member;\n    },\n    updateMember: async (memberId, role) => {\n      const member = await adapter.update({\n        model: \"member\",\n        where: [\n          {\n            field: \"id\",\n            value: memberId\n          }\n        ],\n        update: {\n          role\n        }\n      });\n      return member;\n    },\n    deleteMember: async (memberId) => {\n      const member = await adapter.delete({\n        model: \"member\",\n        where: [\n          {\n            field: \"id\",\n            value: memberId\n          }\n        ]\n      });\n      return member;\n    },\n    updateOrganization: async (organizationId, data) => {\n      const organization = await adapter.update({\n        model: \"organization\",\n        where: [\n          {\n            field: \"id\",\n            value: organizationId\n          }\n        ],\n        update: {\n          ...data,\n          metadata: typeof data.metadata === \"object\" ? JSON.stringify(data.metadata) : data.metadata\n        }\n      });\n      if (!organization) {\n        return null;\n      }\n      return {\n        ...organization,\n        metadata: organization.metadata ? (0,_better_auth_ffWeg50w_mjs__WEBPACK_IMPORTED_MODULE_9__.p)(organization.metadata) : void 0\n      };\n    },\n    deleteOrganization: async (organizationId) => {\n      await adapter.delete({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId\n          }\n        ]\n      });\n      await adapter.delete({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId\n          }\n        ]\n      });\n      await adapter.delete({\n        model: \"organization\",\n        where: [\n          {\n            field: \"id\",\n            value: organizationId\n          }\n        ]\n      });\n      return organizationId;\n    },\n    setActiveOrganization: async (sessionToken, organizationId) => {\n      const session = await context.internalAdapter.updateSession(\n        sessionToken,\n        {\n          activeOrganizationId: organizationId\n        }\n      );\n      return session;\n    },\n    findOrganizationById: async (organizationId) => {\n      const organization = await adapter.findOne({\n        model: \"organization\",\n        where: [\n          {\n            field: \"id\",\n            value: organizationId\n          }\n        ]\n      });\n      return organization;\n    },\n    /**\n     * @requires db\n     */\n    findFullOrganization: async ({\n      organizationId,\n      isSlug,\n      includeTeams\n    }) => {\n      const org = await adapter.findOne({\n        model: \"organization\",\n        where: [{ field: isSlug ? \"slug\" : \"id\", value: organizationId }]\n      });\n      if (!org) {\n        return null;\n      }\n      const [invitations, members, teams] = await Promise.all([\n        adapter.findMany({\n          model: \"invitation\",\n          where: [{ field: \"organizationId\", value: org.id }]\n        }),\n        adapter.findMany({\n          model: \"member\",\n          where: [{ field: \"organizationId\", value: org.id }],\n          limit: options?.membershipLimit || 100\n        }),\n        includeTeams ? adapter.findMany({\n          model: \"team\",\n          where: [{ field: \"organizationId\", value: org.id }]\n        }) : null\n      ]);\n      if (!org) return null;\n      const userIds = members.map((member) => member.userId);\n      const users = userIds.length > 0 ? await adapter.findMany({\n        model: \"user\",\n        where: [{ field: \"id\", value: userIds, operator: \"in\" }],\n        limit: options?.membershipLimit || 100\n      }) : [];\n      const userMap = new Map(users.map((user) => [user.id, user]));\n      const membersWithUsers = members.map((member) => {\n        const user = userMap.get(member.userId);\n        if (!user) {\n          throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_8__.B(\n            \"Unexpected error: User not found for member\"\n          );\n        }\n        return {\n          ...member,\n          user: {\n            id: user.id,\n            name: user.name,\n            email: user.email,\n            image: user.image\n          }\n        };\n      });\n      return {\n        ...org,\n        invitations,\n        members: membersWithUsers,\n        teams\n      };\n    },\n    listOrganizations: async (userId) => {\n      const members = await adapter.findMany({\n        model: \"member\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      if (!members || members.length === 0) {\n        return [];\n      }\n      const organizationIds = members.map((member) => member.organizationId);\n      const organizations = await adapter.findMany({\n        model: \"organization\",\n        where: [\n          {\n            field: \"id\",\n            value: organizationIds,\n            operator: \"in\"\n          }\n        ]\n      });\n      return organizations;\n    },\n    createTeam: async (data) => {\n      const team = await adapter.create({\n        model: \"team\",\n        data\n      });\n      return team;\n    },\n    findTeamById: async ({\n      teamId,\n      organizationId,\n      includeTeamMembers\n    }) => {\n      const team = await adapter.findOne({\n        model: \"team\",\n        where: [\n          {\n            field: \"id\",\n            value: teamId\n          },\n          ...organizationId ? [\n            {\n              field: \"organizationId\",\n              value: organizationId\n            }\n          ] : []\n        ]\n      });\n      if (!team) {\n        return null;\n      }\n      let members = [];\n      if (includeTeamMembers) {\n        members = await adapter.findMany({\n          model: \"member\",\n          where: [\n            {\n              field: \"teamId\",\n              value: teamId\n            }\n          ],\n          limit: options?.membershipLimit || 100\n        });\n        return {\n          ...team,\n          members\n        };\n      }\n      return team;\n    },\n    updateTeam: async (teamId, data) => {\n      const team = await adapter.update({\n        model: \"team\",\n        where: [\n          {\n            field: \"id\",\n            value: teamId\n          }\n        ],\n        update: {\n          ...data\n        }\n      });\n      return team;\n    },\n    deleteTeam: async (teamId) => {\n      const team = await adapter.delete({\n        model: \"team\",\n        where: [\n          {\n            field: \"id\",\n            value: teamId\n          }\n        ]\n      });\n      return team;\n    },\n    listTeams: async (organizationId) => {\n      const teams = await adapter.findMany({\n        model: \"team\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId\n          }\n        ]\n      });\n      return teams;\n    },\n    createTeamInvitation: async ({\n      email,\n      role,\n      teamId,\n      organizationId,\n      inviterId,\n      expiresIn = 1e3 * 60 * 60 * 48\n      // Default expiration: 48 hours\n    }) => {\n      const expiresAt = (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_7__.g)(expiresIn);\n      const invitation = await adapter.create({\n        model: \"invitation\",\n        data: {\n          email,\n          role,\n          organizationId,\n          teamId,\n          inviterId,\n          status: \"pending\",\n          expiresAt\n        }\n      });\n      return invitation;\n    },\n    findInvitationsByTeamId: async (teamId) => {\n      const invitations = await adapter.findMany({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"teamId\",\n            value: teamId\n          }\n        ]\n      });\n      return invitations;\n    },\n    createInvitation: async ({\n      invitation,\n      user\n    }) => {\n      const defaultExpiration = 60 * 60 * 48;\n      const expiresAt = (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_7__.g)(\n        options?.invitationExpiresIn || defaultExpiration,\n        \"sec\"\n      );\n      const invite = await adapter.create({\n        model: \"invitation\",\n        data: {\n          status: \"pending\",\n          expiresAt,\n          inviterId: user.id,\n          ...invitation\n        }\n      });\n      return invite;\n    },\n    findInvitationById: async (id) => {\n      const invitation = await adapter.findOne({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"id\",\n            value: id\n          }\n        ]\n      });\n      return invitation;\n    },\n    findPendingInvitation: async (data) => {\n      const invitation = await adapter.findMany({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"email\",\n            value: data.email\n          },\n          {\n            field: \"organizationId\",\n            value: data.organizationId\n          },\n          {\n            field: \"status\",\n            value: \"pending\"\n          }\n        ]\n      });\n      return invitation.filter(\n        (invite) => new Date(invite.expiresAt) > /* @__PURE__ */ new Date()\n      );\n    },\n    findPendingInvitations: async (data) => {\n      const invitations = await adapter.findMany({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: data.organizationId\n          },\n          {\n            field: \"status\",\n            value: \"pending\"\n          }\n        ]\n      });\n      return invitations.filter(\n        (invite) => new Date(invite.expiresAt) > /* @__PURE__ */ new Date()\n      );\n    },\n    listInvitations: async (data) => {\n      const invitations = await adapter.findMany({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: data.organizationId\n          }\n        ]\n      });\n      return invitations;\n    },\n    updateInvitation: async (data) => {\n      const invitation = await adapter.update({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"id\",\n            value: data.invitationId\n          }\n        ],\n        update: {\n          status: data.status\n        }\n      });\n      return invitation;\n    }\n  };\n};\n\nconst orgMiddleware = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(async (ctx) => {\n  return {};\n});\nconst orgSessionMiddleware = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\n  {\n    use: [_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.s]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    return {\n      session\n    };\n  }\n);\n\nconst ORGANIZATION_ERROR_CODES = {\n  YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_ORGANIZATION: \"You are not allowed to create a new organization\",\n  YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_ORGANIZATIONS: \"You have reached the maximum number of organizations\",\n  ORGANIZATION_ALREADY_EXISTS: \"Organization already exists\",\n  ORGANIZATION_NOT_FOUND: \"Organization not found\",\n  USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION: \"User is not a member of the organization\",\n  YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_ORGANIZATION: \"You are not allowed to update this organization\",\n  YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_ORGANIZATION: \"You are not allowed to delete this organization\",\n  NO_ACTIVE_ORGANIZATION: \"No active organization\",\n  USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION: \"User is already a member of this organization\",\n  MEMBER_NOT_FOUND: \"Member not found\",\n  ROLE_NOT_FOUND: \"Role not found\",\n  YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_TEAM: \"You are not allowed to create a new team\",\n  TEAM_ALREADY_EXISTS: \"Team already exists\",\n  TEAM_NOT_FOUND: \"Team not found\",\n  YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER: \"You cannot leave the organization as the only owner\",\n  YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_MEMBER: \"You are not allowed to delete this member\",\n  YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION: \"You are not allowed to invite users to this organization\",\n  USER_IS_ALREADY_INVITED_TO_THIS_ORGANIZATION: \"User is already invited to this organization\",\n  INVITATION_NOT_FOUND: \"Invitation not found\",\n  YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION: \"You are not the recipient of the invitation\",\n  YOU_ARE_NOT_ALLOWED_TO_CANCEL_THIS_INVITATION: \"You are not allowed to cancel this invitation\",\n  INVITER_IS_NO_LONGER_A_MEMBER_OF_THE_ORGANIZATION: \"Inviter is no longer a member of the organization\",\n  YOU_ARE_NOT_ALLOWED_TO_INVITE_USER_WITH_THIS_ROLE: \"you are not allowed to invite user with this role\",\n  FAILED_TO_RETRIEVE_INVITATION: \"Failed to retrieve invitation\",\n  YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_TEAMS: \"You have reached the maximum number of teams\",\n  UNABLE_TO_REMOVE_LAST_TEAM: \"Unable to remove last team\",\n  YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_MEMBER: \"You are not allowed to update this member\",\n  ORGANIZATION_MEMBERSHIP_LIMIT_REACHED: \"Organization membership limit reached\",\n  YOU_ARE_NOT_ALLOWED_TO_CREATE_TEAMS_IN_THIS_ORGANIZATION: \"You are not allowed to create teams in this organization\",\n  YOU_ARE_NOT_ALLOWED_TO_DELETE_TEAMS_IN_THIS_ORGANIZATION: \"You are not allowed to delete teams in this organization\",\n  YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_TEAM: \"You are not allowed to update this team\",\n  YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_TEAM: \"You are not allowed to delete this team\",\n  INVITATION_LIMIT_REACHED: \"Invitation limit reached\",\n  TEAM_MEMBER_LIMIT_REACHED: \"Team member limit reached\"\n};\n\nconst createInvitation = (option) => (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/invite-member\",\n  {\n    method: \"POST\",\n    use: [orgMiddleware, orgSessionMiddleware],\n    body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      email: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n        description: \"The email address of the user to invite\"\n      }),\n      role: zod__WEBPACK_IMPORTED_MODULE_20__.union([\n        zod__WEBPACK_IMPORTED_MODULE_20__.string({\n          description: \"The role to assign to the user\"\n        }),\n        zod__WEBPACK_IMPORTED_MODULE_20__.array(\n          zod__WEBPACK_IMPORTED_MODULE_20__.string({\n            description: \"The roles to assign to the user\"\n          })\n        )\n      ]),\n      organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n        description: \"The organization ID to invite the user to\"\n      }).optional(),\n      resend: zod__WEBPACK_IMPORTED_MODULE_20__.boolean({\n        description: \"Resend the invitation email, if the user is already invited\"\n      }).optional(),\n      teamId: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n        description: \"The team ID to invite the user to\"\n      }).optional()\n    }),\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Invite a user to an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    id: {\n                      type: \"string\"\n                    },\n                    email: {\n                      type: \"string\"\n                    },\n                    role: {\n                      type: \"string\"\n                    },\n                    organizationId: {\n                      type: \"string\"\n                    },\n                    inviterId: {\n                      type: \"string\"\n                    },\n                    status: {\n                      type: \"string\"\n                    },\n                    expiresAt: {\n                      type: \"string\"\n                    }\n                  },\n                  required: [\n                    \"id\",\n                    \"email\",\n                    \"role\",\n                    \"organizationId\",\n                    \"inviterId\",\n                    \"status\",\n                    \"expiresAt\"\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;\n    if (!organizationId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId\n    });\n    if (!member) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const canInvite = (0,_better_auth_OuYYTHC7_mjs__WEBPACK_IMPORTED_MODULE_12__.h)({\n      role: member.role,\n      options: ctx.context.orgOptions,\n      permissions: {\n        invitation: [\"create\"]\n      }\n    });\n    if (!canInvite) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION\n      });\n    }\n    const creatorRole = ctx.context.orgOptions.creatorRole || \"owner\";\n    const roles = parseRoles(ctx.body.role);\n    if (member.role !== creatorRole && roles.split(\",\").includes(creatorRole)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_INVITE_USER_WITH_THIS_ROLE\n      });\n    }\n    const alreadyMember = await adapter.findMemberByEmail({\n      email: ctx.body.email,\n      organizationId\n    });\n    if (alreadyMember) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION\n      });\n    }\n    const alreadyInvited = await adapter.findPendingInvitation({\n      email: ctx.body.email,\n      organizationId\n    });\n    if (alreadyInvited.length && !ctx.body.resend) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_ALREADY_INVITED_TO_THIS_ORGANIZATION\n      });\n    }\n    if (alreadyInvited.length && ctx.context.orgOptions.cancelPendingInvitationsOnReInvite) {\n      await adapter.updateInvitation({\n        invitationId: alreadyInvited[0].id,\n        status: \"canceled\"\n      });\n    }\n    const organization = await adapter.findOrganizationById(organizationId);\n    if (!organization) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    const invitationLimit = typeof ctx.context.orgOptions.invitationLimit === \"function\" ? await ctx.context.orgOptions.invitationLimit(\n      {\n        user: session.user,\n        organization,\n        member\n      },\n      ctx.context\n    ) : ctx.context.orgOptions.invitationLimit ?? 100;\n    const pendingInvitations = await adapter.findPendingInvitations({\n      organizationId\n    });\n    if (pendingInvitations.length >= invitationLimit) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.INVITATION_LIMIT_REACHED\n      });\n    }\n    if (ctx.context.orgOptions.teams && ctx.context.orgOptions.teams.enabled && typeof ctx.context.orgOptions.teams.maximumMembersPerTeam !== \"undefined\" && \"teamId\" in ctx.body && ctx.body.teamId) {\n      const team = await adapter.findTeamById({\n        teamId: ctx.body.teamId,\n        organizationId,\n        includeTeamMembers: true\n      });\n      if (!team) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n        });\n      }\n      const maximumMembersPerTeam = typeof ctx.context.orgOptions.teams.maximumMembersPerTeam === \"function\" ? await ctx.context.orgOptions.teams.maximumMembersPerTeam({\n        teamId: ctx.body.teamId,\n        session,\n        organizationId\n      }) : ctx.context.orgOptions.teams.maximumMembersPerTeam;\n      if (team.members.length >= maximumMembersPerTeam) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.TEAM_MEMBER_LIMIT_REACHED\n        });\n      }\n    }\n    const invitation = await adapter.createInvitation({\n      invitation: {\n        role: roles,\n        email: ctx.body.email.toLowerCase(),\n        organizationId,\n        ...\"teamId\" in ctx.body ? {\n          teamId: ctx.body.teamId\n        } : {}\n      },\n      user: session.user\n    });\n    await ctx.context.orgOptions.sendInvitationEmail?.(\n      {\n        id: invitation.id,\n        role: invitation.role,\n        email: invitation.email.toLowerCase(),\n        organization,\n        inviter: {\n          ...member,\n          user: session.user\n        },\n        invitation\n      },\n      ctx.request\n    );\n    return ctx.json(invitation);\n  }\n);\nconst acceptInvitation = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/accept-invitation\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      invitationId: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n        description: \"The ID of the invitation to accept\"\n      })\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Accept an invitation to an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    invitation: {\n                      type: \"object\"\n                    },\n                    member: {\n                      type: \"object\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const invitation = await adapter.findInvitationById(ctx.body.invitationId);\n    if (!invitation || invitation.expiresAt < /* @__PURE__ */ new Date() || invitation.status !== \"pending\") {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.INVITATION_NOT_FOUND\n      });\n    }\n    if (invitation.email.toLowerCase() !== session.user.email.toLowerCase()) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION\n      });\n    }\n    const membershipLimit = ctx.context.orgOptions?.membershipLimit || 100;\n    const members = await adapter.listMembers({\n      organizationId: invitation.organizationId\n    });\n    if (members.length >= membershipLimit) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_MEMBERSHIP_LIMIT_REACHED\n      });\n    }\n    const acceptedI = await adapter.updateInvitation({\n      invitationId: ctx.body.invitationId,\n      status: \"accepted\"\n    });\n    if (!acceptedI) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.FAILED_TO_RETRIEVE_INVITATION\n      });\n    }\n    if (ctx.context.orgOptions.teams && ctx.context.orgOptions.teams.enabled && typeof ctx.context.orgOptions.teams.maximumMembersPerTeam !== \"undefined\" && \"teamId\" in acceptedI && acceptedI.teamId) {\n      const team = await adapter.findTeamById({\n        teamId: acceptedI.teamId,\n        organizationId: invitation.organizationId,\n        includeTeamMembers: true\n      });\n      if (!team) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n        });\n      }\n      const maximumMembersPerTeam = typeof ctx.context.orgOptions.teams.maximumMembersPerTeam === \"function\" ? await ctx.context.orgOptions.teams.maximumMembersPerTeam({\n        teamId: acceptedI.teamId,\n        session,\n        organizationId: invitation.organizationId\n      }) : ctx.context.orgOptions.teams.maximumMembersPerTeam;\n      if (team.members.length >= maximumMembersPerTeam) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.TEAM_MEMBER_LIMIT_REACHED\n        });\n      }\n    }\n    const member = await adapter.createMember({\n      organizationId: invitation.organizationId,\n      userId: session.user.id,\n      role: invitation.role,\n      createdAt: /* @__PURE__ */ new Date(),\n      ...\"teamId\" in acceptedI ? {\n        teamId: acceptedI.teamId\n      } : {}\n    });\n    await adapter.setActiveOrganization(\n      session.session.token,\n      invitation.organizationId\n    );\n    if (!acceptedI) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.INVITATION_NOT_FOUND\n        }\n      });\n    }\n    return ctx.json({\n      invitation: acceptedI,\n      member\n    });\n  }\n);\nconst rejectInvitation = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/reject-invitation\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      invitationId: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n        description: \"The ID of the invitation to reject\"\n      })\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Reject an invitation to an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    invitation: {\n                      type: \"object\"\n                    },\n                    member: {\n                      type: \"null\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const invitation = await adapter.findInvitationById(ctx.body.invitationId);\n    if (!invitation || invitation.expiresAt < /* @__PURE__ */ new Date() || invitation.status !== \"pending\") {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Invitation not found!\"\n      });\n    }\n    if (invitation.email.toLowerCase() !== session.user.email.toLowerCase()) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION\n      });\n    }\n    const rejectedI = await adapter.updateInvitation({\n      invitationId: ctx.body.invitationId,\n      status: \"rejected\"\n    });\n    return ctx.json({\n      invitation: rejectedI,\n      member: null\n    });\n  }\n);\nconst cancelInvitation = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/cancel-invitation\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      invitationId: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n        description: \"The ID of the invitation to cancel\"\n      })\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    openapi: {\n      description: \"Cancel an invitation to an organization\",\n      responses: {\n        \"200\": {\n          description: \"Success\",\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  invitation: {\n                    type: \"object\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const invitation = await adapter.findInvitationById(ctx.body.invitationId);\n    if (!invitation) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.INVITATION_NOT_FOUND\n      });\n    }\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId: invitation.organizationId\n    });\n    if (!member) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const canCancel = (0,_better_auth_OuYYTHC7_mjs__WEBPACK_IMPORTED_MODULE_12__.h)({\n      role: member.role,\n      options: ctx.context.orgOptions,\n      permissions: {\n        invitation: [\"cancel\"]\n      }\n    });\n    if (!canCancel) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CANCEL_THIS_INVITATION\n      });\n    }\n    const canceledI = await adapter.updateInvitation({\n      invitationId: ctx.body.invitationId,\n      status: \"canceled\"\n    });\n    return ctx.json(canceledI);\n  }\n);\nconst getInvitation = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/get-invitation\",\n  {\n    method: \"GET\",\n    use: [orgMiddleware],\n    requireHeaders: true,\n    query: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      id: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n        description: \"The ID of the invitation to get\"\n      })\n    }),\n    metadata: {\n      openapi: {\n        description: \"Get an invitation by ID\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    id: {\n                      type: \"string\"\n                    },\n                    email: {\n                      type: \"string\"\n                    },\n                    role: {\n                      type: \"string\"\n                    },\n                    organizationId: {\n                      type: \"string\"\n                    },\n                    inviterId: {\n                      type: \"string\"\n                    },\n                    status: {\n                      type: \"string\"\n                    },\n                    expiresAt: {\n                      type: \"string\"\n                    },\n                    organizationName: {\n                      type: \"string\"\n                    },\n                    organizationSlug: {\n                      type: \"string\"\n                    },\n                    inviterEmail: {\n                      type: \"string\"\n                    }\n                  },\n                  required: [\n                    \"id\",\n                    \"email\",\n                    \"role\",\n                    \"organizationId\",\n                    \"inviterId\",\n                    \"status\",\n                    \"expiresAt\",\n                    \"organizationName\",\n                    \"organizationSlug\",\n                    \"inviterEmail\"\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = await (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(ctx);\n    if (!session) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: \"Not authenticated\"\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const invitation = await adapter.findInvitationById(ctx.query.id);\n    if (!invitation || invitation.status !== \"pending\" || invitation.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Invitation not found!\"\n      });\n    }\n    if (invitation.email.toLowerCase() !== session.user.email.toLowerCase()) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION\n      });\n    }\n    const organization = await adapter.findOrganizationById(\n      invitation.organizationId\n    );\n    if (!organization) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    const member = await adapter.findMemberByOrgId({\n      userId: invitation.inviterId,\n      organizationId: invitation.organizationId\n    });\n    if (!member) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.INVITER_IS_NO_LONGER_A_MEMBER_OF_THE_ORGANIZATION\n      });\n    }\n    return ctx.json({\n      ...invitation,\n      organizationName: organization.name,\n      organizationSlug: organization.slug,\n      inviterEmail: member.user.email\n    });\n  }\n);\nconst listInvitations = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/list-invitations\",\n  {\n    method: \"GET\",\n    use: [orgMiddleware, orgSessionMiddleware],\n    query: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n        description: \"The ID of the organization to list invitations for\"\n      }).optional()\n    }).optional()\n  },\n  async (ctx) => {\n    const session = await (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(ctx);\n    if (!session) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: \"Not authenticated\"\n      });\n    }\n    const orgId = ctx.query?.organizationId || session.session.activeOrganizationId;\n    if (!orgId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Organization ID is required\"\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const isMember = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId: orgId\n    });\n    if (!isMember) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: \"You are not a member of this organization\"\n      });\n    }\n    const invitations = await adapter.listInvitations({\n      organizationId: orgId\n    });\n    return ctx.json(invitations);\n  }\n);\n\nconst addMember = () => (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/add-member\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      userId: zod__WEBPACK_IMPORTED_MODULE_20__.coerce.string(),\n      role: zod__WEBPACK_IMPORTED_MODULE_20__.union([zod__WEBPACK_IMPORTED_MODULE_20__.string(), zod__WEBPACK_IMPORTED_MODULE_20__.array(zod__WEBPACK_IMPORTED_MODULE_20__.string())]),\n      organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n    }),\n    use: [orgMiddleware],\n    metadata: {\n      SERVER_ONLY: true,\n      $Infer: {\n        body: {}\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.body.userId ? await (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(ctx).catch((e) => null) : null;\n    const orgId = ctx.body.organizationId || session?.session.activeOrganizationId;\n    if (!orgId) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        }\n      });\n    }\n    const teamId = \"teamId\" in ctx.body ? ctx.body.teamId : void 0;\n    if (teamId && !ctx.context.orgOptions.teams?.enabled) {\n      ctx.context.logger.error(\"Teams are not enabled\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Teams are not enabled\"\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const user = await ctx.context.internalAdapter.findUserById(\n      ctx.body.userId\n    );\n    if (!user) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.USER_NOT_FOUND\n      });\n    }\n    const alreadyMember = await adapter.findMemberByEmail({\n      email: user.email,\n      organizationId: orgId\n    });\n    if (alreadyMember) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION\n      });\n    }\n    if (teamId) {\n      const team = await adapter.findTeamById({\n        teamId,\n        organizationId: orgId\n      });\n      if (!team || team.organizationId !== orgId) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n        });\n      }\n    }\n    const membershipLimit = ctx.context.orgOptions?.membershipLimit || 100;\n    const members = await adapter.listMembers({ organizationId: orgId });\n    if (members.length >= membershipLimit) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_MEMBERSHIP_LIMIT_REACHED\n      });\n    }\n    const createdMember = await adapter.createMember({\n      organizationId: orgId,\n      userId: user.id,\n      role: parseRoles(ctx.body.role),\n      createdAt: /* @__PURE__ */ new Date(),\n      ...teamId ? { teamId } : {}\n    });\n    return ctx.json(createdMember);\n  }\n);\nconst removeMember = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/remove-member\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      memberIdOrEmail: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n        description: \"The ID or email of the member to remove\"\n      }),\n      /**\n       * If not provided, the active organization will be used\n       */\n      organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n        description: \"The ID of the organization to remove the member from. If not provided, the active organization will be used\"\n      }).optional()\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Remove a member from an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    member: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\"\n                        },\n                        userId: {\n                          type: \"string\"\n                        },\n                        organizationId: {\n                          type: \"string\"\n                        },\n                        role: {\n                          type: \"string\"\n                        }\n                      },\n                      required: [\"id\", \"userId\", \"organizationId\", \"role\"]\n                    }\n                  },\n                  required: [\"member\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;\n    if (!organizationId) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        }\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId\n    });\n    if (!member) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    let toBeRemovedMember = null;\n    if (ctx.body.memberIdOrEmail.includes(\"@\")) {\n      toBeRemovedMember = await adapter.findMemberByEmail({\n        email: ctx.body.memberIdOrEmail,\n        organizationId\n      });\n    } else {\n      toBeRemovedMember = await adapter.findMemberById(\n        ctx.body.memberIdOrEmail\n      );\n    }\n    if (!toBeRemovedMember) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const roles = toBeRemovedMember.role.split(\",\");\n    const creatorRole = ctx.context.orgOptions?.creatorRole || \"owner\";\n    const isOwner = roles.includes(creatorRole);\n    if (isOwner) {\n      if (member.role !== creatorRole) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER\n        });\n      }\n      const members = await adapter.listMembers({\n        organizationId\n      });\n      const owners = members.filter((member2) => {\n        const roles2 = member2.role.split(\",\");\n        return roles2.includes(creatorRole);\n      });\n      if (owners.length <= 1) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER\n        });\n      }\n    }\n    const canDeleteMember = (0,_better_auth_OuYYTHC7_mjs__WEBPACK_IMPORTED_MODULE_12__.h)({\n      role: member.role,\n      options: ctx.context.orgOptions,\n      permissions: {\n        member: [\"delete\"]\n      }\n    });\n    if (!canDeleteMember) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_MEMBER\n      });\n    }\n    if (toBeRemovedMember?.organizationId !== organizationId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    await adapter.deleteMember(toBeRemovedMember.id);\n    if (session.user.id === toBeRemovedMember.userId && session.session.activeOrganizationId === toBeRemovedMember.organizationId) {\n      await adapter.setActiveOrganization(session.session.token, null);\n    }\n    return ctx.json({\n      member: toBeRemovedMember\n    });\n  }\n);\nconst updateMemberRole = (option) => (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/update-member-role\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      role: zod__WEBPACK_IMPORTED_MODULE_20__.union([zod__WEBPACK_IMPORTED_MODULE_20__.string(), zod__WEBPACK_IMPORTED_MODULE_20__.array(zod__WEBPACK_IMPORTED_MODULE_20__.string())]),\n      memberId: zod__WEBPACK_IMPORTED_MODULE_20__.string(),\n      organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Update the role of a member in an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    member: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\"\n                        },\n                        userId: {\n                          type: \"string\"\n                        },\n                        organizationId: {\n                          type: \"string\"\n                        },\n                        role: {\n                          type: \"string\"\n                        }\n                      },\n                      required: [\"id\", \"userId\", \"organizationId\", \"role\"]\n                    }\n                  },\n                  required: [\"member\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    if (!ctx.body.role) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\");\n    }\n    const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;\n    if (!organizationId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const roleToSet = Array.isArray(ctx.body.role) ? ctx.body.role : ctx.body.role ? [ctx.body.role] : [];\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId\n    });\n    if (!member) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const toBeUpdatedMember = member.id !== ctx.body.memberId ? await adapter.findMemberById(ctx.body.memberId) : member;\n    if (!toBeUpdatedMember) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const toBeUpdatedMemberRoles = toBeUpdatedMember.role.split(\",\");\n    const updatingMemberRoles = member.role.split(\",\");\n    const creatorRole = ctx.context.orgOptions?.creatorRole || \"owner\";\n    if (toBeUpdatedMemberRoles.includes(creatorRole) && !updatingMemberRoles.includes(creatorRole) || roleToSet.includes(creatorRole) && !updatingMemberRoles.includes(creatorRole)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_MEMBER\n      });\n    }\n    const canUpdateMember = (0,_better_auth_OuYYTHC7_mjs__WEBPACK_IMPORTED_MODULE_12__.h)({\n      role: member.role,\n      options: ctx.context.orgOptions,\n      permissions: {\n        member: [\"update\"]\n      }\n    });\n    if (!canUpdateMember) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_MEMBER\n      });\n    }\n    const updatedMember = await adapter.updateMember(\n      ctx.body.memberId,\n      parseRoles(ctx.body.role)\n    );\n    if (!updatedMember) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    return ctx.json(updatedMember);\n  }\n);\nconst getActiveMember = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/get-active-member\",\n  {\n    method: \"GET\",\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Get the member details of the active organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    id: {\n                      type: \"string\"\n                    },\n                    userId: {\n                      type: \"string\"\n                    },\n                    organizationId: {\n                      type: \"string\"\n                    },\n                    role: {\n                      type: \"string\"\n                    }\n                  },\n                  required: [\"id\", \"userId\", \"organizationId\", \"role\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = session.session.activeOrganizationId;\n    if (!organizationId) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        }\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId\n    });\n    if (!member) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n        }\n      });\n    }\n    return ctx.json(member);\n  }\n);\nconst leaveOrganization = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/leave\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string()\n    }),\n    use: [_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.s, orgMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context);\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId: ctx.body.organizationId\n    });\n    if (!member) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const isOwnerLeaving = member.role === (ctx.context.orgOptions?.creatorRole || \"owner\");\n    if (isOwnerLeaving) {\n      const members = await ctx.context.adapter.findMany({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: ctx.body.organizationId\n          }\n        ]\n      });\n      const owners = members.filter(\n        (member2) => member2.role === (ctx.context.orgOptions?.creatorRole || \"owner\")\n      );\n      if (owners.length <= 1) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER\n        });\n      }\n    }\n    await adapter.deleteMember(member.id);\n    if (session.session.activeOrganizationId === ctx.body.organizationId) {\n      await adapter.setActiveOrganization(session.session.token, null);\n    }\n    return ctx.json(member);\n  }\n);\n\nconst createOrganization = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/create\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      name: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n        description: \"The name of the organization\"\n      }),\n      slug: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n        description: \"The slug of the organization\"\n      }),\n      userId: zod__WEBPACK_IMPORTED_MODULE_20__.coerce.string({\n        description: \"The user id of the organization creator. If not provided, the current user will be used. Should only be used by admins or when called by the server.\"\n      }).optional(),\n      logo: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n        description: \"The logo of the organization\"\n      }).optional(),\n      metadata: zod__WEBPACK_IMPORTED_MODULE_20__.record(zod__WEBPACK_IMPORTED_MODULE_20__.string(), zod__WEBPACK_IMPORTED_MODULE_20__.any(), {\n        description: \"The metadata of the organization\"\n      }).optional(),\n      keepCurrentActiveOrganization: zod__WEBPACK_IMPORTED_MODULE_20__.boolean({\n        description: \"Whether to keep the current active organization active after creating a new one\"\n      }).optional()\n    }),\n    use: [orgMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Create an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  description: \"The organization that was created\",\n                  $ref: \"#/components/schemas/Organization\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = await (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(ctx);\n    if (!session && (ctx.request || ctx.headers)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n    }\n    let user = session?.user || null;\n    if (!user) {\n      if (!ctx.body.userId) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n      }\n      user = await ctx.context.internalAdapter.findUserById(ctx.body.userId);\n    }\n    if (!user) {\n      return ctx.json(null, {\n        status: 401\n      });\n    }\n    const options = ctx.context.orgOptions;\n    const canCreateOrg = typeof options?.allowUserToCreateOrganization === \"function\" ? await options.allowUserToCreateOrganization(user) : options?.allowUserToCreateOrganization === void 0 ? true : options.allowUserToCreateOrganization;\n    if (!canCreateOrg) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_ORGANIZATION\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const userOrganizations = await adapter.listOrganizations(user.id);\n    const hasReachedOrgLimit = typeof options.organizationLimit === \"number\" ? userOrganizations.length >= options.organizationLimit : typeof options.organizationLimit === \"function\" ? await options.organizationLimit(user) : false;\n    if (hasReachedOrgLimit) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_ORGANIZATIONS\n      });\n    }\n    const existingOrganization = await adapter.findOrganizationBySlug(\n      ctx.body.slug\n    );\n    if (existingOrganization) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_ALREADY_EXISTS\n      });\n    }\n    let hookResponse = void 0;\n    if (options.organizationCreation?.beforeCreate) {\n      const response = await options.organizationCreation.beforeCreate(\n        {\n          organization: {\n            slug: ctx.body.slug,\n            name: ctx.body.name,\n            logo: ctx.body.logo,\n            createdAt: /* @__PURE__ */ new Date(),\n            metadata: ctx.body.metadata\n          },\n          user\n        },\n        ctx.request\n      );\n      if (response && typeof response === \"object\" && \"data\" in response) {\n        hookResponse = response;\n      }\n    }\n    const organization = await adapter.createOrganization({\n      organization: {\n        slug: ctx.body.slug,\n        name: ctx.body.name,\n        logo: ctx.body.logo,\n        createdAt: /* @__PURE__ */ new Date(),\n        metadata: ctx.body.metadata,\n        ...hookResponse?.data || {}\n      }\n    });\n    let member;\n    if (options?.teams?.enabled && options.teams.defaultTeam?.enabled !== false) {\n      const defaultTeam = await options.teams.defaultTeam?.customCreateDefaultTeam?.(\n        organization,\n        ctx.request\n      ) || await adapter.createTeam({\n        organizationId: organization.id,\n        name: `${organization.name}`,\n        createdAt: /* @__PURE__ */ new Date()\n      });\n      member = await adapter.createMember({\n        teamId: defaultTeam.id,\n        userId: user.id,\n        organizationId: organization.id,\n        role: ctx.context.orgOptions.creatorRole || \"owner\"\n      });\n    } else {\n      member = await adapter.createMember({\n        userId: user.id,\n        organizationId: organization.id,\n        role: ctx.context.orgOptions.creatorRole || \"owner\"\n      });\n    }\n    if (options.organizationCreation?.afterCreate) {\n      await options.organizationCreation.afterCreate(\n        {\n          organization,\n          user,\n          member\n        },\n        ctx.request\n      );\n    }\n    if (ctx.context.session && !ctx.body.keepCurrentActiveOrganization) {\n      await adapter.setActiveOrganization(\n        ctx.context.session.session.token,\n        organization.id\n      );\n    }\n    return ctx.json({\n      ...organization,\n      metadata: ctx.body.metadata,\n      members: [member]\n    });\n  }\n);\nconst checkOrganizationSlug = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/check-slug\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      slug: zod__WEBPACK_IMPORTED_MODULE_20__.string()\n    }),\n    use: [_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.R, orgMiddleware]\n  },\n  async (ctx) => {\n    const orgAdapter = getOrgAdapter(ctx.context);\n    const org = await orgAdapter.findOrganizationBySlug(ctx.body.slug);\n    if (!org) {\n      return ctx.json({\n        status: true\n      });\n    }\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"slug is taken\"\n    });\n  }\n);\nconst updateOrganization = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/update\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      data: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n        name: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n          description: \"The name of the organization\"\n        }).optional(),\n        slug: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n          description: \"The slug of the organization\"\n        }).optional(),\n        logo: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n          description: \"The logo of the organization\"\n        }).optional(),\n        metadata: zod__WEBPACK_IMPORTED_MODULE_20__.record(zod__WEBPACK_IMPORTED_MODULE_20__.string(), zod__WEBPACK_IMPORTED_MODULE_20__.any(), {\n          description: \"The metadata of the organization\"\n        }).optional()\n      }).partial(),\n      organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n    }),\n    requireHeaders: true,\n    use: [orgMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Update an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  description: \"The updated organization\",\n                  $ref: \"#/components/schemas/Organization\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = await ctx.context.getSession(ctx);\n    if (!session) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: \"User not found\"\n      });\n    }\n    const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;\n    if (!organizationId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId\n    });\n    if (!member) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n      });\n    }\n    const canUpdateOrg = (0,_better_auth_OuYYTHC7_mjs__WEBPACK_IMPORTED_MODULE_12__.h)({\n      permissions: {\n        organization: [\"update\"]\n      },\n      role: member.role,\n      options: ctx.context.orgOptions\n    });\n    if (!canUpdateOrg) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_ORGANIZATION\n      });\n    }\n    const updatedOrg = await adapter.updateOrganization(\n      organizationId,\n      ctx.body.data\n    );\n    return ctx.json(updatedOrg);\n  }\n);\nconst deleteOrganization = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/delete\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n        description: \"The organization id to delete\"\n      })\n    }),\n    requireHeaders: true,\n    use: [orgMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Delete an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"string\",\n                  description: \"The organization id that was deleted\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = await ctx.context.getSession(ctx);\n    if (!session) {\n      return ctx.json(null, {\n        status: 401\n      });\n    }\n    const organizationId = ctx.body.organizationId;\n    if (!organizationId) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n        }\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId\n    });\n    if (!member) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n        }\n      });\n    }\n    const canDeleteOrg = (0,_better_auth_OuYYTHC7_mjs__WEBPACK_IMPORTED_MODULE_12__.h)({\n      role: member.role,\n      permissions: {\n        organization: [\"delete\"]\n      },\n      options: ctx.context.orgOptions\n    });\n    if (!canDeleteOrg) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_ORGANIZATION\n      });\n    }\n    if (organizationId === session.session.activeOrganizationId) {\n      await adapter.setActiveOrganization(session.session.token, null);\n    }\n    const option = ctx.context.orgOptions.organizationDeletion;\n    if (option?.disabled) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\");\n    }\n    const org = await adapter.findOrganizationById(organizationId);\n    if (!org) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\");\n    }\n    if (option?.beforeDelete) {\n      await option.beforeDelete({\n        organization: org,\n        user: session.user\n      });\n    }\n    await adapter.deleteOrganization(organizationId);\n    if (option?.afterDelete) {\n      await option.afterDelete({\n        organization: org,\n        user: session.user\n      });\n    }\n    return ctx.json(org);\n  }\n);\nconst getFullOrganization = () => (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/get-full-organization\",\n  {\n    method: \"GET\",\n    query: zod__WEBPACK_IMPORTED_MODULE_20__.optional(\n      zod__WEBPACK_IMPORTED_MODULE_20__.object({\n        organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n          description: \"The organization id to get\"\n        }).optional(),\n        organizationSlug: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n          description: \"The organization slug to get\"\n        }).optional()\n      })\n    ),\n    requireHeaders: true,\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Get the full organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  description: \"The organization\",\n                  $ref: \"#/components/schemas/Organization\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = ctx.query?.organizationSlug || ctx.query?.organizationId || session.session.activeOrganizationId;\n    if (!organizationId) {\n      return ctx.json(null, {\n        status: 200\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const organization = await adapter.findFullOrganization({\n      organizationId,\n      isSlug: !!ctx.query?.organizationSlug,\n      includeTeams: ctx.context.orgOptions.teams?.enabled\n    });\n    const isMember = organization?.members.find(\n      (member) => member.userId === session.user.id\n    );\n    if (!isMember) {\n      await adapter.setActiveOrganization(session.session.token, null);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n      });\n    }\n    if (!organization) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    return ctx.json(organization);\n  }\n);\nconst setActiveOrganization = () => {\n  return (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n    \"/organization/set-active\",\n    {\n      method: \"POST\",\n      body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n        organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n          description: \"The organization id to set as active. It can be null to unset the active organization\"\n        }).nullable().optional(),\n        organizationSlug: zod__WEBPACK_IMPORTED_MODULE_20__.string({\n          description: \"The organization slug to set as active. It can be null to unset the active organization if organizationId is not provided\"\n        }).optional()\n      }),\n      use: [orgSessionMiddleware, orgMiddleware],\n      metadata: {\n        openapi: {\n          description: \"Set the active organization\",\n          responses: {\n            \"200\": {\n              description: \"Success\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    description: \"The organization\",\n                    $ref: \"#/components/schemas/Organization\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n      const session = ctx.context.session;\n      let organizationId = ctx.body.organizationSlug || ctx.body.organizationId;\n      if (organizationId === null) {\n        const sessionOrgId = session.session.activeOrganizationId;\n        if (!sessionOrgId) {\n          return ctx.json(null);\n        }\n        const updatedSession2 = await adapter.setActiveOrganization(\n          session.session.token,\n          null\n        );\n        await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_13__.setSessionCookie)(ctx, {\n          session: updatedSession2,\n          user: session.user\n        });\n        return ctx.json(null);\n      }\n      if (!organizationId) {\n        const sessionOrgId = session.session.activeOrganizationId;\n        if (!sessionOrgId) {\n          return ctx.json(null);\n        }\n        organizationId = sessionOrgId;\n      }\n      const organization = await adapter.findFullOrganization({\n        organizationId,\n        isSlug: !!ctx.body.organizationSlug\n      });\n      const isMember = organization?.members.find(\n        (member) => member.userId === session.user.id\n      );\n      if (!isMember) {\n        await adapter.setActiveOrganization(session.session.token, null);\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n        });\n      }\n      if (!organization) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n        });\n      }\n      const updatedSession = await adapter.setActiveOrganization(\n        session.session.token,\n        organization.id\n      );\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_13__.setSessionCookie)(ctx, {\n        session: updatedSession,\n        user: session.user\n      });\n      return ctx.json(organization);\n    }\n  );\n};\nconst listOrganizations = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/list\",\n  {\n    method: \"GET\",\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"List all organizations\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    $ref: \"#/components/schemas/Organization\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const organizations = await adapter.listOrganizations(\n      ctx.context.session.user.id\n    );\n    return ctx.json(organizations);\n  }\n);\n\nconst role = zod__WEBPACK_IMPORTED_MODULE_20__.string();\nconst invitationStatus = zod__WEBPACK_IMPORTED_MODULE_20__[\"enum\"]([\"pending\", \"accepted\", \"rejected\", \"canceled\"]).default(\"pending\");\nzod__WEBPACK_IMPORTED_MODULE_20__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_20__.string().default(_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_14__.g),\n  name: zod__WEBPACK_IMPORTED_MODULE_20__.string(),\n  slug: zod__WEBPACK_IMPORTED_MODULE_20__.string(),\n  logo: zod__WEBPACK_IMPORTED_MODULE_20__.string().nullish().optional(),\n  metadata: zod__WEBPACK_IMPORTED_MODULE_20__.record(zod__WEBPACK_IMPORTED_MODULE_20__.string()).or(zod__WEBPACK_IMPORTED_MODULE_20__.string().transform((v) => JSON.parse(v))).optional(),\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_20__.date()\n});\nzod__WEBPACK_IMPORTED_MODULE_20__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_20__.string().default(_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_14__.g),\n  organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string(),\n  userId: zod__WEBPACK_IMPORTED_MODULE_20__.coerce.string(),\n  role,\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_20__.date().default(() => /* @__PURE__ */ new Date()),\n  teamId: zod__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n});\nzod__WEBPACK_IMPORTED_MODULE_20__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_20__.string().default(_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_14__.g),\n  organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string(),\n  email: zod__WEBPACK_IMPORTED_MODULE_20__.string(),\n  role,\n  status: invitationStatus,\n  teamId: zod__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n  inviterId: zod__WEBPACK_IMPORTED_MODULE_20__.string(),\n  expiresAt: zod__WEBPACK_IMPORTED_MODULE_20__.date()\n});\nconst teamSchema = zod__WEBPACK_IMPORTED_MODULE_20__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_20__.string().default(_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_14__.g),\n  name: zod__WEBPACK_IMPORTED_MODULE_20__.string().min(1),\n  organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string(),\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_20__.date(),\n  updatedAt: zod__WEBPACK_IMPORTED_MODULE_20__.date().optional()\n});\n\nconst createTeam = (options) => (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/create-team\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n      name: zod__WEBPACK_IMPORTED_MODULE_20__.string()\n    }),\n    use: [orgMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Create a new team within an organization\",\n        responses: {\n          \"200\": {\n            description: \"Team created successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    id: {\n                      type: \"string\",\n                      description: \"Unique identifier of the created team\"\n                    },\n                    name: {\n                      type: \"string\",\n                      description: \"Name of the team\"\n                    },\n                    organizationId: {\n                      type: \"string\",\n                      description: \"ID of the organization the team belongs to\"\n                    },\n                    createdAt: {\n                      type: \"string\",\n                      format: \"date-time\",\n                      description: \"Timestamp when the team was created\"\n                    },\n                    updatedAt: {\n                      type: \"string\",\n                      format: \"date-time\",\n                      description: \"Timestamp when the team was last updated\"\n                    }\n                  },\n                  required: [\n                    \"id\",\n                    \"name\",\n                    \"organizationId\",\n                    \"createdAt\",\n                    \"updatedAt\"\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = await (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(ctx);\n    const organizationId = ctx.body.organizationId || session?.session.activeOrganizationId;\n    if (!session && (ctx.request || ctx.headers)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n    }\n    if (!organizationId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    if (session) {\n      const member = await adapter.findMemberByOrgId({\n        userId: session.user.id,\n        organizationId\n      });\n      if (!member) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION\n        });\n      }\n      const canCreate = (0,_better_auth_OuYYTHC7_mjs__WEBPACK_IMPORTED_MODULE_12__.h)({\n        role: member.role,\n        options: ctx.context.orgOptions,\n        permissions: {\n          team: [\"create\"]\n        }\n      });\n      if (!canCreate) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CREATE_TEAMS_IN_THIS_ORGANIZATION\n        });\n      }\n    }\n    const existingTeams = await adapter.listTeams(organizationId);\n    const maximum = typeof ctx.context.orgOptions.teams?.maximumTeams === \"function\" ? await ctx.context.orgOptions.teams?.maximumTeams(\n      {\n        organizationId,\n        session\n      },\n      ctx.request\n    ) : ctx.context.orgOptions.teams?.maximumTeams;\n    const maxTeamsReached = maximum ? existingTeams.length >= maximum : false;\n    if (maxTeamsReached) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_TEAMS\n      });\n    }\n    const createdTeam = await adapter.createTeam({\n      name: ctx.body.name,\n      organizationId,\n      createdAt: /* @__PURE__ */ new Date(),\n      updatedAt: /* @__PURE__ */ new Date()\n    });\n    return ctx.json(createdTeam);\n  }\n);\nconst removeTeam = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/remove-team\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      teamId: zod__WEBPACK_IMPORTED_MODULE_20__.string(),\n      organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n    }),\n    use: [orgMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Remove a team from an organization\",\n        responses: {\n          \"200\": {\n            description: \"Team removed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    message: {\n                      type: \"string\",\n                      description: \"Confirmation message indicating successful removal\",\n                      enum: [\"Team removed successfully.\"]\n                    }\n                  },\n                  required: [\"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = await (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(ctx);\n    const organizationId = ctx.body.organizationId || session?.session.activeOrganizationId;\n    if (!organizationId) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        }\n      });\n    }\n    if (!session && (ctx.request || ctx.headers)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    if (session) {\n      const member = await adapter.findMemberByOrgId({\n        userId: session.user.id,\n        organizationId\n      });\n      if (!member || member.teamId === ctx.body.teamId) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_TEAM\n        });\n      }\n      const canRemove = (0,_better_auth_OuYYTHC7_mjs__WEBPACK_IMPORTED_MODULE_12__.h)({\n        role: member.role,\n        options: ctx.context.orgOptions,\n        permissions: {\n          team: [\"delete\"]\n        }\n      });\n      if (!canRemove) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_TEAMS_IN_THIS_ORGANIZATION\n        });\n      }\n    }\n    const team = await adapter.findTeamById({\n      teamId: ctx.body.teamId,\n      organizationId\n    });\n    if (!team || team.organizationId !== organizationId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n      });\n    }\n    if (!ctx.context.orgOptions.teams?.allowRemovingAllTeams) {\n      const teams = await adapter.listTeams(organizationId);\n      if (teams.length <= 1) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.UNABLE_TO_REMOVE_LAST_TEAM\n        });\n      }\n    }\n    await adapter.deleteTeam(team.id);\n    return ctx.json({ message: \"Team removed successfully.\" });\n  }\n);\nconst updateTeam = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/update-team\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n      teamId: zod__WEBPACK_IMPORTED_MODULE_20__.string(),\n      data: teamSchema.partial()\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Update an existing team in an organization\",\n        responses: {\n          \"200\": {\n            description: \"Team updated successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    id: {\n                      type: \"string\",\n                      description: \"Unique identifier of the updated team\"\n                    },\n                    name: {\n                      type: \"string\",\n                      description: \"Updated name of the team\"\n                    },\n                    organizationId: {\n                      type: \"string\",\n                      description: \"ID of the organization the team belongs to\"\n                    },\n                    createdAt: {\n                      type: \"string\",\n                      format: \"date-time\",\n                      description: \"Timestamp when the team was created\"\n                    },\n                    updatedAt: {\n                      type: \"string\",\n                      format: \"date-time\",\n                      description: \"Timestamp when the team was last updated\"\n                    }\n                  },\n                  required: [\n                    \"id\",\n                    \"name\",\n                    \"organizationId\",\n                    \"createdAt\",\n                    \"updatedAt\"\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = ctx.body.data.organizationId || session.session.activeOrganizationId;\n    if (!organizationId) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        }\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId\n    });\n    if (!member) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_TEAM\n      });\n    }\n    const canUpdate = (0,_better_auth_OuYYTHC7_mjs__WEBPACK_IMPORTED_MODULE_12__.h)({\n      role: member.role,\n      options: ctx.context.orgOptions,\n      permissions: {\n        team: [\"update\"]\n      }\n    });\n    if (!canUpdate) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_TEAM\n      });\n    }\n    const team = await adapter.findTeamById({\n      teamId: ctx.body.teamId,\n      organizationId\n    });\n    if (!team || team.organizationId !== organizationId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n      });\n    }\n    const updatedTeam = await adapter.updateTeam(team.id, {\n      name: ctx.body.data.name\n    });\n    return ctx.json(updatedTeam);\n  }\n);\nconst listOrganizationTeams = (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/organization/list-teams\",\n  {\n    method: \"GET\",\n    query: zod__WEBPACK_IMPORTED_MODULE_20__.optional(\n      zod__WEBPACK_IMPORTED_MODULE_20__.object({\n        organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n      })\n    ),\n    metadata: {\n      openapi: {\n        description: \"List all teams in an organization\",\n        responses: {\n          \"200\": {\n            description: \"Teams retrieved successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\",\n                        description: \"Unique identifier of the team\"\n                      },\n                      name: {\n                        type: \"string\",\n                        description: \"Name of the team\"\n                      },\n                      organizationId: {\n                        type: \"string\",\n                        description: \"ID of the organization the team belongs to\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team was created\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team was last updated\"\n                      }\n                    },\n                    required: [\n                      \"id\",\n                      \"name\",\n                      \"organizationId\",\n                      \"createdAt\",\n                      \"updatedAt\"\n                    ]\n                  },\n                  description: \"Array of team objects within the organization\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    use: [orgMiddleware, orgSessionMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = session.session.activeOrganizationId || ctx.query?.organizationId;\n    if (!organizationId) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        }\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const member = await adapter.findMemberByOrgId({\n      userId: session?.user.id,\n      organizationId: organizationId || \"\"\n    });\n    if (!member) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\");\n    }\n    const teams = await adapter.listTeams(organizationId);\n    return ctx.json(teams);\n  }\n);\n\nfunction parseRoles(roles) {\n  return Array.isArray(roles) ? roles.join(\",\") : roles;\n}\nconst organization = (options) => {\n  let endpoints = {\n    createOrganization,\n    updateOrganization,\n    deleteOrganization,\n    setActiveOrganization: setActiveOrganization(),\n    getFullOrganization: getFullOrganization(),\n    listOrganizations,\n    createInvitation: createInvitation(),\n    cancelInvitation,\n    acceptInvitation,\n    getInvitation,\n    rejectInvitation,\n    checkOrganizationSlug,\n    addMember: addMember(),\n    removeMember,\n    updateMemberRole: updateMemberRole(),\n    getActiveMember,\n    leaveOrganization,\n    listInvitations\n  };\n  const teamSupport = options?.teams?.enabled;\n  const teamEndpoints = {\n    createTeam: createTeam(),\n    listOrganizationTeams,\n    removeTeam,\n    updateTeam\n  };\n  if (teamSupport) {\n    endpoints = {\n      ...endpoints,\n      ...teamEndpoints\n    };\n  }\n  const roles = {\n    ..._plugins_organization_access_index_mjs__WEBPACK_IMPORTED_MODULE_19__.defaultRoles,\n    ...options?.roles\n  };\n  const teamSchema = teamSupport ? {\n    team: {\n      modelName: options?.schema?.team?.modelName,\n      fields: {\n        name: {\n          type: \"string\",\n          required: true,\n          fieldName: options?.schema?.team?.fields?.name\n        },\n        organizationId: {\n          type: \"string\",\n          required: true,\n          references: {\n            model: \"organization\",\n            field: \"id\"\n          },\n          fieldName: options?.schema?.team?.fields?.organizationId\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options?.schema?.team?.fields?.createdAt\n        },\n        updatedAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options?.schema?.team?.fields?.updatedAt\n        }\n      }\n    }\n  } : void 0;\n  const api = shimContext(endpoints, {\n    orgOptions: options || {},\n    roles,\n    getSession: async (context) => {\n      return await (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(context);\n    }\n  });\n  return {\n    id: \"organization\",\n    endpoints: {\n      ...api,\n      hasPermission: (0,_better_auth_cM0Fc3LZ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n        \"/organization/has-permission\",\n        {\n          method: \"POST\",\n          requireHeaders: true,\n          body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n            organizationId: zod__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n          }).and(\n            zod__WEBPACK_IMPORTED_MODULE_20__.union([\n              zod__WEBPACK_IMPORTED_MODULE_20__.object({\n                permission: zod__WEBPACK_IMPORTED_MODULE_20__.record(zod__WEBPACK_IMPORTED_MODULE_20__.string(), zod__WEBPACK_IMPORTED_MODULE_20__.array(zod__WEBPACK_IMPORTED_MODULE_20__.string())),\n                permissions: zod__WEBPACK_IMPORTED_MODULE_20__.undefined()\n              }),\n              zod__WEBPACK_IMPORTED_MODULE_20__.object({\n                permission: zod__WEBPACK_IMPORTED_MODULE_20__.undefined(),\n                permissions: zod__WEBPACK_IMPORTED_MODULE_20__.record(zod__WEBPACK_IMPORTED_MODULE_20__.string(), zod__WEBPACK_IMPORTED_MODULE_20__.array(zod__WEBPACK_IMPORTED_MODULE_20__.string()))\n              })\n            ])\n          ),\n          use: [orgSessionMiddleware],\n          metadata: {\n            $Infer: {\n              body: {}\n            },\n            openapi: {\n              description: \"Check if the user has permission\",\n              requestBody: {\n                content: {\n                  \"application/json\": {\n                    schema: {\n                      type: \"object\",\n                      properties: {\n                        permission: {\n                          type: \"object\",\n                          description: \"The permission to check\",\n                          deprecated: true\n                        },\n                        permissions: {\n                          type: \"object\",\n                          description: \"The permission to check\"\n                        }\n                      },\n                      required: [\"permissions\"]\n                    }\n                  }\n                }\n              },\n              responses: {\n                \"200\": {\n                  description: \"Success\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          error: {\n                            type: \"string\"\n                          },\n                          success: {\n                            type: \"boolean\"\n                          }\n                        },\n                        required: [\"success\"]\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const activeOrganizationId = ctx.body.organizationId || ctx.context.session.session.activeOrganizationId;\n          if (!activeOrganizationId) {\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n              message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n            });\n          }\n          const adapter = getOrgAdapter(ctx.context);\n          const member = await adapter.findMemberByOrgId({\n            userId: ctx.context.session.user.id,\n            organizationId: activeOrganizationId\n          });\n          if (!member) {\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n              message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n            });\n          }\n          const result = (0,_better_auth_OuYYTHC7_mjs__WEBPACK_IMPORTED_MODULE_12__.h)({\n            role: member.role,\n            options: options || {},\n            permissions: ctx.body.permissions ?? ctx.body.permission\n          });\n          return ctx.json({\n            error: null,\n            success: result\n          });\n        }\n      )\n    },\n    schema: {\n      session: {\n        fields: {\n          activeOrganizationId: {\n            type: \"string\",\n            required: false,\n            fieldName: options?.schema?.session?.fields?.activeOrganizationId\n          }\n        }\n      },\n      organization: {\n        modelName: options?.schema?.organization?.modelName,\n        fields: {\n          name: {\n            type: \"string\",\n            required: true,\n            sortable: true,\n            fieldName: options?.schema?.organization?.fields?.name\n          },\n          slug: {\n            type: \"string\",\n            unique: true,\n            sortable: true,\n            fieldName: options?.schema?.organization?.fields?.slug\n          },\n          logo: {\n            type: \"string\",\n            required: false,\n            fieldName: options?.schema?.organization?.fields?.logo\n          },\n          createdAt: {\n            type: \"date\",\n            required: true,\n            fieldName: options?.schema?.organization?.fields?.createdAt\n          },\n          metadata: {\n            type: \"string\",\n            required: false,\n            fieldName: options?.schema?.organization?.fields?.metadata\n          }\n        }\n      },\n      member: {\n        modelName: options?.schema?.member?.modelName,\n        fields: {\n          organizationId: {\n            type: \"string\",\n            required: true,\n            references: {\n              model: \"organization\",\n              field: \"id\"\n            },\n            fieldName: options?.schema?.member?.fields?.organizationId\n          },\n          userId: {\n            type: \"string\",\n            required: true,\n            fieldName: options?.schema?.member?.fields?.userId,\n            references: {\n              model: \"user\",\n              field: \"id\"\n            }\n          },\n          role: {\n            type: \"string\",\n            required: true,\n            sortable: true,\n            defaultValue: \"member\",\n            fieldName: options?.schema?.member?.fields?.role\n          },\n          ...teamSupport ? {\n            teamId: {\n              type: \"string\",\n              required: false,\n              sortable: true,\n              fieldName: options?.schema?.member?.fields?.teamId\n            }\n          } : {},\n          createdAt: {\n            type: \"date\",\n            required: true,\n            fieldName: options?.schema?.member?.fields?.createdAt\n          }\n        }\n      },\n      invitation: {\n        modelName: options?.schema?.invitation?.modelName,\n        fields: {\n          organizationId: {\n            type: \"string\",\n            required: true,\n            references: {\n              model: \"organization\",\n              field: \"id\"\n            },\n            fieldName: options?.schema?.invitation?.fields?.organizationId\n          },\n          email: {\n            type: \"string\",\n            required: true,\n            sortable: true,\n            fieldName: options?.schema?.invitation?.fields?.email\n          },\n          role: {\n            type: \"string\",\n            required: false,\n            sortable: true,\n            fieldName: options?.schema?.invitation?.fields?.role\n          },\n          ...teamSupport ? {\n            teamId: {\n              type: \"string\",\n              required: false,\n              sortable: true,\n              fieldName: options?.schema?.invitation?.fields?.teamId\n            }\n          } : {},\n          status: {\n            type: \"string\",\n            required: true,\n            sortable: true,\n            defaultValue: \"pending\",\n            fieldName: options?.schema?.invitation?.fields?.status\n          },\n          expiresAt: {\n            type: \"date\",\n            required: true,\n            fieldName: options?.schema?.invitation?.fields?.expiresAt\n          },\n          inviterId: {\n            type: \"string\",\n            references: {\n              model: \"user\",\n              field: \"id\"\n            },\n            fieldName: options?.schema?.invitation?.fields?.inviterId,\n            required: true\n          }\n        }\n      },\n      ...teamSupport ? teamSchema : {}\n    },\n    $Infer: {\n      Organization: {},\n      Invitation: {},\n      Member: {},\n      Team: teamSupport ? {} : {},\n      ActiveOrganization: {}\n    },\n    $ERROR_CODES: ORGANIZATION_ERROR_CODES\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.xcRi-2W1.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/social-providers/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/better-auth/dist/social-providers/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LANG: () => (/* binding */ LANG),\n/* harmony export */   SocialProviderListEnum: () => (/* binding */ SocialProviderListEnum),\n/* harmony export */   apple: () => (/* binding */ apple),\n/* harmony export */   discord: () => (/* binding */ discord),\n/* harmony export */   dropbox: () => (/* binding */ dropbox),\n/* harmony export */   facebook: () => (/* binding */ facebook),\n/* harmony export */   getApplePublicKey: () => (/* binding */ getApplePublicKey),\n/* harmony export */   github: () => (/* binding */ github),\n/* harmony export */   gitlab: () => (/* binding */ gitlab),\n/* harmony export */   google: () => (/* binding */ google),\n/* harmony export */   huggingface: () => (/* binding */ huggingface),\n/* harmony export */   kick: () => (/* binding */ kick),\n/* harmony export */   linkedin: () => (/* binding */ linkedin),\n/* harmony export */   microsoft: () => (/* binding */ microsoft),\n/* harmony export */   reddit: () => (/* binding */ reddit),\n/* harmony export */   roblox: () => (/* binding */ roblox),\n/* harmony export */   socialProviderList: () => (/* binding */ socialProviderList),\n/* harmony export */   socialProviders: () => (/* binding */ socialProviders),\n/* harmony export */   spotify: () => (/* binding */ spotify),\n/* harmony export */   tiktok: () => (/* binding */ tiktok),\n/* harmony export */   twitch: () => (/* binding */ twitch),\n/* harmony export */   twitter: () => (/* binding */ twitter),\n/* harmony export */   vk: () => (/* binding */ vk),\n/* harmony export */   zoom: () => (/* binding */ zoom)\n/* harmony export */ });\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/util/decode_protected_header.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/jwt/verify.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/util/decode_jwt.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/key/import.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/jwks/remote.js\");\n/* harmony import */ var _shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/better-auth.DufyW0qf.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DufyW0qf.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/types.js\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../shared/better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst apple = (options) => {\n  const tokenEndpoint = \"https://appleid.apple.com/auth/token\";\n  return {\n    id: \"apple\",\n    name: \"Apple\",\n    async createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scope = options.disableDefaultScope ? [] : [\"email\", \"name\"];\n      options.scope && _scope.push(...options.scope);\n      scopes && _scope.push(...scopes);\n      const url = await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"apple\",\n        options,\n        authorizationEndpoint: \"https://appleid.apple.com/auth/authorize\",\n        scopes: _scope,\n        state,\n        redirectURI,\n        responseMode: \"form_post\",\n        responseType: \"code id_token\"\n      });\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      const decodedHeader = (0,jose__WEBPACK_IMPORTED_MODULE_12__.decodeProtectedHeader)(token);\n      const { kid, alg: jwtAlg } = decodedHeader;\n      if (!kid || !jwtAlg) return false;\n      const publicKey = await getApplePublicKey(kid);\n      const { payload: jwtClaims } = await (0,jose__WEBPACK_IMPORTED_MODULE_13__.jwtVerify)(token, publicKey, {\n        algorithms: [jwtAlg],\n        issuer: \"https://appleid.apple.com\",\n        audience: options.appBundleIdentifier || options.clientId,\n        maxTokenAge: \"1h\"\n      });\n      [\"email_verified\", \"is_private_email\"].forEach((field) => {\n        if (jwtClaims[field] !== void 0) {\n          jwtClaims[field] = Boolean(jwtClaims[field]);\n        }\n      });\n      if (nonce && jwtClaims.nonce !== nonce) {\n        return false;\n      }\n      return !!jwtClaims;\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://appleid.apple.com/auth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const profile = (0,jose__WEBPACK_IMPORTED_MODULE_14__.decodeJwt)(token.idToken);\n      if (!profile) {\n        return null;\n      }\n      const name = token.user ? `${token.user.name?.firstName} ${token.user.name?.lastName}` : profile.name || profile.email;\n      const emailVerified = typeof profile.email_verified === \"boolean\" ? profile.email_verified : profile.email_verified === \"true\";\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name,\n          emailVerified,\n          email: profile.email,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\nconst getApplePublicKey = async (kid) => {\n  const APPLE_BASE_URL = \"https://appleid.apple.com\";\n  const JWKS_APPLE_URI = \"/auth/keys\";\n  const { data } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(`${APPLE_BASE_URL}${JWKS_APPLE_URI}`);\n  if (!data?.keys) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n      message: \"Keys not found\"\n    });\n  }\n  const jwk = data.keys.find((key) => key.kid === kid);\n  if (!jwk) {\n    throw new Error(`JWK with kid ${kid} not found`);\n  }\n  return await (0,jose__WEBPACK_IMPORTED_MODULE_15__.importJWK)(jwk, jwk.alg);\n};\n\nconst discord = (options) => {\n  return {\n    id: \"discord\",\n    name: \"Discord\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"identify\", \"email\"];\n      scopes && _scopes.push(...scopes);\n      options.scope && _scopes.push(...options.scope);\n      return new URL(\n        `https://discord.com/api/oauth2/authorize?scope=${_scopes.join(\n          \"+\"\n        )}&response_type=code&client_id=${options.clientId}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}&prompt=${options.prompt || \"none\"}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://discord.com/api/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://discord.com/api/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://discord.com/api/users/@me\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      if (profile.avatar === null) {\n        const defaultAvatarNumber = profile.discriminator === \"0\" ? Number(BigInt(profile.id) >> BigInt(22)) % 6 : parseInt(profile.discriminator) % 5;\n        profile.image_url = `https://cdn.discordapp.com/embed/avatars/${defaultAvatarNumber}.png`;\n      } else {\n        const format = profile.avatar.startsWith(\"a_\") ? \"gif\" : \"png\";\n        profile.image_url = `https://cdn.discordapp.com/avatars/${profile.id}/${profile.avatar}.${format}`;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.global_name || profile.username || \"\",\n          email: profile.email,\n          emailVerified: profile.verified,\n          image: profile.image_url,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst facebook = (options) => {\n  return {\n    id: \"facebook\",\n    name: \"Facebook\",\n    async createAuthorizationURL({ state, scopes, redirectURI, loginHint }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"public_profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"facebook\",\n        options,\n        authorizationEndpoint: \"https://www.facebook.com/v21.0/dialog/oauth\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        additionalParams: options.configId ? {\n          config_id: options.configId\n        } : {}\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://graph.facebook.com/oauth/access_token\"\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      if (token.split(\".\").length) {\n        try {\n          const { payload: jwtClaims } = await (0,jose__WEBPACK_IMPORTED_MODULE_13__.jwtVerify)(\n            token,\n            (0,jose__WEBPACK_IMPORTED_MODULE_16__.createRemoteJWKSet)(\n              new URL(\"https://www.facebook.com/.well-known/oauth/openid/jwks\")\n            ),\n            {\n              algorithms: [\"RS256\"],\n              audience: options.clientId,\n              issuer: \"https://www.facebook.com\"\n            }\n          );\n          if (nonce && jwtClaims.nonce !== nonce) {\n            return false;\n          }\n          return !!jwtClaims;\n        } catch (error) {\n          return false;\n        }\n      }\n      return true;\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://graph.facebook.com/v18.0/oauth/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (token.idToken) {\n        const profile2 = (0,jose__WEBPACK_IMPORTED_MODULE_14__.decodeJwt)(token.idToken);\n        const user = {\n          id: profile2.sub,\n          name: profile2.name,\n          email: profile2.email,\n          picture: {\n            data: {\n              url: profile2.picture,\n              height: 100,\n              width: 100,\n              is_silhouette: false\n            }\n          }\n        };\n        const userMap2 = await options.mapProfileToUser?.({\n          ...user,\n          email_verified: true\n        });\n        return {\n          user: {\n            ...user,\n            emailVerified: true,\n            ...userMap2\n          },\n          data: profile2\n        };\n      }\n      const fields = [\n        \"id\",\n        \"name\",\n        \"email\",\n        \"picture\",\n        ...options?.fields || []\n      ];\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://graph.facebook.com/me?fields=\" + fields.join(\",\"),\n        {\n          auth: {\n            type: \"Bearer\",\n            token: token.accessToken\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.name,\n          email: profile.email,\n          image: profile.picture.data.url,\n          emailVerified: profile.email_verified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst github = (options) => {\n  const tokenEndpoint = \"https://github.com/login/oauth/access_token\";\n  return {\n    id: \"github\",\n    name: \"GitHub\",\n    createAuthorizationURL({ state, scopes, loginHint, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"read:user\", \"user:email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"github\",\n        options,\n        authorizationEndpoint: \"https://github.com/login/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        prompt: options.prompt\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://github.com/login/oauth/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://api.github.com/user\",\n        {\n          headers: {\n            \"User-Agent\": \"better-auth\",\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const { data: emails } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\"https://api.github.com/user/emails\", {\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`,\n          \"User-Agent\": \"better-auth\"\n        }\n      });\n      if (!profile.email && emails) {\n        profile.email = (emails.find((e) => e.primary) ?? emails[0])?.email;\n      }\n      const emailVerified = emails?.find((e) => e.email === profile.email)?.verified ?? false;\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id.toString(),\n          name: profile.name || profile.login,\n          email: profile.email,\n          image: profile.avatar_url,\n          emailVerified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst google = (options) => {\n  return {\n    id: \"google\",\n    name: \"Google\",\n    async createAuthorizationURL({\n      state,\n      scopes,\n      codeVerifier,\n      redirectURI,\n      loginHint,\n      display\n    }) {\n      if (!options.clientId || !options.clientSecret) {\n        _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_9__.l.error(\n          \"Client Id and Client Secret is required for Google. Make sure to provide them in the options.\"\n        );\n        throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_8__.B(\"CLIENT_ID_AND_SECRET_REQUIRED\");\n      }\n      if (!codeVerifier) {\n        throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_8__.B(\"codeVerifier is required for Google\");\n      }\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"profile\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      const url = await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"google\",\n        options,\n        authorizationEndpoint: \"https://accounts.google.com/o/oauth2/auth\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI,\n        prompt: options.prompt,\n        accessType: options.accessType,\n        display: display || options.display,\n        loginHint,\n        hd: options.hd,\n        additionalParams: {\n          include_granted_scopes: \"true\"\n        }\n      });\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://oauth2.googleapis.com/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://www.googleapis.com/oauth2/v4/token\"\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      const googlePublicKeyUrl = `https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${token}`;\n      const { data: tokenInfo } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(googlePublicKeyUrl);\n      if (!tokenInfo) {\n        return false;\n      }\n      const isValid = tokenInfo.aud === options.clientId && (tokenInfo.iss === \"https://accounts.google.com\" || tokenInfo.iss === \"accounts.google.com\");\n      return isValid;\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const user = (0,jose__WEBPACK_IMPORTED_MODULE_14__.decodeJwt)(token.idToken);\n      const userMap = await options.mapProfileToUser?.(user);\n      return {\n        user: {\n          id: user.sub,\n          name: user.name,\n          email: user.email,\n          image: user.picture,\n          emailVerified: user.email_verified,\n          ...userMap\n        },\n        data: user\n      };\n    },\n    options\n  };\n};\n\nconst huggingface = (options) => {\n  return {\n    id: \"huggingface\",\n    name: \"Hugging Face\",\n    createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"huggingface\",\n        options,\n        authorizationEndpoint: \"https://huggingface.co/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://huggingface.co/oauth/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://huggingface.co/oauth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://huggingface.co/oauth/userinfo\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.name || profile.preferred_username,\n          email: profile.email,\n          image: profile.picture,\n          emailVerified: profile.email_verified ?? false,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst microsoft = (options) => {\n  const tenant = options.tenantId || \"common\";\n  const authorizationEndpoint = `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/authorize`;\n  const tokenEndpoint = `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/token`;\n  return {\n    id: \"microsoft\",\n    name: \"Microsoft EntraID\",\n    createAuthorizationURL(data) {\n      const scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\", \"User.Read\", \"offline_access\"];\n      options.scope && scopes.push(...options.scope);\n      data.scopes && scopes.push(...data.scopes);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"microsoft\",\n        options,\n        authorizationEndpoint,\n        state: data.state,\n        codeVerifier: data.codeVerifier,\n        scopes,\n        redirectURI: data.redirectURI,\n        prompt: options.prompt\n      });\n    },\n    validateAuthorizationCode({ code, codeVerifier, redirectURI }) {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const user = (0,jose__WEBPACK_IMPORTED_MODULE_14__.decodeJwt)(token.idToken);\n      const profilePhotoSize = options.profilePhotoSize || 48;\n      await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        `https://graph.microsoft.com/v1.0/me/photos/${profilePhotoSize}x${profilePhotoSize}/$value`,\n        {\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          },\n          async onResponse(context) {\n            if (options.disableProfilePhoto || !context.response.ok) {\n              return;\n            }\n            try {\n              const response = context.response.clone();\n              const pictureBuffer = await response.arrayBuffer();\n              const pictureBase64 = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__.base64.encode(pictureBuffer);\n              user.picture = `data:image/jpeg;base64, ${pictureBase64}`;\n            } catch (e) {\n              _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_9__.l.error(\n                e && typeof e === \"object\" && \"name\" in e ? e.name : \"\",\n                e\n              );\n            }\n          }\n        }\n      );\n      const userMap = await options.mapProfileToUser?.(user);\n      return {\n        user: {\n          id: user.sub,\n          name: user.name,\n          email: user.email,\n          image: user.picture,\n          emailVerified: true,\n          ...userMap\n        },\n        data: user\n      };\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      const scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\", \"User.Read\", \"offline_access\"];\n      options.scope && scopes.push(...options.scope);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientSecret: options.clientSecret\n        },\n        extraParams: {\n          scope: scopes.join(\" \")\n          // Include the scopes in request to microsoft\n        },\n        tokenEndpoint\n      });\n    },\n    options\n  };\n};\n\nconst spotify = (options) => {\n  return {\n    id: \"spotify\",\n    name: \"Spotify\",\n    createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user-read-email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"spotify\",\n        options,\n        authorizationEndpoint: \"https://accounts.spotify.com/authorize\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://api.spotify.com/v1/me\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.display_name,\n          email: profile.email,\n          image: profile.images[0]?.url,\n          emailVerified: false,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst twitch = (options) => {\n  return {\n    id: \"twitch\",\n    name: \"Twitch\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user:read:email\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"twitch\",\n        redirectURI,\n        options,\n        authorizationEndpoint: \"https://id.twitch.tv/oauth2/authorize\",\n        scopes: _scopes,\n        state,\n        claims: options.claims || [\n          \"email\",\n          \"email_verified\",\n          \"preferred_username\",\n          \"picture\"\n        ]\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://id.twitch.tv/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://id.twitch.tv/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const idToken = token.idToken;\n      if (!idToken) {\n        _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_9__.l.error(\"No idToken found in token\");\n        return null;\n      }\n      const profile = (0,jose__WEBPACK_IMPORTED_MODULE_14__.decodeJwt)(idToken);\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.preferred_username,\n          email: profile.email,\n          image: profile.picture,\n          emailVerified: false,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst twitter = (options) => {\n  return {\n    id: \"twitter\",\n    name: \"Twitter\",\n    createAuthorizationURL(data) {\n      const _scopes = options.disableDefaultScope ? [] : [\"users.read\", \"tweet.read\", \"offline.access\", \"users.email\"];\n      options.scope && _scopes.push(...options.scope);\n      data.scopes && _scopes.push(...data.scopes);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"twitter\",\n        options,\n        authorizationEndpoint: \"https://x.com/i/oauth2/authorize\",\n        scopes: _scopes,\n        state: data.state,\n        codeVerifier: data.codeVerifier,\n        redirectURI: data.redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        codeVerifier,\n        authentication: \"basic\",\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://api.x.com/2/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://api.x.com/2/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error: profileError } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://api.x.com/2/users/me?user.fields=profile_image_url\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (profileError) {\n        return null;\n      }\n      const { data: emailData, error: emailError } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\"https://api.x.com/2/users/me?user.fields=confirmed_email\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`\n        }\n      });\n      let emailVerified = false;\n      if (!emailError && emailData?.data?.confirmed_email) {\n        profile.data.email = emailData.data.confirmed_email;\n        emailVerified = true;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.data.id,\n          name: profile.data.name,\n          email: profile.data.email || profile.data.username || null,\n          image: profile.data.profile_image_url,\n          emailVerified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst dropbox = (options) => {\n  const tokenEndpoint = \"https://api.dropboxapi.com/oauth2/token\";\n  return {\n    id: \"dropbox\",\n    name: \"Dropbox\",\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      codeVerifier,\n      redirectURI\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"account_info.read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"dropbox\",\n        options,\n        authorizationEndpoint: \"https://www.dropbox.com/oauth2/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://api.dropbox.com/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://api.dropboxapi.com/2/users/get_current_account\",\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.account_id,\n          name: profile.name?.display_name,\n          email: profile.email,\n          emailVerified: profile.email_verified || false,\n          image: profile.profile_photo_url,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst linkedin = (options) => {\n  const authorizationEndpoint = \"https://www.linkedin.com/oauth/v2/authorization\";\n  const tokenEndpoint = \"https://www.linkedin.com/oauth/v2/accessToken\";\n  return {\n    id: \"linkedin\",\n    name: \"Linkedin\",\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      redirectURI,\n      loginHint\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"profile\", \"email\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"linkedin\",\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        loginHint,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://api.linkedin.com/v2/userinfo\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.name,\n          email: profile.email,\n          emailVerified: profile.email_verified || false,\n          image: profile.picture,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst cleanDoubleSlashes = (input = \"\") => {\n  return input.split(\"://\").map((str) => str.replace(/\\/{2,}/g, \"/\")).join(\"://\");\n};\nconst issuerToEndpoints = (issuer) => {\n  let baseUrl = issuer || \"https://gitlab.com\";\n  return {\n    authorizationEndpoint: cleanDoubleSlashes(`${baseUrl}/oauth/authorize`),\n    tokenEndpoint: cleanDoubleSlashes(`${baseUrl}/oauth/token`),\n    userinfoEndpoint: cleanDoubleSlashes(`${baseUrl}/api/v4/user`)\n  };\n};\nconst gitlab = (options) => {\n  const { authorizationEndpoint, tokenEndpoint, userinfoEndpoint } = issuerToEndpoints(options.issuer);\n  const issuerId = \"gitlab\";\n  const issuerName = \"Gitlab\";\n  return {\n    id: issuerId,\n    name: issuerName,\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      codeVerifier,\n      loginHint,\n      redirectURI\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"read_user\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: issuerId,\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier,\n        loginHint\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI, codeVerifier }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI,\n        options,\n        codeVerifier,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://gitlab.com/oauth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        userinfoEndpoint,\n        { headers: { authorization: `Bearer ${token.accessToken}` } }\n      );\n      if (error || profile.state !== \"active\" || profile.locked) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id.toString(),\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.avatar_url,\n          emailVerified: true,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst tiktok = (options) => {\n  return {\n    id: \"tiktok\",\n    name: \"TikTok\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user.info.profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return new URL(\n        `https://www.tiktok.com/v2/auth/authorize?scope=${_scopes.join(\n          \",\"\n        )}&response_type=code&client_key=${options.clientKey}&client_secret=${options.clientSecret}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        tokenEndpoint: \"https://open.tiktokapis.com/v2/oauth/token/\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://open.tiktokapis.com/v2/oauth/token/\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const fields = [\n        \"open_id\",\n        \"avatar_large_url\",\n        \"display_name\",\n        \"username\"\n      ];\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        `https://open.tiktokapis.com/v2/user/info/?fields=${fields.join(\",\")}`,\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      return {\n        user: {\n          email: profile.data.user.email || profile.data.user.username,\n          id: profile.data.user.open_id,\n          name: profile.data.user.display_name || profile.data.user.username,\n          image: profile.data.user.avatar_large_url,\n          /** @note Tiktok does not provide emailVerified or even email*/\n          emailVerified: profile.data.user.email ? true : false\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst reddit = (options) => {\n  return {\n    id: \"reddit\",\n    name: \"Reddit\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"identity\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"reddit\",\n        options,\n        authorizationEndpoint: \"https://www.reddit.com/api/v1/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        duration: options.duration\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      const body = new URLSearchParams({\n        grant_type: \"authorization_code\",\n        code,\n        redirect_uri: options.redirectURI || redirectURI\n      });\n      const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n        accept: \"text/plain\",\n        \"user-agent\": \"better-auth\",\n        Authorization: `Basic ${_better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__.base64.encode(\n          `${options.clientId}:${options.clientSecret}`\n        )}`\n      };\n      const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://www.reddit.com/api/v1/access_token\",\n        {\n          method: \"POST\",\n          headers,\n          body: body.toString()\n        }\n      );\n      if (error) {\n        throw error;\n      }\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.b)(data);\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://www.reddit.com/api/v1/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://oauth.reddit.com/api/v1/me\",\n        {\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`,\n            \"User-Agent\": \"better-auth\"\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.name,\n          email: profile.oauth_client_id,\n          emailVerified: profile.has_verified_email,\n          image: profile.icon_img?.split(\"?\")[0],\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst roblox = (options) => {\n  return {\n    id: \"roblox\",\n    name: \"Roblox\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return new URL(\n        `https://apis.roblox.com/oauth/v1/authorize?scope=${_scopes.join(\n          \"+\"\n        )}&response_type=code&client_id=${options.clientId}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}&prompt=${options.prompt || \"select_account+consent\"}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        tokenEndpoint: \"https://apis.roblox.com/oauth/v1/token\",\n        authentication: \"post\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://apis.roblox.com/oauth/v1/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://apis.roblox.com/oauth/v1/userinfo\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.nickname || profile.preferred_username || \"\",\n          image: profile.picture,\n          email: profile.preferred_username || null,\n          // Roblox does not provide email\n          emailVerified: true,\n          ...userMap\n        },\n        data: {\n          ...profile\n        }\n      };\n    },\n    options\n  };\n};\n\nvar LANG = /* @__PURE__ */ ((LANG2) => {\n  LANG2[LANG2[\"RUS\"] = 0] = \"RUS\";\n  LANG2[LANG2[\"UKR\"] = 1] = \"UKR\";\n  LANG2[LANG2[\"ENG\"] = 3] = \"ENG\";\n  LANG2[LANG2[\"SPA\"] = 4] = \"SPA\";\n  LANG2[LANG2[\"GERMAN\"] = 6] = \"GERMAN\";\n  LANG2[LANG2[\"POL\"] = 15] = \"POL\";\n  LANG2[LANG2[\"FRA\"] = 16] = \"FRA\";\n  LANG2[LANG2[\"TURKEY\"] = 82] = \"TURKEY\";\n  return LANG2;\n})(LANG || {});\nconst vk = (options) => {\n  return {\n    id: \"vk\",\n    name: \"VK\",\n    async createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"phone\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      const authorizationEndpoint = \"https://id.vk.com/authorize\";\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"vk\",\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier\n      });\n    },\n    validateAuthorizationCode: async ({\n      code,\n      codeVerifier,\n      redirectURI,\n      deviceId\n    }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        codeVerifier,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        deviceId,\n        tokenEndpoint: \"https://id.vk.com/oauth2/auth\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://id.vk.com/oauth2/auth\"\n      });\n    },\n    async getUserInfo(data) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(data);\n      }\n      if (!data.accessToken) {\n        return null;\n      }\n      const formBody = new URLSearchParams({\n        access_token: data.accessToken,\n        client_id: options.clientId\n      }).toString();\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://id.vk.com/oauth2/user_info\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: formBody\n        }\n      );\n      if (error) {\n        return null;\n      }\n      if (!profile.user.email) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.user.user_id,\n          first_name: profile.user.first_name,\n          last_name: profile.user.last_name,\n          email: profile.user.email,\n          image: profile.user.avatar,\n          /** @note VK does not provide emailVerified*/\n          emailVerified: !!profile.user.email,\n          birthday: profile.user.birthday,\n          sex: profile.user.sex,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst kick = (options) => {\n  return {\n    id: \"kick\",\n    name: \"Kick\",\n    createAuthorizationURL({ state, scopes, redirectURI, codeVerifier }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user:read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"kick\",\n        redirectURI,\n        options,\n        authorizationEndpoint: \"https://id.kick.com/oauth/authorize\",\n        scopes: _scopes,\n        codeVerifier,\n        state\n      });\n    },\n    async validateAuthorizationCode({ code, redirectURI, codeVerifier }) {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://id.kick.com/oauth/token\",\n        codeVerifier\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\"https://api.kick.com/public/v1/users\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`\n        }\n      });\n      if (error) {\n        return null;\n      }\n      const profile = data.data[0];\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.user_id,\n          name: profile.name,\n          email: profile.email,\n          image: profile.profile_picture,\n          emailVerified: true,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst zoom = (userOptions) => {\n  const options = {\n    pkce: true,\n    ...userOptions\n  };\n  return {\n    id: \"zoom\",\n    name: \"Zoom\",\n    createAuthorizationURL: async ({ state, redirectURI, codeVerifier }) => {\n      const params = new URLSearchParams({\n        response_type: \"code\",\n        redirect_uri: options.redirectURI ? options.redirectURI : redirectURI,\n        client_id: options.clientId,\n        state\n      });\n      if (options.pkce) {\n        const codeChallenge = await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(codeVerifier);\n        params.set(\"code_challenge_method\", \"S256\");\n        params.set(\"code_challenge\", codeChallenge);\n      }\n      const url = new URL(\"https://zoom.us/oauth/authorize\");\n      url.search = params.toString();\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, redirectURI, codeVerifier }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        codeVerifier,\n        options,\n        tokenEndpoint: \"https://zoom.us/oauth/token\",\n        authentication: \"post\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://api.zoom.us/v2/users/me\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.display_name,\n          image: profile.pic_url,\n          email: profile.email,\n          emailVerified: Boolean(profile.verified),\n          ...userMap\n        },\n        data: {\n          ...profile\n        }\n      };\n    }\n  };\n};\n\nconst socialProviders = {\n  apple,\n  discord,\n  facebook,\n  github,\n  microsoft,\n  google,\n  huggingface,\n  spotify,\n  twitch,\n  twitter,\n  dropbox,\n  kick,\n  linkedin,\n  gitlab,\n  tiktok,\n  reddit,\n  roblox,\n  vk,\n  zoom\n};\nconst socialProviderList = Object.keys(socialProviders);\nconst SocialProviderListEnum = zod__WEBPACK_IMPORTED_MODULE_17__[\"enum\"](socialProviderList).or(zod__WEBPACK_IMPORTED_MODULE_17__.string());\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/social-providers/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/node_modules/zod/v3/ZodError.js":
/*!******************************************************************!*\
  !*** ./node_modules/better-auth/node_modules/zod/v3/ZodError.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZodError: () => (/* binding */ ZodError),\n/* harmony export */   ZodIssueCode: () => (/* binding */ ZodIssueCode),\n/* harmony export */   quotelessJson: () => (/* binding */ quotelessJson)\n/* harmony export */ });\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/util.js */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/helpers/util.js\");\n\nconst ZodIssueCode = _helpers_util_js__WEBPACK_IMPORTED_MODULE_0__.util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, _helpers_util_js__WEBPACK_IMPORTED_MODULE_0__.util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                const firstEl = sub.path[0];\n                fieldErrors[firstEl] = fieldErrors[firstEl] || [];\n                fieldErrors[firstEl].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL3pvZC92My9ab2RFcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXlDO0FBQ2xDLHFCQUFxQixrREFBSTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBLDBEQUEwRDtBQUMxRCxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLE1BQU07QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGtEQUFJO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZGF2aWxpbWFzL0RvY3VtZW50cy9EYXZpL2VzdHVkb3MvcmVhY3QvYmV3ZWFyL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9ub2RlX21vZHVsZXMvem9kL3YzL1pvZEVycm9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHV0aWwgfSBmcm9tIFwiLi9oZWxwZXJzL3V0aWwuanNcIjtcbmV4cG9ydCBjb25zdCBab2RJc3N1ZUNvZGUgPSB1dGlsLmFycmF5VG9FbnVtKFtcbiAgICBcImludmFsaWRfdHlwZVwiLFxuICAgIFwiaW52YWxpZF9saXRlcmFsXCIsXG4gICAgXCJjdXN0b21cIixcbiAgICBcImludmFsaWRfdW5pb25cIixcbiAgICBcImludmFsaWRfdW5pb25fZGlzY3JpbWluYXRvclwiLFxuICAgIFwiaW52YWxpZF9lbnVtX3ZhbHVlXCIsXG4gICAgXCJ1bnJlY29nbml6ZWRfa2V5c1wiLFxuICAgIFwiaW52YWxpZF9hcmd1bWVudHNcIixcbiAgICBcImludmFsaWRfcmV0dXJuX3R5cGVcIixcbiAgICBcImludmFsaWRfZGF0ZVwiLFxuICAgIFwiaW52YWxpZF9zdHJpbmdcIixcbiAgICBcInRvb19zbWFsbFwiLFxuICAgIFwidG9vX2JpZ1wiLFxuICAgIFwiaW52YWxpZF9pbnRlcnNlY3Rpb25fdHlwZXNcIixcbiAgICBcIm5vdF9tdWx0aXBsZV9vZlwiLFxuICAgIFwibm90X2Zpbml0ZVwiLFxuXSk7XG5leHBvcnQgY29uc3QgcXVvdGVsZXNzSnNvbiA9IChvYmopID0+IHtcbiAgICBjb25zdCBqc29uID0gSlNPTi5zdHJpbmdpZnkob2JqLCBudWxsLCAyKTtcbiAgICByZXR1cm4ganNvbi5yZXBsYWNlKC9cIihbXlwiXSspXCI6L2csIFwiJDE6XCIpO1xufTtcbmV4cG9ydCBjbGFzcyBab2RFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBnZXQgZXJyb3JzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc3N1ZXM7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGlzc3Vlcykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmlzc3VlcyA9IFtdO1xuICAgICAgICB0aGlzLmFkZElzc3VlID0gKHN1YikgPT4ge1xuICAgICAgICAgICAgdGhpcy5pc3N1ZXMgPSBbLi4udGhpcy5pc3N1ZXMsIHN1Yl07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWRkSXNzdWVzID0gKHN1YnMgPSBbXSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pc3N1ZXMgPSBbLi4udGhpcy5pc3N1ZXMsIC4uLnN1YnNdO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBhY3R1YWxQcm90byA9IG5ldy50YXJnZXQucHJvdG90eXBlO1xuICAgICAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYmFuL2JhblxuICAgICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIGFjdHVhbFByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX19wcm90b19fID0gYWN0dWFsUHJvdG87XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uYW1lID0gXCJab2RFcnJvclwiO1xuICAgICAgICB0aGlzLmlzc3VlcyA9IGlzc3VlcztcbiAgICB9XG4gICAgZm9ybWF0KF9tYXBwZXIpIHtcbiAgICAgICAgY29uc3QgbWFwcGVyID0gX21hcHBlciB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGlzc3VlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzc3VlLm1lc3NhZ2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICBjb25zdCBmaWVsZEVycm9ycyA9IHsgX2Vycm9yczogW10gfTtcbiAgICAgICAgY29uc3QgcHJvY2Vzc0Vycm9yID0gKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlzc3VlIG9mIGVycm9yLmlzc3Vlcykge1xuICAgICAgICAgICAgICAgIGlmIChpc3N1ZS5jb2RlID09PSBcImludmFsaWRfdW5pb25cIikge1xuICAgICAgICAgICAgICAgICAgICBpc3N1ZS51bmlvbkVycm9ycy5tYXAocHJvY2Vzc0Vycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUuY29kZSA9PT0gXCJpbnZhbGlkX3JldHVybl90eXBlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0Vycm9yKGlzc3VlLnJldHVyblR5cGVFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF9hcmd1bWVudHNcIikge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRXJyb3IoaXNzdWUuYXJndW1lbnRzRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS5wYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZEVycm9ycy5fZXJyb3JzLnB1c2gobWFwcGVyKGlzc3VlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyciA9IGZpZWxkRXJyb3JzO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChpIDwgaXNzdWUucGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gaXNzdWUucGF0aFtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlcm1pbmFsID0gaSA9PT0gaXNzdWUucGF0aC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXJtaW5hbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJbZWxdID0gY3VycltlbF0gfHwgeyBfZXJyb3JzOiBbXSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmICh0eXBlb2YgZWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGN1cnJbZWxdID0gY3VycltlbF0gfHwgeyBfZXJyb3JzOiBbXSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH0gZWxzZSBpZiAodHlwZW9mIGVsID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBjb25zdCBlcnJvckFycmF5OiBhbnkgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGVycm9yQXJyYXkuX2Vycm9ycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCBlcnJvckFycmF5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJbZWxdID0gY3VycltlbF0gfHwgeyBfZXJyb3JzOiBbXSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJbZWxdLl9lcnJvcnMucHVzaChtYXBwZXIoaXNzdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIgPSBjdXJyW2VsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcHJvY2Vzc0Vycm9yKHRoaXMpO1xuICAgICAgICByZXR1cm4gZmllbGRFcnJvcnM7XG4gICAgfVxuICAgIHN0YXRpYyBhc3NlcnQodmFsdWUpIHtcbiAgICAgICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBab2RFcnJvcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm90IGEgWm9kRXJyb3I6ICR7dmFsdWV9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XG4gICAgfVxuICAgIGdldCBtZXNzYWdlKCkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5pc3N1ZXMsIHV0aWwuanNvblN0cmluZ2lmeVJlcGxhY2VyLCAyKTtcbiAgICB9XG4gICAgZ2V0IGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzc3Vlcy5sZW5ndGggPT09IDA7XG4gICAgfVxuICAgIGZsYXR0ZW4obWFwcGVyID0gKGlzc3VlKSA9PiBpc3N1ZS5tZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkRXJyb3JzID0ge307XG4gICAgICAgIGNvbnN0IGZvcm1FcnJvcnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBzdWIgb2YgdGhpcy5pc3N1ZXMpIHtcbiAgICAgICAgICAgIGlmIChzdWIucGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3RFbCA9IHN1Yi5wYXRoWzBdO1xuICAgICAgICAgICAgICAgIGZpZWxkRXJyb3JzW2ZpcnN0RWxdID0gZmllbGRFcnJvcnNbZmlyc3RFbF0gfHwgW107XG4gICAgICAgICAgICAgICAgZmllbGRFcnJvcnNbZmlyc3RFbF0ucHVzaChtYXBwZXIoc3ViKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3JtRXJyb3JzLnB1c2gobWFwcGVyKHN1YikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGZvcm1FcnJvcnMsIGZpZWxkRXJyb3JzIH07XG4gICAgfVxuICAgIGdldCBmb3JtRXJyb3JzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mbGF0dGVuKCk7XG4gICAgfVxufVxuWm9kRXJyb3IuY3JlYXRlID0gKGlzc3VlcykgPT4ge1xuICAgIGNvbnN0IGVycm9yID0gbmV3IFpvZEVycm9yKGlzc3Vlcyk7XG4gICAgcmV0dXJuIGVycm9yO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/node_modules/zod/v3/ZodError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/node_modules/zod/v3/errors.js":
/*!****************************************************************!*\
  !*** ./node_modules/better-auth/node_modules/zod/v3/errors.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultErrorMap: () => (/* reexport safe */ _locales_en_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   getErrorMap: () => (/* binding */ getErrorMap),\n/* harmony export */   setErrorMap: () => (/* binding */ setErrorMap)\n/* harmony export */ });\n/* harmony import */ var _locales_en_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./locales/en.js */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/locales/en.js\");\n\nlet overrideErrorMap = _locales_en_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL3pvZC92My9lcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE4QztBQUM5Qyx1QkFBdUIsc0RBQWU7QUFDWDtBQUNwQjtBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpbGltYXMvRG9jdW1lbnRzL0RhdmkvZXN0dWRvcy9yZWFjdC9iZXdlYXIvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL25vZGVfbW9kdWxlcy96b2QvdjMvZXJyb3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWZhdWx0RXJyb3JNYXAgZnJvbSBcIi4vbG9jYWxlcy9lbi5qc1wiO1xubGV0IG92ZXJyaWRlRXJyb3JNYXAgPSBkZWZhdWx0RXJyb3JNYXA7XG5leHBvcnQgeyBkZWZhdWx0RXJyb3JNYXAgfTtcbmV4cG9ydCBmdW5jdGlvbiBzZXRFcnJvck1hcChtYXApIHtcbiAgICBvdmVycmlkZUVycm9yTWFwID0gbWFwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEVycm9yTWFwKCkge1xuICAgIHJldHVybiBvdmVycmlkZUVycm9yTWFwO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/node_modules/zod/v3/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/node_modules/zod/v3/helpers/errorUtil.js":
/*!***************************************************************************!*\
  !*** ./node_modules/better-auth/node_modules/zod/v3/helpers/errorUtil.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   errorUtil: () => (/* binding */ errorUtil)\n/* harmony export */ });\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    // biome-ignore lint:\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message?.message;\n})(errorUtil || (errorUtil = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL3pvZC92My9oZWxwZXJzL2Vycm9yVXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBLHNFQUFzRSxVQUFVO0FBQ2hGO0FBQ0E7QUFDQSxDQUFDLDhCQUE4QiIsInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlsaW1hcy9Eb2N1bWVudHMvRGF2aS9lc3R1ZG9zL3JlYWN0L2Jld2Vhci9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL3pvZC92My9oZWxwZXJzL2Vycm9yVXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIGVycm9yVXRpbDtcbihmdW5jdGlvbiAoZXJyb3JVdGlsKSB7XG4gICAgZXJyb3JVdGlsLmVyclRvT2JqID0gKG1lc3NhZ2UpID0+IHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiID8geyBtZXNzYWdlIH0gOiBtZXNzYWdlIHx8IHt9O1xuICAgIC8vIGJpb21lLWlnbm9yZSBsaW50OlxuICAgIGVycm9yVXRpbC50b1N0cmluZyA9IChtZXNzYWdlKSA9PiB0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIiA/IG1lc3NhZ2UgOiBtZXNzYWdlPy5tZXNzYWdlO1xufSkoZXJyb3JVdGlsIHx8IChlcnJvclV0aWwgPSB7fSkpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/node_modules/zod/v3/helpers/errorUtil.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/node_modules/zod/v3/helpers/parseUtil.js":
/*!***************************************************************************!*\
  !*** ./node_modules/better-auth/node_modules/zod/v3/helpers/parseUtil.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DIRTY: () => (/* binding */ DIRTY),\n/* harmony export */   EMPTY_PATH: () => (/* binding */ EMPTY_PATH),\n/* harmony export */   INVALID: () => (/* binding */ INVALID),\n/* harmony export */   OK: () => (/* binding */ OK),\n/* harmony export */   ParseStatus: () => (/* binding */ ParseStatus),\n/* harmony export */   addIssueToContext: () => (/* binding */ addIssueToContext),\n/* harmony export */   isAborted: () => (/* binding */ isAborted),\n/* harmony export */   isAsync: () => (/* binding */ isAsync),\n/* harmony export */   isDirty: () => (/* binding */ isDirty),\n/* harmony export */   isValid: () => (/* binding */ isValid),\n/* harmony export */   makeIssue: () => (/* binding */ makeIssue)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/errors.js\");\n/* harmony import */ var _locales_en_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../locales/en.js */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/locales/en.js\");\n\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.getErrorMap)();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === _locales_en_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] ? undefined : _locales_en_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL3pvZC92My9oZWxwZXJzL3BhcnNlVXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQTJDO0FBQ0k7QUFDeEM7QUFDUCxZQUFZLG1DQUFtQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0Msa0NBQWtDO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNQLHdCQUF3Qix1REFBVztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHNEQUFlLGVBQWUsc0RBQWU7QUFDekU7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGFBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDTztBQUNQO0FBQ0EsQ0FBQztBQUNNLDRCQUE0Qix3QkFBd0I7QUFDcEQseUJBQXlCLHdCQUF3QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlsaW1hcy9Eb2N1bWVudHMvRGF2aS9lc3R1ZG9zL3JlYWN0L2Jld2Vhci9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL3pvZC92My9oZWxwZXJzL3BhcnNlVXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRFcnJvck1hcCB9IGZyb20gXCIuLi9lcnJvcnMuanNcIjtcbmltcG9ydCBkZWZhdWx0RXJyb3JNYXAgZnJvbSBcIi4uL2xvY2FsZXMvZW4uanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlSXNzdWUgPSAocGFyYW1zKSA9PiB7XG4gICAgY29uc3QgeyBkYXRhLCBwYXRoLCBlcnJvck1hcHMsIGlzc3VlRGF0YSB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gWy4uLnBhdGgsIC4uLihpc3N1ZURhdGEucGF0aCB8fCBbXSldO1xuICAgIGNvbnN0IGZ1bGxJc3N1ZSA9IHtcbiAgICAgICAgLi4uaXNzdWVEYXRhLFxuICAgICAgICBwYXRoOiBmdWxsUGF0aCxcbiAgICB9O1xuICAgIGlmIChpc3N1ZURhdGEubWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5pc3N1ZURhdGEsXG4gICAgICAgICAgICBwYXRoOiBmdWxsUGF0aCxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGlzc3VlRGF0YS5tZXNzYWdlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBsZXQgZXJyb3JNZXNzYWdlID0gXCJcIjtcbiAgICBjb25zdCBtYXBzID0gZXJyb3JNYXBzXG4gICAgICAgIC5maWx0ZXIoKG0pID0+ICEhbSlcbiAgICAgICAgLnNsaWNlKClcbiAgICAgICAgLnJldmVyc2UoKTtcbiAgICBmb3IgKGNvbnN0IG1hcCBvZiBtYXBzKSB7XG4gICAgICAgIGVycm9yTWVzc2FnZSA9IG1hcChmdWxsSXNzdWUsIHsgZGF0YSwgZGVmYXVsdEVycm9yOiBlcnJvck1lc3NhZ2UgfSkubWVzc2FnZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uaXNzdWVEYXRhLFxuICAgICAgICBwYXRoOiBmdWxsUGF0aCxcbiAgICAgICAgbWVzc2FnZTogZXJyb3JNZXNzYWdlLFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IEVNUFRZX1BBVEggPSBbXTtcbmV4cG9ydCBmdW5jdGlvbiBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIGlzc3VlRGF0YSkge1xuICAgIGNvbnN0IG92ZXJyaWRlTWFwID0gZ2V0RXJyb3JNYXAoKTtcbiAgICBjb25zdCBpc3N1ZSA9IG1ha2VJc3N1ZSh7XG4gICAgICAgIGlzc3VlRGF0YTogaXNzdWVEYXRhLFxuICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgIGVycm9yTWFwczogW1xuICAgICAgICAgICAgY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAsIC8vIGNvbnRleHR1YWwgZXJyb3IgbWFwIGlzIGZpcnN0IHByaW9yaXR5XG4gICAgICAgICAgICBjdHguc2NoZW1hRXJyb3JNYXAsIC8vIHRoZW4gc2NoZW1hLWJvdW5kIG1hcCBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgIG92ZXJyaWRlTWFwLCAvLyB0aGVuIGdsb2JhbCBvdmVycmlkZSBtYXBcbiAgICAgICAgICAgIG92ZXJyaWRlTWFwID09PSBkZWZhdWx0RXJyb3JNYXAgPyB1bmRlZmluZWQgOiBkZWZhdWx0RXJyb3JNYXAsIC8vIHRoZW4gZ2xvYmFsIGRlZmF1bHQgbWFwXG4gICAgICAgIF0uZmlsdGVyKCh4KSA9PiAhIXgpLFxuICAgIH0pO1xuICAgIGN0eC5jb21tb24uaXNzdWVzLnB1c2goaXNzdWUpO1xufVxuZXhwb3J0IGNsYXNzIFBhcnNlU3RhdHVzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IFwidmFsaWRcIjtcbiAgICB9XG4gICAgZGlydHkoKSB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlID09PSBcInZhbGlkXCIpXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gXCJkaXJ0eVwiO1xuICAgIH1cbiAgICBhYm9ydCgpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgIT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFwiYWJvcnRlZFwiO1xuICAgIH1cbiAgICBzdGF0aWMgbWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdHMpIHtcbiAgICAgICAgY29uc3QgYXJyYXlWYWx1ZSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHMgb2YgcmVzdWx0cykge1xuICAgICAgICAgICAgaWYgKHMuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgIGlmIChzLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgYXJyYXlWYWx1ZS5wdXNoKHMudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogYXJyYXlWYWx1ZSB9O1xuICAgIH1cbiAgICBzdGF0aWMgYXN5bmMgbWVyZ2VPYmplY3RBc3luYyhzdGF0dXMsIHBhaXJzKSB7XG4gICAgICAgIGNvbnN0IHN5bmNQYWlycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHBhaXIua2V5O1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBhd2FpdCBwYWlyLnZhbHVlO1xuICAgICAgICAgICAgc3luY1BhaXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBzeW5jUGFpcnMpO1xuICAgIH1cbiAgICBzdGF0aWMgbWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgcGFpcnMpIHtcbiAgICAgICAgY29uc3QgZmluYWxPYmplY3QgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICAgICAgICBjb25zdCB7IGtleSwgdmFsdWUgfSA9IHBhaXI7XG4gICAgICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICBpZiAodmFsdWUuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICBpZiAodmFsdWUuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICBpZiAoa2V5LnZhbHVlICE9PSBcIl9fcHJvdG9fX1wiICYmICh0eXBlb2YgdmFsdWUudmFsdWUgIT09IFwidW5kZWZpbmVkXCIgfHwgcGFpci5hbHdheXNTZXQpKSB7XG4gICAgICAgICAgICAgICAgZmluYWxPYmplY3Rba2V5LnZhbHVlXSA9IHZhbHVlLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogZmluYWxPYmplY3QgfTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgSU5WQUxJRCA9IE9iamVjdC5mcmVlemUoe1xuICAgIHN0YXR1czogXCJhYm9ydGVkXCIsXG59KTtcbmV4cG9ydCBjb25zdCBESVJUWSA9ICh2YWx1ZSkgPT4gKHsgc3RhdHVzOiBcImRpcnR5XCIsIHZhbHVlIH0pO1xuZXhwb3J0IGNvbnN0IE9LID0gKHZhbHVlKSA9PiAoeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWUgfSk7XG5leHBvcnQgY29uc3QgaXNBYm9ydGVkID0gKHgpID0+IHguc3RhdHVzID09PSBcImFib3J0ZWRcIjtcbmV4cG9ydCBjb25zdCBpc0RpcnR5ID0gKHgpID0+IHguc3RhdHVzID09PSBcImRpcnR5XCI7XG5leHBvcnQgY29uc3QgaXNWYWxpZCA9ICh4KSA9PiB4LnN0YXR1cyA9PT0gXCJ2YWxpZFwiO1xuZXhwb3J0IGNvbnN0IGlzQXN5bmMgPSAoeCkgPT4gdHlwZW9mIFByb21pc2UgIT09IFwidW5kZWZpbmVkXCIgJiYgeCBpbnN0YW5jZW9mIFByb21pc2U7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/node_modules/zod/v3/helpers/parseUtil.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/node_modules/zod/v3/helpers/util.js":
/*!**********************************************************************!*\
  !*** ./node_modules/better-auth/node_modules/zod/v3/helpers/util.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZodParsedType: () => (/* binding */ ZodParsedType),\n/* harmony export */   getParsedType: () => (/* binding */ getParsedType),\n/* harmony export */   objectUtil: () => (/* binding */ objectUtil),\n/* harmony export */   util: () => (/* binding */ util)\n/* harmony export */ });\nvar util;\n(function (util) {\n    util.assertEqual = (_) => { };\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && Number.isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array.map((val) => (typeof val === \"string\" ? `'${val}'` : val)).join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL3pvZC92My9oZWxwZXJzL3V0aWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLElBQUk7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0JBQW9CO0FBQ2Q7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0NBQWdDO0FBQzFCO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlsaW1hcy9Eb2N1bWVudHMvRGF2aS9lc3R1ZG9zL3JlYWN0L2Jld2Vhci9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL3pvZC92My9oZWxwZXJzL3V0aWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciB1dGlsO1xuKGZ1bmN0aW9uICh1dGlsKSB7XG4gICAgdXRpbC5hc3NlcnRFcXVhbCA9IChfKSA9PiB7IH07XG4gICAgZnVuY3Rpb24gYXNzZXJ0SXMoX2FyZykgeyB9XG4gICAgdXRpbC5hc3NlcnRJcyA9IGFzc2VydElzO1xuICAgIGZ1bmN0aW9uIGFzc2VydE5ldmVyKF94KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH1cbiAgICB1dGlsLmFzc2VydE5ldmVyID0gYXNzZXJ0TmV2ZXI7XG4gICAgdXRpbC5hcnJheVRvRW51bSA9IChpdGVtcykgPT4ge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgICAgICBvYmpbaXRlbV0gPSBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcbiAgICB1dGlsLmdldFZhbGlkRW51bVZhbHVlcyA9IChvYmopID0+IHtcbiAgICAgICAgY29uc3QgdmFsaWRLZXlzID0gdXRpbC5vYmplY3RLZXlzKG9iaikuZmlsdGVyKChrKSA9PiB0eXBlb2Ygb2JqW29ialtrXV0gIT09IFwibnVtYmVyXCIpO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGsgb2YgdmFsaWRLZXlzKSB7XG4gICAgICAgICAgICBmaWx0ZXJlZFtrXSA9IG9ialtrXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXRpbC5vYmplY3RWYWx1ZXMoZmlsdGVyZWQpO1xuICAgIH07XG4gICAgdXRpbC5vYmplY3RWYWx1ZXMgPSAob2JqKSA9PiB7XG4gICAgICAgIHJldHVybiB1dGlsLm9iamVjdEtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmpbZV07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgdXRpbC5vYmplY3RLZXlzID0gdHlwZW9mIE9iamVjdC5rZXlzID09PSBcImZ1bmN0aW9uXCIgLy8gZXNsaW50LWRpc2FibGUtbGluZSBiYW4vYmFuXG4gICAgICAgID8gKG9iaikgPT4gT2JqZWN0LmtleXMob2JqKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGJhbi9iYW5cbiAgICAgICAgOiAob2JqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXlzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ga2V5cztcbiAgICAgICAgfTtcbiAgICB1dGlsLmZpbmQgPSAoYXJyLCBjaGVja2VyKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBhcnIpIHtcbiAgICAgICAgICAgIGlmIChjaGVja2VyKGl0ZW0pKVxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICB1dGlsLmlzSW50ZWdlciA9IHR5cGVvZiBOdW1iZXIuaXNJbnRlZ2VyID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyAodmFsKSA9PiBOdW1iZXIuaXNJbnRlZ2VyKHZhbCkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBiYW4vYmFuXG4gICAgICAgIDogKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiAmJiBOdW1iZXIuaXNGaW5pdGUodmFsKSAmJiBNYXRoLmZsb29yKHZhbCkgPT09IHZhbDtcbiAgICBmdW5jdGlvbiBqb2luVmFsdWVzKGFycmF5LCBzZXBhcmF0b3IgPSBcIiB8IFwiKSB7XG4gICAgICAgIHJldHVybiBhcnJheS5tYXAoKHZhbCkgPT4gKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgPyBgJyR7dmFsfSdgIDogdmFsKSkuam9pbihzZXBhcmF0b3IpO1xuICAgIH1cbiAgICB1dGlsLmpvaW5WYWx1ZXMgPSBqb2luVmFsdWVzO1xuICAgIHV0aWwuanNvblN0cmluZ2lmeVJlcGxhY2VyID0gKF8sIHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYmlnaW50XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xufSkodXRpbCB8fCAodXRpbCA9IHt9KSk7XG5leHBvcnQgdmFyIG9iamVjdFV0aWw7XG4oZnVuY3Rpb24gKG9iamVjdFV0aWwpIHtcbiAgICBvYmplY3RVdGlsLm1lcmdlU2hhcGVzID0gKGZpcnN0LCBzZWNvbmQpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmZpcnN0LFxuICAgICAgICAgICAgLi4uc2Vjb25kLCAvLyBzZWNvbmQgb3ZlcndyaXRlcyBmaXJzdFxuICAgICAgICB9O1xuICAgIH07XG59KShvYmplY3RVdGlsIHx8IChvYmplY3RVdGlsID0ge30pKTtcbmV4cG9ydCBjb25zdCBab2RQYXJzZWRUeXBlID0gdXRpbC5hcnJheVRvRW51bShbXG4gICAgXCJzdHJpbmdcIixcbiAgICBcIm5hblwiLFxuICAgIFwibnVtYmVyXCIsXG4gICAgXCJpbnRlZ2VyXCIsXG4gICAgXCJmbG9hdFwiLFxuICAgIFwiYm9vbGVhblwiLFxuICAgIFwiZGF0ZVwiLFxuICAgIFwiYmlnaW50XCIsXG4gICAgXCJzeW1ib2xcIixcbiAgICBcImZ1bmN0aW9uXCIsXG4gICAgXCJ1bmRlZmluZWRcIixcbiAgICBcIm51bGxcIixcbiAgICBcImFycmF5XCIsXG4gICAgXCJvYmplY3RcIixcbiAgICBcInVua25vd25cIixcbiAgICBcInByb21pc2VcIixcbiAgICBcInZvaWRcIixcbiAgICBcIm5ldmVyXCIsXG4gICAgXCJtYXBcIixcbiAgICBcInNldFwiLFxuXSk7XG5leHBvcnQgY29uc3QgZ2V0UGFyc2VkVHlwZSA9IChkYXRhKSA9PiB7XG4gICAgY29uc3QgdCA9IHR5cGVvZiBkYXRhO1xuICAgIHN3aXRjaCAodCkge1xuICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQ7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnN0cmluZztcbiAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgcmV0dXJuIE51bWJlci5pc05hTihkYXRhKSA/IFpvZFBhcnNlZFR5cGUubmFuIDogWm9kUGFyc2VkVHlwZS5udW1iZXI7XG4gICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5ib29sZWFuO1xuICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmZ1bmN0aW9uO1xuICAgICAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5iaWdpbnQ7XG4gICAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnN5bWJvbDtcbiAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5hcnJheTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUubnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhLnRoZW4gJiYgdHlwZW9mIGRhdGEudGhlbiA9PT0gXCJmdW5jdGlvblwiICYmIGRhdGEuY2F0Y2ggJiYgdHlwZW9mIGRhdGEuY2F0Y2ggPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIE1hcCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUubWFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBTZXQgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgRGF0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmRhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5vYmplY3Q7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS51bmtub3duO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/node_modules/zod/v3/helpers/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/node_modules/zod/v3/locales/en.js":
/*!********************************************************************!*\
  !*** ./node_modules/better-auth/node_modules/zod/v3/locales/en.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ZodError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ZodError.js */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/ZodError.js\");\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/util.js */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/helpers/util.js\");\n\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type:\n            if (issue.received === _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.jsonStringifyReplacer)}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${_helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.joinValues(issue.keys, \", \")}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${_helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.joinValues(issue.options)}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${_helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"bigint\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.assertNever(issue);\n    }\n    return { message };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (errorMap);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/node_modules/zod/v3/locales/en.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/node_modules/zod/v3/types.js":
/*!***************************************************************!*\
  !*** ./node_modules/better-auth/node_modules/zod/v3/types.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAND: () => (/* binding */ BRAND),\n/* harmony export */   NEVER: () => (/* binding */ NEVER),\n/* harmony export */   Schema: () => (/* binding */ ZodType),\n/* harmony export */   ZodAny: () => (/* binding */ ZodAny),\n/* harmony export */   ZodArray: () => (/* binding */ ZodArray),\n/* harmony export */   ZodBigInt: () => (/* binding */ ZodBigInt),\n/* harmony export */   ZodBoolean: () => (/* binding */ ZodBoolean),\n/* harmony export */   ZodBranded: () => (/* binding */ ZodBranded),\n/* harmony export */   ZodCatch: () => (/* binding */ ZodCatch),\n/* harmony export */   ZodDate: () => (/* binding */ ZodDate),\n/* harmony export */   ZodDefault: () => (/* binding */ ZodDefault),\n/* harmony export */   ZodDiscriminatedUnion: () => (/* binding */ ZodDiscriminatedUnion),\n/* harmony export */   ZodEffects: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodEnum: () => (/* binding */ ZodEnum),\n/* harmony export */   ZodFirstPartyTypeKind: () => (/* binding */ ZodFirstPartyTypeKind),\n/* harmony export */   ZodFunction: () => (/* binding */ ZodFunction),\n/* harmony export */   ZodIntersection: () => (/* binding */ ZodIntersection),\n/* harmony export */   ZodLazy: () => (/* binding */ ZodLazy),\n/* harmony export */   ZodLiteral: () => (/* binding */ ZodLiteral),\n/* harmony export */   ZodMap: () => (/* binding */ ZodMap),\n/* harmony export */   ZodNaN: () => (/* binding */ ZodNaN),\n/* harmony export */   ZodNativeEnum: () => (/* binding */ ZodNativeEnum),\n/* harmony export */   ZodNever: () => (/* binding */ ZodNever),\n/* harmony export */   ZodNull: () => (/* binding */ ZodNull),\n/* harmony export */   ZodNullable: () => (/* binding */ ZodNullable),\n/* harmony export */   ZodNumber: () => (/* binding */ ZodNumber),\n/* harmony export */   ZodObject: () => (/* binding */ ZodObject),\n/* harmony export */   ZodOptional: () => (/* binding */ ZodOptional),\n/* harmony export */   ZodPipeline: () => (/* binding */ ZodPipeline),\n/* harmony export */   ZodPromise: () => (/* binding */ ZodPromise),\n/* harmony export */   ZodReadonly: () => (/* binding */ ZodReadonly),\n/* harmony export */   ZodRecord: () => (/* binding */ ZodRecord),\n/* harmony export */   ZodSchema: () => (/* binding */ ZodType),\n/* harmony export */   ZodSet: () => (/* binding */ ZodSet),\n/* harmony export */   ZodString: () => (/* binding */ ZodString),\n/* harmony export */   ZodSymbol: () => (/* binding */ ZodSymbol),\n/* harmony export */   ZodTransformer: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodTuple: () => (/* binding */ ZodTuple),\n/* harmony export */   ZodType: () => (/* binding */ ZodType),\n/* harmony export */   ZodUndefined: () => (/* binding */ ZodUndefined),\n/* harmony export */   ZodUnion: () => (/* binding */ ZodUnion),\n/* harmony export */   ZodUnknown: () => (/* binding */ ZodUnknown),\n/* harmony export */   ZodVoid: () => (/* binding */ ZodVoid),\n/* harmony export */   any: () => (/* binding */ anyType),\n/* harmony export */   array: () => (/* binding */ arrayType),\n/* harmony export */   bigint: () => (/* binding */ bigIntType),\n/* harmony export */   boolean: () => (/* binding */ booleanType),\n/* harmony export */   coerce: () => (/* binding */ coerce),\n/* harmony export */   custom: () => (/* binding */ custom),\n/* harmony export */   date: () => (/* binding */ dateType),\n/* harmony export */   datetimeRegex: () => (/* binding */ datetimeRegex),\n/* harmony export */   discriminatedUnion: () => (/* binding */ discriminatedUnionType),\n/* harmony export */   effect: () => (/* binding */ effectsType),\n/* harmony export */   \"enum\": () => (/* binding */ enumType),\n/* harmony export */   \"function\": () => (/* binding */ functionType),\n/* harmony export */   \"instanceof\": () => (/* binding */ instanceOfType),\n/* harmony export */   intersection: () => (/* binding */ intersectionType),\n/* harmony export */   late: () => (/* binding */ late),\n/* harmony export */   lazy: () => (/* binding */ lazyType),\n/* harmony export */   literal: () => (/* binding */ literalType),\n/* harmony export */   map: () => (/* binding */ mapType),\n/* harmony export */   nan: () => (/* binding */ nanType),\n/* harmony export */   nativeEnum: () => (/* binding */ nativeEnumType),\n/* harmony export */   never: () => (/* binding */ neverType),\n/* harmony export */   \"null\": () => (/* binding */ nullType),\n/* harmony export */   nullable: () => (/* binding */ nullableType),\n/* harmony export */   number: () => (/* binding */ numberType),\n/* harmony export */   object: () => (/* binding */ objectType),\n/* harmony export */   oboolean: () => (/* binding */ oboolean),\n/* harmony export */   onumber: () => (/* binding */ onumber),\n/* harmony export */   optional: () => (/* binding */ optionalType),\n/* harmony export */   ostring: () => (/* binding */ ostring),\n/* harmony export */   pipeline: () => (/* binding */ pipelineType),\n/* harmony export */   preprocess: () => (/* binding */ preprocessType),\n/* harmony export */   promise: () => (/* binding */ promiseType),\n/* harmony export */   record: () => (/* binding */ recordType),\n/* harmony export */   set: () => (/* binding */ setType),\n/* harmony export */   strictObject: () => (/* binding */ strictObjectType),\n/* harmony export */   string: () => (/* binding */ stringType),\n/* harmony export */   symbol: () => (/* binding */ symbolType),\n/* harmony export */   transformer: () => (/* binding */ effectsType),\n/* harmony export */   tuple: () => (/* binding */ tupleType),\n/* harmony export */   undefined: () => (/* binding */ undefinedType),\n/* harmony export */   union: () => (/* binding */ unionType),\n/* harmony export */   unknown: () => (/* binding */ unknownType),\n/* harmony export */   \"void\": () => (/* binding */ voidType)\n/* harmony export */ });\n/* harmony import */ var _ZodError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ZodError.js */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/ZodError.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/errors.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/locales/en.js\");\n/* harmony import */ var _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/errorUtil.js */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/helpers/errorUtil.js\");\n/* harmony import */ var _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/parseUtil.js */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/helpers/parseUtil.js\");\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/util.js */ \"(rsc)/./node_modules/better-auth/node_modules/zod/v3/helpers/util.js\");\n\n\n\n\n\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (Array.isArray(this._key)) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message ?? ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: message ?? required_error ?? ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: message ?? invalid_type_error ?? ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: params?.async ?? false,\n                contextualErrorMap: params?.errorMap,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if (err?.message?.toLowerCase()?.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params?.errorMap,\n                async: true,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    let secondsRegexSource = `[0-5]\\\\d`;\n    if (args.precision) {\n        secondsRegexSource = `${secondsRegexSource}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        secondsRegexSource = `${secondsRegexSource}(\\\\.\\\\d+)?`;\n    }\n    const secondsQuantifier = args.precision ? \"+\" : \"?\"; // require seconds if precision is nonzero\n    return `([01]\\\\d|2[0-3]):[0-5]\\\\d(:${secondsRegexSource})${secondsQuantifier}`;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        if (!header)\n            return false;\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (\"typ\" in decoded && decoded?.typ !== \"JWT\")\n            return false;\n        if (!decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"email\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"emoji\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"uuid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"nanoid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"cuid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"cuid2\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"ulid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"url\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"regex\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"duration\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"ip\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"jwt\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"cidr\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"base64\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"base64url\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            offset: options?.offset ?? false,\n            local: options?.local ?? false,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options?.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options?.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options?.position,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options?.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / 10 ** decCount;\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        let ctx = undefined;\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" || (ch.kind === \"multipleOf\" && _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null;\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (Number.isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_date,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: params?.coerce || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: tooBig ? _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big : _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(shape);\n        this._cached = { shape, keys };\n        return this._cached;\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") {\n            }\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message).message ?? defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(mask)) {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape)) {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape)) {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape)) {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(result.ctx.common.issues));\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(issues));\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(a);\n    const bType = (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object && bType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n        const bKeys = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(b);\n        const sharedKeys = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array && bType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date && bType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date && +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAborted)(parsedLeft) || (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAborted)(parsedRight)) {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_intersection_types,\n                });\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n            }\n            if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isDirty)(parsedLeft) || (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isDirty)(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\n// type ZodTupleItems = [ZodTypeAny, ...ZodTypeAny[]];\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.map) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.set) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.function) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.makeIssue)({\n                data: args,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0,_errors_js__WEBPACK_IMPORTED_MODULE_4__.getErrorMap)(), _errors_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]].filter((x) => !!x),\n                issueData: {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.makeIssue)({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0,_errors_js__WEBPACK_IMPORTED_MODULE_4__.getErrorMap)(), _errors_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]].filter((x) => !!x),\n                issueData: {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(async function (...args) {\n                const error = new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError([]);\n                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args ? args : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                received: ctx.data,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(this._def.values);\n        }\n        if (!this._cache.has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                received: ctx.data,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.string && ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.number) {\n            const expectedValues = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectValues(nativeEnumValues);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.getValidEnumValues(this._def.values));\n        }\n        if (!this._cache.has(input.data)) {\n            const expectedValues = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectValues(nativeEnumValues);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                received: ctx.data,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.promise && ctx.common.async === false) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const promisified = ctx.parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    if (result.status === \"dirty\")\n                        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                    if (status.value === \"dirty\")\n                        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (result.status === \"dirty\")\n                    return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                if (status.value === \"dirty\")\n                    return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!(0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(base))\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {\n                    if (!(0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(base))\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({\n                        status: status.value,\n                        value: result,\n                    }));\n                });\n            }\n        }\n        _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\n\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.null) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\" ? params.default : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(result) ? result.then((data) => freeze(data)) : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? { message: params } : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = params.fatal ?? fatal ?? true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = params.fatal ?? fatal ?? true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\n\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\n// requires TS 4.4+\nclass Class {\n    constructor(..._) { }\n}\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\n\nconst NEVER = _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/node_modules/zod/v3/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-auth/dist/client/react/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/better-auth/dist/client/react/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   capitalizeFirstLetter: () => (/* binding */ capitalizeFirstLetter),\n/* harmony export */   createAuthClient: () => (/* binding */ createAuthClient),\n/* harmony export */   useStore: () => (/* binding */ useStore)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_Dw8i6Dcb_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/better-auth.Dw8i6Dcb.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.Dw8i6Dcb.mjs\");\n/* harmony import */ var nanostores__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! nanostores */ \"(ssr)/./node_modules/nanostores/listen-keys/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-fetch/fetch */ \"(ssr)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/better-auth.VTXNLFMT.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../shared/better-auth.8zoxzg-F.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../shared/better-auth.DdzSJf-n.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_Buni1mmI_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../shared/better-auth.Buni1mmI.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.Buni1mmI.mjs\");\n/* harmony import */ var _shared_better_auth_ffWeg50w_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../shared/better-auth.ffWeg50w.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs\");\n\n\n\n\n\n\n\n\n\n\nfunction useStore(store, options = {}) {\n  let snapshotRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(store.get());\n  const { keys, deps = [store, keys] } = options;\n  let subscribe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((onChange) => {\n    const emitChange = (value) => {\n      if (snapshotRef.current === value) return;\n      snapshotRef.current = value;\n      onChange();\n    };\n    emitChange(store.value);\n    if (keys?.length) {\n      return (0,nanostores__WEBPACK_IMPORTED_MODULE_8__.listenKeys)(store, keys, emitChange);\n    }\n    return store.listen(emitChange);\n  }, deps);\n  let get = () => snapshotRef.current;\n  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)(subscribe, get, get);\n}\n\nfunction getAtomKey(str) {\n  return `use${capitalizeFirstLetter(str)}`;\n}\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction createAuthClient(options) {\n  const {\n    pluginPathMethods,\n    pluginsActions,\n    pluginsAtoms,\n    $fetch,\n    $store,\n    atomListeners\n  } = (0,_shared_better_auth_Dw8i6Dcb_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(options);\n  let resolvedHooks = {};\n  for (const [key, value] of Object.entries(pluginsAtoms)) {\n    resolvedHooks[getAtomKey(key)] = () => useStore(value);\n  }\n  const routes = {\n    ...pluginsActions,\n    ...resolvedHooks,\n    $fetch,\n    $store\n  };\n  const proxy = (0,_shared_better_auth_Dw8i6Dcb_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\n    routes,\n    $fetch,\n    pluginPathMethods,\n    pluginsAtoms,\n    atomListeners\n  );\n  return proxy;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9jbGllbnQvcmVhY3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUEwRztBQUNsRTtBQUMwQjtBQUNyQztBQUNrQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUvQyxxQ0FBcUM7QUFDckMsb0JBQW9CLDZDQUFNO0FBQzFCLFVBQVUsNkJBQTZCO0FBQ3ZDLGtCQUFrQixrREFBVztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsc0RBQVU7QUFDdkI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLFNBQVMsMkRBQW9CO0FBQzdCOztBQUVBO0FBQ0EsZUFBZSwyQkFBMkI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxFQUFFLG1FQUFlO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1FQUFzQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU2RCIsInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlsaW1hcy9Eb2N1bWVudHMvRGF2aS9lc3R1ZG9zL3JlYWN0L2Jld2Vhci9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9jbGllbnQvcmVhY3QvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGcgYXMgZ2V0Q2xpZW50Q29uZmlnLCBjIGFzIGNyZWF0ZUR5bmFtaWNQYXRoUHJveHkgfSBmcm9tICcuLi8uLi9zaGFyZWQvYmV0dGVyLWF1dGguRHc4aTZEY2IubWpzJztcbmltcG9ydCB7IGxpc3RlbktleXMgfSBmcm9tICduYW5vc3RvcmVzJztcbmltcG9ydCB7IHVzZVJlZiwgdXNlQ2FsbGJhY2ssIHVzZVN5bmNFeHRlcm5hbFN0b3JlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICdAYmV0dGVyLWZldGNoL2ZldGNoJztcbmltcG9ydCAnLi4vLi4vc2hhcmVkL2JldHRlci1hdXRoLlZUWE5MRk1ULm1qcyc7XG5pbXBvcnQgJy4uLy4uL3NoYXJlZC9iZXR0ZXItYXV0aC44em94emctRi5tanMnO1xuaW1wb3J0ICcuLi8uLi9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzJztcbmltcG9ydCAnLi4vLi4vc2hhcmVkL2JldHRlci1hdXRoLkJ1bmkxbW1JLm1qcyc7XG5pbXBvcnQgJy4uLy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5mZldlZzUwdy5tanMnO1xuXG5mdW5jdGlvbiB1c2VTdG9yZShzdG9yZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCBzbmFwc2hvdFJlZiA9IHVzZVJlZihzdG9yZS5nZXQoKSk7XG4gIGNvbnN0IHsga2V5cywgZGVwcyA9IFtzdG9yZSwga2V5c10gfSA9IG9wdGlvbnM7XG4gIGxldCBzdWJzY3JpYmUgPSB1c2VDYWxsYmFjaygob25DaGFuZ2UpID0+IHtcbiAgICBjb25zdCBlbWl0Q2hhbmdlID0gKHZhbHVlKSA9PiB7XG4gICAgICBpZiAoc25hcHNob3RSZWYuY3VycmVudCA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgIHNuYXBzaG90UmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICAgIG9uQ2hhbmdlKCk7XG4gICAgfTtcbiAgICBlbWl0Q2hhbmdlKHN0b3JlLnZhbHVlKTtcbiAgICBpZiAoa2V5cz8ubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbGlzdGVuS2V5cyhzdG9yZSwga2V5cywgZW1pdENoYW5nZSk7XG4gICAgfVxuICAgIHJldHVybiBzdG9yZS5saXN0ZW4oZW1pdENoYW5nZSk7XG4gIH0sIGRlcHMpO1xuICBsZXQgZ2V0ID0gKCkgPT4gc25hcHNob3RSZWYuY3VycmVudDtcbiAgcmV0dXJuIHVzZVN5bmNFeHRlcm5hbFN0b3JlKHN1YnNjcmliZSwgZ2V0LCBnZXQpO1xufVxuXG5mdW5jdGlvbiBnZXRBdG9tS2V5KHN0cikge1xuICByZXR1cm4gYHVzZSR7Y2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHN0cil9YDtcbn1cbmZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdExldHRlcihzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUF1dGhDbGllbnQob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgcGx1Z2luUGF0aE1ldGhvZHMsXG4gICAgcGx1Z2luc0FjdGlvbnMsXG4gICAgcGx1Z2luc0F0b21zLFxuICAgICRmZXRjaCxcbiAgICAkc3RvcmUsXG4gICAgYXRvbUxpc3RlbmVyc1xuICB9ID0gZ2V0Q2xpZW50Q29uZmlnKG9wdGlvbnMpO1xuICBsZXQgcmVzb2x2ZWRIb29rcyA9IHt9O1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwbHVnaW5zQXRvbXMpKSB7XG4gICAgcmVzb2x2ZWRIb29rc1tnZXRBdG9tS2V5KGtleSldID0gKCkgPT4gdXNlU3RvcmUodmFsdWUpO1xuICB9XG4gIGNvbnN0IHJvdXRlcyA9IHtcbiAgICAuLi5wbHVnaW5zQWN0aW9ucyxcbiAgICAuLi5yZXNvbHZlZEhvb2tzLFxuICAgICRmZXRjaCxcbiAgICAkc3RvcmVcbiAgfTtcbiAgY29uc3QgcHJveHkgPSBjcmVhdGVEeW5hbWljUGF0aFByb3h5KFxuICAgIHJvdXRlcyxcbiAgICAkZmV0Y2gsXG4gICAgcGx1Z2luUGF0aE1ldGhvZHMsXG4gICAgcGx1Z2luc0F0b21zLFxuICAgIGF0b21MaXN0ZW5lcnNcbiAgKTtcbiAgcmV0dXJuIHByb3h5O1xufVxuXG5leHBvcnQgeyBjYXBpdGFsaXplRmlyc3RMZXR0ZXIsIGNyZWF0ZUF1dGhDbGllbnQsIHVzZVN0b3JlIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-auth/dist/client/react/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ isProduction),\n/* harmony export */   b: () => (/* binding */ isDevelopment),\n/* harmony export */   e: () => (/* binding */ env),\n/* harmony export */   i: () => (/* binding */ isTest)\n/* harmony export */ });\nconst _envShim = /* @__PURE__ */ Object.create(null);\nconst _getEnv = (useShim) => globalThis.process?.env || //@ts-expect-error\nglobalThis.Deno?.env.toObject() || //@ts-expect-error\nglobalThis.__env__ || (useShim ? _envShim : globalThis);\nconst env = new Proxy(_envShim, {\n  get(_, prop) {\n    const env2 = _getEnv();\n    return env2[prop] ?? _envShim[prop];\n  },\n  has(_, prop) {\n    const env2 = _getEnv();\n    return prop in env2 || prop in _envShim;\n  },\n  set(_, prop, value) {\n    const env2 = _getEnv(true);\n    env2[prop] = value;\n    return true;\n  },\n  deleteProperty(_, prop) {\n    if (!prop) {\n      return false;\n    }\n    const env2 = _getEnv(true);\n    delete env2[prop];\n    return true;\n  },\n  ownKeys() {\n    const env2 = _getEnv(true);\n    return Object.keys(env2);\n  }\n});\nfunction toBoolean(val) {\n  return val ? val !== \"false\" : false;\n}\nconst nodeENV = typeof process !== \"undefined\" && process.env && \"development\" || \"\";\nconst isProduction = nodeENV === \"production\";\nconst isDevelopment = nodeENV === \"dev\" || nodeENV === \"development\";\nconst isTest = nodeENV === \"test\" || toBoolean(env.TEST);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguOHpveHpnLUYubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsYUFBb0I7QUFDckY7QUFDQTtBQUNBOztBQUV3RSIsInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlsaW1hcy9Eb2N1bWVudHMvRGF2aS9lc3R1ZG9zL3JlYWN0L2Jld2Vhci9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguOHpveHpnLUYubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF9lbnZTaGltID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG5jb25zdCBfZ2V0RW52ID0gKHVzZVNoaW0pID0+IGdsb2JhbFRoaXMucHJvY2Vzcz8uZW52IHx8IC8vQHRzLWV4cGVjdC1lcnJvclxuZ2xvYmFsVGhpcy5EZW5vPy5lbnYudG9PYmplY3QoKSB8fCAvL0B0cy1leHBlY3QtZXJyb3Jcbmdsb2JhbFRoaXMuX19lbnZfXyB8fCAodXNlU2hpbSA/IF9lbnZTaGltIDogZ2xvYmFsVGhpcyk7XG5jb25zdCBlbnYgPSBuZXcgUHJveHkoX2VudlNoaW0sIHtcbiAgZ2V0KF8sIHByb3ApIHtcbiAgICBjb25zdCBlbnYyID0gX2dldEVudigpO1xuICAgIHJldHVybiBlbnYyW3Byb3BdID8/IF9lbnZTaGltW3Byb3BdO1xuICB9LFxuICBoYXMoXywgcHJvcCkge1xuICAgIGNvbnN0IGVudjIgPSBfZ2V0RW52KCk7XG4gICAgcmV0dXJuIHByb3AgaW4gZW52MiB8fCBwcm9wIGluIF9lbnZTaGltO1xuICB9LFxuICBzZXQoXywgcHJvcCwgdmFsdWUpIHtcbiAgICBjb25zdCBlbnYyID0gX2dldEVudih0cnVlKTtcbiAgICBlbnYyW3Byb3BdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGRlbGV0ZVByb3BlcnR5KF8sIHByb3ApIHtcbiAgICBpZiAoIXByb3ApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZW52MiA9IF9nZXRFbnYodHJ1ZSk7XG4gICAgZGVsZXRlIGVudjJbcHJvcF07XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIG93bktleXMoKSB7XG4gICAgY29uc3QgZW52MiA9IF9nZXRFbnYodHJ1ZSk7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGVudjIpO1xuICB9XG59KTtcbmZ1bmN0aW9uIHRvQm9vbGVhbih2YWwpIHtcbiAgcmV0dXJuIHZhbCA/IHZhbCAhPT0gXCJmYWxzZVwiIDogZmFsc2U7XG59XG5jb25zdCBub2RlRU5WID0gdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgXCJcIjtcbmNvbnN0IGlzUHJvZHVjdGlvbiA9IG5vZGVFTlYgPT09IFwicHJvZHVjdGlvblwiO1xuY29uc3QgaXNEZXZlbG9wbWVudCA9IG5vZGVFTlYgPT09IFwiZGV2XCIgfHwgbm9kZUVOViA9PT0gXCJkZXZlbG9wbWVudFwiO1xuY29uc3QgaXNUZXN0ID0gbm9kZUVOViA9PT0gXCJ0ZXN0XCIgfHwgdG9Cb29sZWFuKGVudi5URVNUKTtcblxuZXhwb3J0IHsgaXNQcm9kdWN0aW9uIGFzIGEsIGlzRGV2ZWxvcG1lbnQgYXMgYiwgZW52IGFzIGUsIGlzVGVzdCBhcyBpIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-auth/dist/shared/better-auth.Buni1mmI.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.Buni1mmI.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   u: () => (/* binding */ useAuthQuery)\n/* harmony export */ });\n/* harmony import */ var nanostores__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nanostores */ \"(ssr)/./node_modules/nanostores/atom/index.js\");\n/* harmony import */ var nanostores__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! nanostores */ \"(ssr)/./node_modules/nanostores/lifecycle/index.js\");\n\n\nconst isServer = typeof window === \"undefined\";\nconst useAuthQuery = (initializedAtom, path, $fetch, options) => {\n  const value = (0,nanostores__WEBPACK_IMPORTED_MODULE_0__.atom)({\n    data: null,\n    error: null,\n    isPending: true,\n    isRefetching: false,\n    refetch: () => {\n      return fn();\n    }\n  });\n  const fn = () => {\n    const opts = typeof options === \"function\" ? options({\n      data: value.get().data,\n      error: value.get().error,\n      isPending: value.get().isPending\n    }) : options;\n    return $fetch(path, {\n      ...opts,\n      async onSuccess(context) {\n        value.set({\n          data: context.data,\n          error: null,\n          isPending: false,\n          isRefetching: false,\n          refetch: value.value.refetch\n        });\n        await opts?.onSuccess?.(context);\n      },\n      async onError(context) {\n        const { request } = context;\n        const retryAttempts = typeof request.retry === \"number\" ? request.retry : request.retry?.attempts;\n        const retryAttempt = request.retryAttempt || 0;\n        if (retryAttempts && retryAttempt < retryAttempts) return;\n        value.set({\n          error: context.error,\n          data: null,\n          isPending: false,\n          isRefetching: false,\n          refetch: value.value.refetch\n        });\n        await opts?.onError?.(context);\n      },\n      async onRequest(context) {\n        const currentValue = value.get();\n        value.set({\n          isPending: currentValue.data === null,\n          data: currentValue.data,\n          error: null,\n          isRefetching: true,\n          refetch: value.value.refetch\n        });\n        await opts?.onRequest?.(context);\n      }\n    });\n  };\n  initializedAtom = Array.isArray(initializedAtom) ? initializedAtom : [initializedAtom];\n  let isMounted = false;\n  for (const initAtom of initializedAtom) {\n    initAtom.subscribe(() => {\n      if (isServer) {\n        return;\n      }\n      if (isMounted) {\n        fn();\n      } else {\n        (0,nanostores__WEBPACK_IMPORTED_MODULE_1__.onMount)(value, () => {\n          setTimeout(() => {\n            fn();\n          }, 0);\n          isMounted = true;\n          return () => {\n            value.off();\n            initAtom.off();\n          };\n        });\n      }\n    });\n  }\n  return value;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQnVuaTFtbUkubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQzs7QUFFM0M7QUFDQTtBQUNBLGdCQUFnQixnREFBSTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsUUFBUSxtREFBTztBQUNmO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRTZCIiwic291cmNlcyI6WyIvVXNlcnMvZGF2aWxpbWFzL0RvY3VtZW50cy9EYXZpL2VzdHVkb3MvcmVhY3QvYmV3ZWFyL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5CdW5pMW1tSS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXRvbSwgb25Nb3VudCB9IGZyb20gJ25hbm9zdG9yZXMnO1xuXG5jb25zdCBpc1NlcnZlciA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCI7XG5jb25zdCB1c2VBdXRoUXVlcnkgPSAoaW5pdGlhbGl6ZWRBdG9tLCBwYXRoLCAkZmV0Y2gsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgdmFsdWUgPSBhdG9tKHtcbiAgICBkYXRhOiBudWxsLFxuICAgIGVycm9yOiBudWxsLFxuICAgIGlzUGVuZGluZzogdHJ1ZSxcbiAgICBpc1JlZmV0Y2hpbmc6IGZhbHNlLFxuICAgIHJlZmV0Y2g6ICgpID0+IHtcbiAgICAgIHJldHVybiBmbigpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGZuID0gKCkgPT4ge1xuICAgIGNvbnN0IG9wdHMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiID8gb3B0aW9ucyh7XG4gICAgICBkYXRhOiB2YWx1ZS5nZXQoKS5kYXRhLFxuICAgICAgZXJyb3I6IHZhbHVlLmdldCgpLmVycm9yLFxuICAgICAgaXNQZW5kaW5nOiB2YWx1ZS5nZXQoKS5pc1BlbmRpbmdcbiAgICB9KSA6IG9wdGlvbnM7XG4gICAgcmV0dXJuICRmZXRjaChwYXRoLCB7XG4gICAgICAuLi5vcHRzLFxuICAgICAgYXN5bmMgb25TdWNjZXNzKGNvbnRleHQpIHtcbiAgICAgICAgdmFsdWUuc2V0KHtcbiAgICAgICAgICBkYXRhOiBjb250ZXh0LmRhdGEsXG4gICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgaXNQZW5kaW5nOiBmYWxzZSxcbiAgICAgICAgICBpc1JlZmV0Y2hpbmc6IGZhbHNlLFxuICAgICAgICAgIHJlZmV0Y2g6IHZhbHVlLnZhbHVlLnJlZmV0Y2hcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IG9wdHM/Lm9uU3VjY2Vzcz8uKGNvbnRleHQpO1xuICAgICAgfSxcbiAgICAgIGFzeW5jIG9uRXJyb3IoY29udGV4dCkge1xuICAgICAgICBjb25zdCB7IHJlcXVlc3QgfSA9IGNvbnRleHQ7XG4gICAgICAgIGNvbnN0IHJldHJ5QXR0ZW1wdHMgPSB0eXBlb2YgcmVxdWVzdC5yZXRyeSA9PT0gXCJudW1iZXJcIiA/IHJlcXVlc3QucmV0cnkgOiByZXF1ZXN0LnJldHJ5Py5hdHRlbXB0cztcbiAgICAgICAgY29uc3QgcmV0cnlBdHRlbXB0ID0gcmVxdWVzdC5yZXRyeUF0dGVtcHQgfHwgMDtcbiAgICAgICAgaWYgKHJldHJ5QXR0ZW1wdHMgJiYgcmV0cnlBdHRlbXB0IDwgcmV0cnlBdHRlbXB0cykgcmV0dXJuO1xuICAgICAgICB2YWx1ZS5zZXQoe1xuICAgICAgICAgIGVycm9yOiBjb250ZXh0LmVycm9yLFxuICAgICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgICAgaXNQZW5kaW5nOiBmYWxzZSxcbiAgICAgICAgICBpc1JlZmV0Y2hpbmc6IGZhbHNlLFxuICAgICAgICAgIHJlZmV0Y2g6IHZhbHVlLnZhbHVlLnJlZmV0Y2hcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IG9wdHM/Lm9uRXJyb3I/Lihjb250ZXh0KTtcbiAgICAgIH0sXG4gICAgICBhc3luYyBvblJlcXVlc3QoY29udGV4dCkge1xuICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB2YWx1ZS5nZXQoKTtcbiAgICAgICAgdmFsdWUuc2V0KHtcbiAgICAgICAgICBpc1BlbmRpbmc6IGN1cnJlbnRWYWx1ZS5kYXRhID09PSBudWxsLFxuICAgICAgICAgIGRhdGE6IGN1cnJlbnRWYWx1ZS5kYXRhLFxuICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgIGlzUmVmZXRjaGluZzogdHJ1ZSxcbiAgICAgICAgICByZWZldGNoOiB2YWx1ZS52YWx1ZS5yZWZldGNoXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCBvcHRzPy5vblJlcXVlc3Q/Lihjb250ZXh0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgaW5pdGlhbGl6ZWRBdG9tID0gQXJyYXkuaXNBcnJheShpbml0aWFsaXplZEF0b20pID8gaW5pdGlhbGl6ZWRBdG9tIDogW2luaXRpYWxpemVkQXRvbV07XG4gIGxldCBpc01vdW50ZWQgPSBmYWxzZTtcbiAgZm9yIChjb25zdCBpbml0QXRvbSBvZiBpbml0aWFsaXplZEF0b20pIHtcbiAgICBpbml0QXRvbS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc01vdW50ZWQpIHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uTW91bnQodmFsdWUsICgpID0+IHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGZuKCk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgaXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgdmFsdWUub2ZmKCk7XG4gICAgICAgICAgICBpbml0QXRvbS5vZmYoKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5leHBvcnQgeyB1c2VBdXRoUXVlcnkgYXMgdSB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-auth/dist/shared/better-auth.Buni1mmI.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: () => (/* binding */ BetterAuthError),\n/* harmony export */   M: () => (/* binding */ MissingDependencyError)\n/* harmony export */ });\nclass BetterAuthError extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.name = \"BetterAuthError\";\n    this.message = message;\n    this.cause = cause;\n    this.stack = \"\";\n  }\n}\nclass MissingDependencyError extends BetterAuthError {\n  constructor(pkgName) {\n    super(\n      `The package \"${pkgName}\" is required. Make sure it is installed.`,\n      pkgName\n    );\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRTZEIiwic291cmNlcyI6WyIvVXNlcnMvZGF2aWxpbWFzL0RvY3VtZW50cy9EYXZpL2VzdHVkb3MvcmVhY3QvYmV3ZWFyL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5EZHpTSmYtbi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQmV0dGVyQXV0aEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjYXVzZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiQmV0dGVyQXV0aEVycm9yXCI7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLmNhdXNlID0gY2F1c2U7XG4gICAgdGhpcy5zdGFjayA9IFwiXCI7XG4gIH1cbn1cbmNsYXNzIE1pc3NpbmdEZXBlbmRlbmN5RXJyb3IgZXh0ZW5kcyBCZXR0ZXJBdXRoRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihwa2dOYW1lKSB7XG4gICAgc3VwZXIoXG4gICAgICBgVGhlIHBhY2thZ2UgXCIke3BrZ05hbWV9XCIgaXMgcmVxdWlyZWQuIE1ha2Ugc3VyZSBpdCBpcyBpbnN0YWxsZWQuYCxcbiAgICAgIHBrZ05hbWVcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7IEJldHRlckF1dGhFcnJvciBhcyBCLCBNaXNzaW5nRGVwZW5kZW5jeUVycm9yIGFzIE0gfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-auth/dist/shared/better-auth.Dw8i6Dcb.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.Dw8i6Dcb.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createDynamicPathProxy),\n/* harmony export */   g: () => (/* binding */ getClientConfig)\n/* harmony export */ });\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-fetch/fetch */ \"(ssr)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.VTXNLFMT.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var nanostores__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! nanostores */ \"(ssr)/./node_modules/nanostores/atom/index.js\");\n/* harmony import */ var _better_auth_Buni1mmI_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.Buni1mmI.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.Buni1mmI.mjs\");\n/* harmony import */ var _better_auth_ffWeg50w_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./better-auth.ffWeg50w.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs\");\n\n\n\n\n\n\nconst redirectPlugin = {\n  id: \"redirect\",\n  name: \"Redirect\",\n  hooks: {\n    onSuccess(context) {\n      if (context.data?.url && context.data?.redirect) {\n        if (typeof window !== \"undefined\" && window.location) {\n          if (window.location) {\n            try {\n              window.location.href = context.data.url;\n            } catch {\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nfunction getSessionAtom($fetch) {\n  const $signal = (0,nanostores__WEBPACK_IMPORTED_MODULE_4__.atom)(false);\n  const session = (0,_better_auth_Buni1mmI_mjs__WEBPACK_IMPORTED_MODULE_2__.u)($signal, \"/get-session\", $fetch, {\n    method: \"GET\"\n  });\n  return {\n    session,\n    $sessionSignal: $signal\n  };\n}\n\nconst getClientConfig = (options) => {\n  const isCredentialsSupported = \"credentials\" in Request.prototype;\n  const baseURL = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(options?.baseURL, options?.basePath);\n  const pluginsFetchPlugins = options?.plugins?.flatMap((plugin) => plugin.fetchPlugins).filter((pl) => pl !== void 0) || [];\n  const $fetch = (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.createFetch)({\n    baseURL,\n    ...isCredentialsSupported ? { credentials: \"include\" } : {},\n    method: \"GET\",\n    jsonParser(text) {\n      if (!text) {\n        return null;\n      }\n      return (0,_better_auth_ffWeg50w_mjs__WEBPACK_IMPORTED_MODULE_3__.p)(text, {\n        strict: false\n      });\n    },\n    customFetchImpl: async (input, init) => {\n      try {\n        return await fetch(input, init);\n      } catch (error) {\n        return Response.error();\n      }\n    },\n    ...options?.fetchOptions,\n    plugins: options?.disableDefaultFetchPlugins ? [...options?.fetchOptions?.plugins || [], ...pluginsFetchPlugins] : [\n      redirectPlugin,\n      ...options?.fetchOptions?.plugins || [],\n      ...pluginsFetchPlugins\n    ]\n  });\n  const { $sessionSignal, session } = getSessionAtom($fetch);\n  const plugins = options?.plugins || [];\n  let pluginsActions = {};\n  let pluginsAtoms = {\n    $sessionSignal,\n    session\n  };\n  let pluginPathMethods = {\n    \"/sign-out\": \"POST\",\n    \"/revoke-sessions\": \"POST\",\n    \"/revoke-other-sessions\": \"POST\",\n    \"/delete-user\": \"POST\"\n  };\n  const atomListeners = [\n    {\n      signal: \"$sessionSignal\",\n      matcher(path) {\n        return path === \"/sign-out\" || path === \"/update-user\" || path.startsWith(\"/sign-in\") || path.startsWith(\"/sign-up\") || path === \"/delete-user\" || path === \"/verify-email\";\n      }\n    }\n  ];\n  for (const plugin of plugins) {\n    if (plugin.getAtoms) {\n      Object.assign(pluginsAtoms, plugin.getAtoms?.($fetch));\n    }\n    if (plugin.pathMethods) {\n      Object.assign(pluginPathMethods, plugin.pathMethods);\n    }\n    if (plugin.atomListeners) {\n      atomListeners.push(...plugin.atomListeners);\n    }\n  }\n  const $store = {\n    notify: (signal) => {\n      pluginsAtoms[signal].set(\n        !pluginsAtoms[signal].get()\n      );\n    },\n    listen: (signal, listener) => {\n      pluginsAtoms[signal].subscribe(listener);\n    },\n    atoms: pluginsAtoms\n  };\n  for (const plugin of plugins) {\n    if (plugin.getActions) {\n      Object.assign(\n        pluginsActions,\n        plugin.getActions?.($fetch, $store, options)\n      );\n    }\n  }\n  return {\n    pluginsActions,\n    pluginsAtoms,\n    pluginPathMethods,\n    atomListeners,\n    $fetch,\n    $store\n  };\n};\n\nfunction getMethod(path, knownPathMethods, args) {\n  const method = knownPathMethods[path];\n  const { fetchOptions, query, ...body } = args || {};\n  if (method) {\n    return method;\n  }\n  if (fetchOptions?.method) {\n    return fetchOptions.method;\n  }\n  if (body && Object.keys(body).length > 0) {\n    return \"POST\";\n  }\n  return \"GET\";\n}\nfunction createDynamicPathProxy(routes, client, knownPathMethods, atoms, atomListeners) {\n  function createProxy(path = []) {\n    return new Proxy(function() {\n    }, {\n      get(target, prop) {\n        const fullPath = [...path, prop];\n        let current = routes;\n        for (const segment of fullPath) {\n          if (current && typeof current === \"object\" && segment in current) {\n            current = current[segment];\n          } else {\n            current = void 0;\n            break;\n          }\n        }\n        if (typeof current === \"function\") {\n          return current;\n        }\n        return createProxy(fullPath);\n      },\n      apply: async (_, __, args) => {\n        const routePath = \"/\" + path.map(\n          (segment) => segment.replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`)\n        ).join(\"/\");\n        const arg = args[0] || {};\n        const fetchOptions = args[1] || {};\n        const { query, fetchOptions: argFetchOptions, ...body } = arg;\n        const options = {\n          ...fetchOptions,\n          ...argFetchOptions\n        };\n        const method = getMethod(routePath, knownPathMethods, arg);\n        return await client(routePath, {\n          ...options,\n          body: method === \"GET\" ? void 0 : {\n            ...body,\n            ...options?.body || {}\n          },\n          query: query || options?.query,\n          method,\n          async onSuccess(context) {\n            await options?.onSuccess?.(context);\n            const matches = atomListeners?.find((s) => s.matcher(routePath));\n            if (!matches) return;\n            const signal = atoms[matches.signal];\n            if (!signal) return;\n            const val = signal.get();\n            setTimeout(() => {\n              signal.set(!val);\n            }, 10);\n          }\n        });\n      }\n    });\n  }\n  return createProxy();\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-auth/dist/shared/better-auth.Dw8i6Dcb.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getBaseURL),\n/* harmony export */   b: () => (/* binding */ getHost),\n/* harmony export */   c: () => (/* binding */ getProtocol),\n/* harmony export */   g: () => (/* binding */ getOrigin)\n/* harmony export */ });\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\nfunction checkHasPath(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.pathname !== \"/\";\n  } catch (error) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n      `Invalid base URL: ${url}. Please provide a valid base URL.`\n    );\n  }\n}\nfunction withPath(url, path = \"/api/auth\") {\n  const hasPath = checkHasPath(url);\n  if (hasPath) {\n    return url;\n  }\n  path = path.startsWith(\"/\") ? path : `/${path}`;\n  return `${url.replace(/\\/+$/, \"\")}${path}`;\n}\nfunction getBaseURL(url, path, request) {\n  if (url) {\n    return withPath(url, path);\n  }\n  const fromEnv = _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NEXT_PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_AUTH_URL || (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL !== \"/\" ? _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL : void 0);\n  if (fromEnv) {\n    return withPath(fromEnv, path);\n  }\n  const fromRequest = request?.headers.get(\"x-forwarded-host\");\n  const fromRequestProto = request?.headers.get(\"x-forwarded-proto\");\n  if (fromRequest && fromRequestProto) {\n    return withPath(`${fromRequestProto}://${fromRequest}`, path);\n  }\n  if (request) {\n    const url2 = getOrigin(request.url);\n    if (!url2) {\n      throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n        \"Could not get origin from request. Please provide a valid base URL.\"\n      );\n    }\n    return withPath(url2, path);\n  }\n  if (typeof window !== \"undefined\" && window.location) {\n    return withPath(window.location.origin, path);\n  }\n  return void 0;\n}\nfunction getOrigin(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.origin;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getProtocol(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.protocol;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getHost(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.host;\n  } catch (error) {\n    return url;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguVlRYTkxGTVQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFzRDtBQUNZOztBQUVsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixjQUFjLHdEQUFlO0FBQzdCLDJCQUEyQixJQUFJO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsS0FBSztBQUNoRCxZQUFZLHdCQUF3QixFQUFFLEtBQUs7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix3REFBRyxvQkFBb0Isd0RBQUcsZ0NBQWdDLHdEQUFHLDJCQUEyQix3REFBRyxnQ0FBZ0Msd0RBQUcsMEJBQTBCLHdEQUFHLG9CQUFvQix3REFBRztBQUNwTTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaUJBQWlCLEtBQUssWUFBWTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix3REFBZTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFMkUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpbGltYXMvRG9jdW1lbnRzL0RhdmkvZXN0dWRvcy9yZWFjdC9iZXdlYXIvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLlZUWE5MRk1ULm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlIGFzIGVudiB9IGZyb20gJy4vYmV0dGVyLWF1dGguOHpveHpnLUYubWpzJztcbmltcG9ydCB7IEIgYXMgQmV0dGVyQXV0aEVycm9yIH0gZnJvbSAnLi9iZXR0ZXItYXV0aC5EZHpTSmYtbi5tanMnO1xuXG5mdW5jdGlvbiBjaGVja0hhc1BhdGgodXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwucGF0aG5hbWUgIT09IFwiL1wiO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBCZXR0ZXJBdXRoRXJyb3IoXG4gICAgICBgSW52YWxpZCBiYXNlIFVSTDogJHt1cmx9LiBQbGVhc2UgcHJvdmlkZSBhIHZhbGlkIGJhc2UgVVJMLmBcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiB3aXRoUGF0aCh1cmwsIHBhdGggPSBcIi9hcGkvYXV0aFwiKSB7XG4gIGNvbnN0IGhhc1BhdGggPSBjaGVja0hhc1BhdGgodXJsKTtcbiAgaWYgKGhhc1BhdGgpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHBhdGggPSBwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpID8gcGF0aCA6IGAvJHtwYXRofWA7XG4gIHJldHVybiBgJHt1cmwucmVwbGFjZSgvXFwvKyQvLCBcIlwiKX0ke3BhdGh9YDtcbn1cbmZ1bmN0aW9uIGdldEJhc2VVUkwodXJsLCBwYXRoLCByZXF1ZXN0KSB7XG4gIGlmICh1cmwpIHtcbiAgICByZXR1cm4gd2l0aFBhdGgodXJsLCBwYXRoKTtcbiAgfVxuICBjb25zdCBmcm9tRW52ID0gZW52LkJFVFRFUl9BVVRIX1VSTCB8fCBlbnYuTkVYVF9QVUJMSUNfQkVUVEVSX0FVVEhfVVJMIHx8IGVudi5QVUJMSUNfQkVUVEVSX0FVVEhfVVJMIHx8IGVudi5OVVhUX1BVQkxJQ19CRVRURVJfQVVUSF9VUkwgfHwgZW52Lk5VWFRfUFVCTElDX0FVVEhfVVJMIHx8IChlbnYuQkFTRV9VUkwgIT09IFwiL1wiID8gZW52LkJBU0VfVVJMIDogdm9pZCAwKTtcbiAgaWYgKGZyb21FbnYpIHtcbiAgICByZXR1cm4gd2l0aFBhdGgoZnJvbUVudiwgcGF0aCk7XG4gIH1cbiAgY29uc3QgZnJvbVJlcXVlc3QgPSByZXF1ZXN0Py5oZWFkZXJzLmdldChcIngtZm9yd2FyZGVkLWhvc3RcIik7XG4gIGNvbnN0IGZyb21SZXF1ZXN0UHJvdG8gPSByZXF1ZXN0Py5oZWFkZXJzLmdldChcIngtZm9yd2FyZGVkLXByb3RvXCIpO1xuICBpZiAoZnJvbVJlcXVlc3QgJiYgZnJvbVJlcXVlc3RQcm90bykge1xuICAgIHJldHVybiB3aXRoUGF0aChgJHtmcm9tUmVxdWVzdFByb3RvfTovLyR7ZnJvbVJlcXVlc3R9YCwgcGF0aCk7XG4gIH1cbiAgaWYgKHJlcXVlc3QpIHtcbiAgICBjb25zdCB1cmwyID0gZ2V0T3JpZ2luKHJlcXVlc3QudXJsKTtcbiAgICBpZiAoIXVybDIpIHtcbiAgICAgIHRocm93IG5ldyBCZXR0ZXJBdXRoRXJyb3IoXG4gICAgICAgIFwiQ291bGQgbm90IGdldCBvcmlnaW4gZnJvbSByZXF1ZXN0LiBQbGVhc2UgcHJvdmlkZSBhIHZhbGlkIGJhc2UgVVJMLlwiXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gd2l0aFBhdGgodXJsMiwgcGF0aCk7XG4gIH1cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIHdpdGhQYXRoKHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sIHBhdGgpO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiBnZXRPcmlnaW4odXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwub3JpZ2luO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5mdW5jdGlvbiBnZXRQcm90b2NvbCh1cmwpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJzZWRVcmwgPSBuZXcgVVJMKHVybCk7XG4gICAgcmV0dXJuIHBhcnNlZFVybC5wcm90b2NvbDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0SG9zdCh1cmwpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJzZWRVcmwgPSBuZXcgVVJMKHVybCk7XG4gICAgcmV0dXJuIHBhcnNlZFVybC5ob3N0O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbn1cblxuZXhwb3J0IHsgZ2V0QmFzZVVSTCBhcyBhLCBnZXRIb3N0IGFzIGIsIGdldFByb3RvY29sIGFzIGMsIGdldE9yaWdpbiBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   p: () => (/* binding */ parseJSON)\n/* harmony export */ });\nconst PROTO_POLLUTION_PATTERNS = {\n  proto: /\"(?:_|\\\\u0{2}5[Ff]){2}(?:p|\\\\u0{2}70)(?:r|\\\\u0{2}72)(?:o|\\\\u0{2}6[Ff])(?:t|\\\\u0{2}74)(?:o|\\\\u0{2}6[Ff])(?:_|\\\\u0{2}5[Ff]){2}\"\\s*:/,\n  constructor: /\"(?:c|\\\\u0063)(?:o|\\\\u006[Ff])(?:n|\\\\u006[Ee])(?:s|\\\\u0073)(?:t|\\\\u0074)(?:r|\\\\u0072)(?:u|\\\\u0075)(?:c|\\\\u0063)(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:r|\\\\u0072)\"\\s*:/,\n  protoShort: /\"__proto__\"\\s*:/,\n  constructorShort: /\"constructor\"\\s*:/\n};\nconst JSON_SIGNATURE = /^\\s*[\"[{]|^\\s*-?\\d{1,16}(\\.\\d{1,17})?([Ee][+-]?\\d+)?\\s*$/;\nconst SPECIAL_VALUES = {\n  true: true,\n  false: false,\n  null: null,\n  undefined: void 0,\n  nan: Number.NaN,\n  infinity: Number.POSITIVE_INFINITY,\n  \"-infinity\": Number.NEGATIVE_INFINITY\n};\nconst ISO_DATE_REGEX = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{1,7}))?(?:Z|([+-])(\\d{2}):(\\d{2}))$/;\nfunction isValidDate(date) {\n  return date instanceof Date && !isNaN(date.getTime());\n}\nfunction parseISODate(value) {\n  const match = ISO_DATE_REGEX.exec(value);\n  if (!match) return null;\n  const [\n    ,\n    year,\n    month,\n    day,\n    hour,\n    minute,\n    second,\n    ms,\n    offsetSign,\n    offsetHour,\n    offsetMinute\n  ] = match;\n  let date = new Date(\n    Date.UTC(\n      parseInt(year, 10),\n      parseInt(month, 10) - 1,\n      parseInt(day, 10),\n      parseInt(hour, 10),\n      parseInt(minute, 10),\n      parseInt(second, 10),\n      ms ? parseInt(ms.padEnd(3, \"0\"), 10) : 0\n    )\n  );\n  if (offsetSign) {\n    const offset = (parseInt(offsetHour, 10) * 60 + parseInt(offsetMinute, 10)) * (offsetSign === \"+\" ? -1 : 1);\n    date.setUTCMinutes(date.getUTCMinutes() + offset);\n  }\n  return isValidDate(date) ? date : null;\n}\nfunction betterJSONParse(value, options = {}) {\n  const {\n    strict = false,\n    warnings = false,\n    reviver,\n    parseDates = true\n  } = options;\n  if (typeof value !== \"string\") {\n    return value;\n  }\n  const trimmed = value.trim();\n  if (trimmed[0] === '\"' && trimmed.endsWith('\"') && !trimmed.slice(1, -1).includes('\"')) {\n    return trimmed.slice(1, -1);\n  }\n  const lowerValue = trimmed.toLowerCase();\n  if (lowerValue.length <= 9 && lowerValue in SPECIAL_VALUES) {\n    return SPECIAL_VALUES[lowerValue];\n  }\n  if (!JSON_SIGNATURE.test(trimmed)) {\n    if (strict) {\n      throw new SyntaxError(\"[better-json] Invalid JSON\");\n    }\n    return value;\n  }\n  const hasProtoPattern = Object.entries(PROTO_POLLUTION_PATTERNS).some(\n    ([key, pattern]) => {\n      const matches = pattern.test(trimmed);\n      if (matches && warnings) {\n        console.warn(\n          `[better-json] Detected potential prototype pollution attempt using ${key} pattern`\n        );\n      }\n      return matches;\n    }\n  );\n  if (hasProtoPattern && strict) {\n    throw new Error(\n      \"[better-json] Potential prototype pollution attempt detected\"\n    );\n  }\n  try {\n    const secureReviver = (key, value2) => {\n      if (key === \"__proto__\" || key === \"constructor\" && value2 && typeof value2 === \"object\" && \"prototype\" in value2) {\n        if (warnings) {\n          console.warn(\n            `[better-json] Dropping \"${key}\" key to prevent prototype pollution`\n          );\n        }\n        return void 0;\n      }\n      if (parseDates && typeof value2 === \"string\") {\n        const date = parseISODate(value2);\n        if (date) {\n          return date;\n        }\n      }\n      return reviver ? reviver(key, value2) : value2;\n    };\n    return JSON.parse(trimmed, secureReviver);\n  } catch (error) {\n    if (strict) {\n      throw error;\n    }\n    return value;\n  }\n}\nfunction parseJSON(value, options = { strict: true }) {\n  return betterJSONParse(value, options);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguZmZXZWc1MHcubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLHFCQUFxQixFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFO0FBQ3RJO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFdBQVcsS0FBSyxNQUFNLEtBQUs7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLElBQUksa0JBQWtCLEVBQUUsTUFBTSxFQUFFO0FBQ2pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGLEtBQUs7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLElBQUk7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGNBQWM7QUFDcEQ7QUFDQTs7QUFFMEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpbGltYXMvRG9jdW1lbnRzL0RhdmkvZXN0dWRvcy9yZWFjdC9iZXdlYXIvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLmZmV2VnNTB3Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQUk9UT19QT0xMVVRJT05fUEFUVEVSTlMgPSB7XG4gIHByb3RvOiAvXCIoPzpffFxcXFx1MHsyfTVbRmZdKXsyfSg/OnB8XFxcXHUwezJ9NzApKD86cnxcXFxcdTB7Mn03MikoPzpvfFxcXFx1MHsyfTZbRmZdKSg/OnR8XFxcXHUwezJ9NzQpKD86b3xcXFxcdTB7Mn02W0ZmXSkoPzpffFxcXFx1MHsyfTVbRmZdKXsyfVwiXFxzKjovLFxuICBjb25zdHJ1Y3RvcjogL1wiKD86Y3xcXFxcdTAwNjMpKD86b3xcXFxcdTAwNltGZl0pKD86bnxcXFxcdTAwNltFZV0pKD86c3xcXFxcdTAwNzMpKD86dHxcXFxcdTAwNzQpKD86cnxcXFxcdTAwNzIpKD86dXxcXFxcdTAwNzUpKD86Y3xcXFxcdTAwNjMpKD86dHxcXFxcdTAwNzQpKD86b3xcXFxcdTAwNltGZl0pKD86cnxcXFxcdTAwNzIpXCJcXHMqOi8sXG4gIHByb3RvU2hvcnQ6IC9cIl9fcHJvdG9fX1wiXFxzKjovLFxuICBjb25zdHJ1Y3RvclNob3J0OiAvXCJjb25zdHJ1Y3RvclwiXFxzKjovXG59O1xuY29uc3QgSlNPTl9TSUdOQVRVUkUgPSAvXlxccypbXCJbe118XlxccyotP1xcZHsxLDE2fShcXC5cXGR7MSwxN30pPyhbRWVdWystXT9cXGQrKT9cXHMqJC87XG5jb25zdCBTUEVDSUFMX1ZBTFVFUyA9IHtcbiAgdHJ1ZTogdHJ1ZSxcbiAgZmFsc2U6IGZhbHNlLFxuICBudWxsOiBudWxsLFxuICB1bmRlZmluZWQ6IHZvaWQgMCxcbiAgbmFuOiBOdW1iZXIuTmFOLFxuICBpbmZpbml0eTogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICBcIi1pbmZpbml0eVwiOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbn07XG5jb25zdCBJU09fREFURV9SRUdFWCA9IC9eKFxcZHs0fSktKFxcZHsyfSktKFxcZHsyfSlUKFxcZHsyfSk6KFxcZHsyfSk6KFxcZHsyfSkoPzpcXC4oXFxkezEsN30pKT8oPzpafChbKy1dKShcXGR7Mn0pOihcXGR7Mn0pKSQvO1xuZnVuY3Rpb24gaXNWYWxpZERhdGUoZGF0ZSkge1xuICByZXR1cm4gZGF0ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKGRhdGUuZ2V0VGltZSgpKTtcbn1cbmZ1bmN0aW9uIHBhcnNlSVNPRGF0ZSh2YWx1ZSkge1xuICBjb25zdCBtYXRjaCA9IElTT19EQVRFX1JFR0VYLmV4ZWModmFsdWUpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgW1xuICAgICxcbiAgICB5ZWFyLFxuICAgIG1vbnRoLFxuICAgIGRheSxcbiAgICBob3VyLFxuICAgIG1pbnV0ZSxcbiAgICBzZWNvbmQsXG4gICAgbXMsXG4gICAgb2Zmc2V0U2lnbixcbiAgICBvZmZzZXRIb3VyLFxuICAgIG9mZnNldE1pbnV0ZVxuICBdID0gbWF0Y2g7XG4gIGxldCBkYXRlID0gbmV3IERhdGUoXG4gICAgRGF0ZS5VVEMoXG4gICAgICBwYXJzZUludCh5ZWFyLCAxMCksXG4gICAgICBwYXJzZUludChtb250aCwgMTApIC0gMSxcbiAgICAgIHBhcnNlSW50KGRheSwgMTApLFxuICAgICAgcGFyc2VJbnQoaG91ciwgMTApLFxuICAgICAgcGFyc2VJbnQobWludXRlLCAxMCksXG4gICAgICBwYXJzZUludChzZWNvbmQsIDEwKSxcbiAgICAgIG1zID8gcGFyc2VJbnQobXMucGFkRW5kKDMsIFwiMFwiKSwgMTApIDogMFxuICAgIClcbiAgKTtcbiAgaWYgKG9mZnNldFNpZ24pIHtcbiAgICBjb25zdCBvZmZzZXQgPSAocGFyc2VJbnQob2Zmc2V0SG91ciwgMTApICogNjAgKyBwYXJzZUludChvZmZzZXRNaW51dGUsIDEwKSkgKiAob2Zmc2V0U2lnbiA9PT0gXCIrXCIgPyAtMSA6IDEpO1xuICAgIGRhdGUuc2V0VVRDTWludXRlcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSArIG9mZnNldCk7XG4gIH1cbiAgcmV0dXJuIGlzVmFsaWREYXRlKGRhdGUpID8gZGF0ZSA6IG51bGw7XG59XG5mdW5jdGlvbiBiZXR0ZXJKU09OUGFyc2UodmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgc3RyaWN0ID0gZmFsc2UsXG4gICAgd2FybmluZ3MgPSBmYWxzZSxcbiAgICByZXZpdmVyLFxuICAgIHBhcnNlRGF0ZXMgPSB0cnVlXG4gIH0gPSBvcHRpb25zO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGNvbnN0IHRyaW1tZWQgPSB2YWx1ZS50cmltKCk7XG4gIGlmICh0cmltbWVkWzBdID09PSAnXCInICYmIHRyaW1tZWQuZW5kc1dpdGgoJ1wiJykgJiYgIXRyaW1tZWQuc2xpY2UoMSwgLTEpLmluY2x1ZGVzKCdcIicpKSB7XG4gICAgcmV0dXJuIHRyaW1tZWQuc2xpY2UoMSwgLTEpO1xuICB9XG4gIGNvbnN0IGxvd2VyVmFsdWUgPSB0cmltbWVkLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChsb3dlclZhbHVlLmxlbmd0aCA8PSA5ICYmIGxvd2VyVmFsdWUgaW4gU1BFQ0lBTF9WQUxVRVMpIHtcbiAgICByZXR1cm4gU1BFQ0lBTF9WQUxVRVNbbG93ZXJWYWx1ZV07XG4gIH1cbiAgaWYgKCFKU09OX1NJR05BVFVSRS50ZXN0KHRyaW1tZWQpKSB7XG4gICAgaWYgKHN0cmljdCkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiW2JldHRlci1qc29uXSBJbnZhbGlkIEpTT05cIik7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBjb25zdCBoYXNQcm90b1BhdHRlcm4gPSBPYmplY3QuZW50cmllcyhQUk9UT19QT0xMVVRJT05fUEFUVEVSTlMpLnNvbWUoXG4gICAgKFtrZXksIHBhdHRlcm5dKSA9PiB7XG4gICAgICBjb25zdCBtYXRjaGVzID0gcGF0dGVybi50ZXN0KHRyaW1tZWQpO1xuICAgICAgaWYgKG1hdGNoZXMgJiYgd2FybmluZ3MpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBbYmV0dGVyLWpzb25dIERldGVjdGVkIHBvdGVudGlhbCBwcm90b3R5cGUgcG9sbHV0aW9uIGF0dGVtcHQgdXNpbmcgJHtrZXl9IHBhdHRlcm5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hlcztcbiAgICB9XG4gICk7XG4gIGlmIChoYXNQcm90b1BhdHRlcm4gJiYgc3RyaWN0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJbYmV0dGVyLWpzb25dIFBvdGVudGlhbCBwcm90b3R5cGUgcG9sbHV0aW9uIGF0dGVtcHQgZGV0ZWN0ZWRcIlxuICAgICk7XG4gIH1cbiAgdHJ5IHtcbiAgICBjb25zdCBzZWN1cmVSZXZpdmVyID0gKGtleSwgdmFsdWUyKSA9PiB7XG4gICAgICBpZiAoa2V5ID09PSBcIl9fcHJvdG9fX1wiIHx8IGtleSA9PT0gXCJjb25zdHJ1Y3RvclwiICYmIHZhbHVlMiAmJiB0eXBlb2YgdmFsdWUyID09PSBcIm9iamVjdFwiICYmIFwicHJvdG90eXBlXCIgaW4gdmFsdWUyKSB7XG4gICAgICAgIGlmICh3YXJuaW5ncykge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIGBbYmV0dGVyLWpzb25dIERyb3BwaW5nIFwiJHtrZXl9XCIga2V5IHRvIHByZXZlbnQgcHJvdG90eXBlIHBvbGx1dGlvbmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VEYXRlcyAmJiB0eXBlb2YgdmFsdWUyID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBwYXJzZUlTT0RhdGUodmFsdWUyKTtcbiAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJldml2ZXIgPyByZXZpdmVyKGtleSwgdmFsdWUyKSA6IHZhbHVlMjtcbiAgICB9O1xuICAgIHJldHVybiBKU09OLnBhcnNlKHRyaW1tZWQsIHNlY3VyZVJldml2ZXIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbmZ1bmN0aW9uIHBhcnNlSlNPTih2YWx1ZSwgb3B0aW9ucyA9IHsgc3RyaWN0OiB0cnVlIH0pIHtcbiAgcmV0dXJuIGJldHRlckpTT05QYXJzZSh2YWx1ZSwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCB7IHBhcnNlSlNPTiBhcyBwIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs\n");

/***/ })

};
;